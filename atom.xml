<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liang Yu&#39;s Website</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yuliang.xyz/"/>
  <updated>2019-05-17T00:41:57.125Z</updated>
  <id>http://www.yuliang.xyz/</id>
  
  <author>
    <name>Liang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java SE 11 Programmer II | 1Z0-816</title>
    <link href="http://www.yuliang.xyz/2019/05/16/java-se-11-programmer-ii/"/>
    <id>http://www.yuliang.xyz/2019/05/16/java-se-11-programmer-ii/</id>
    <published>2019-05-17T00:41:08.000Z</published>
    <updated>2019-05-17T00:41:57.125Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java SE 11 Programmer I | 1Z0-815</title>
    <link href="http://www.yuliang.xyz/2019/05/16/java-se-11-programmer-i/"/>
    <id>http://www.yuliang.xyz/2019/05/16/java-se-11-programmer-i/</id>
    <published>2019-05-17T00:40:57.000Z</published>
    <updated>2019-05-21T02:54:03.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Understanding-Java-Technology-and-environment"><a href="#Understanding-Java-Technology-and-environment" class="headerlink" title="Understanding Java Technology  and environment"></a>Understanding Java Technology  and environment</h1><p>An <em>object</em> is a runtime instance of a class in memory. Java classes have two primary elements: methods and fields.</p><p>Classes v.s. Files</p><p>If you do have a public class, it needs to match the filename.<br>Most of the time, each Java class is defined in its own *.java file.<br>And you can put two classes in the same file. When you do so, at most one of the classes in the<br>file is allowed to be public.</p><h2 id="Describe-Java-Technology-and-the-Java-development-environment"><a href="#Describe-Java-Technology-and-the-Java-development-environment" class="headerlink" title="Describe Java Technology and the Java development environment"></a>Describe Java Technology and the Java development environment</h2><p>source code .Java file –&gt; bytecode .class file for the JVM</p><p>javac Zoo.java<br>java Zoo “San Diego” Zoo</p><ul><li>If you want spaces inside an argument, you need to use quotes.</li></ul><h3 id="Package-Declaration-and-Imports"><a href="#Package-Declaration-and-Imports" class="headerlink" title="Package Declaration and Imports"></a>Package Declaration and Imports</h3><ul><li>Java puts classes in packages.</li><li>Java automatically import java.lang package</li><li>Another case of redundancy involves importing a class that is in the same packages as the class importing it. Java automatically looks in the current pacakge for other classes.</li><li>Wildcards only matches class names<br>import java.nio.file.Files –&gt; import java.nio.file.<em> not import java.nio.</em></li><li>Tricky case: when the class is found in multiple packages, Java gives you the compiler Error:<br>import java.util.<em><br>import java.sql.</em> // Not compile, because both have the Date class<br>“The type Date is ambiguous”</li><li><p>If you explicitly import a class name, it takes precedence over any wildcards present.<br>import java.util.Date;<br>import java.sql.* // need a whole pile of other classes in the java.sql packages but need<br>java.util.Date</p></li><li><p>compile error: The import java.sql.Date collides with another import statement<br>import java.util.Date;<br>import java.sql.Date;</p></li><li><p>If you really need to Use two classes with the same name:</p><ol><li>one use the import, the other use the fully qualified class name, the package name, a dot, and the class name, to specify that it’s special.</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class Conflicts &#123;</span><br><span class="line">  Date date;</span><br><span class="line">  java.sql.Date sqlDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OR, just don’t use import and always use the fully qualified class name:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Conflicts &#123;</span><br><span class="line">  java.util.Date date;</span><br><span class="line">  java.sqal.Date sqlDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Default package is no package name.</p><h3 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h3><p>Two key points: </p><ol><li>the name of the constructor matches the name of the class</li><li>there is no return type</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>; <span class="comment">// another way to initialize fields is to do so directly</span></span><br><span class="line">                <span class="comment">// on the line on which they're declared.</span></span><br><span class="line">String string;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* the purpose of a constructor is to initialize fields</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">      string = <span class="string">"Hello"</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not a constructor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Initialzier-Blocks"><a href="#Initialzier-Blocks" class="headerlink" title="Initialzier Blocks"></a>Initialzier Blocks</h3><p>The code between <em>{ }</em> is called a code block. Sometimes, code blocks are inside a method. Other times, code blocks appear outside a method. These are called <strong>instance initializers</strong>.</p><h3 id="Order-of-Initialization"><a href="#Order-of-Initialization" class="headerlink" title="Order of Initialization"></a>Order of Initialization</h3><ol><li>Fields and instance initializer blocks are run in the order in which they appear in the file.</li><li>The constructor runs after all fields and instance initializer blocks have run.</li></ol><p>Order matters for the fields and blocks of code. See example below:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chick</span> </span>&#123;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"Fluffy"</span>;</span><br><span class="line">    &#123;</span><br><span class="line">    System.out.println(<span class="string">"setting field"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DOES NOT COMPILE</span></span><br><span class="line">    <span class="comment">// Cannot refer to a variable before it has been initialized</span></span><br><span class="line">    &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"Fluffy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Identify-key-features-of-the-Java-language"><a href="#Identify-key-features-of-the-Java-language" class="headerlink" title="Identify key features of the Java language"></a>Identify key features of the Java language</h2><ul><li>Objected Oriented</li><li>Encapsulation</li><li>Platform Independent</li><li>Robust</li><li>Simple</li><li>Secure</li></ul><h1 id="Working-With-Java-Primitive-Data-Types-and-String-APIs"><a href="#Working-With-Java-Primitive-Data-Types-and-String-APIs" class="headerlink" title="Working With Java Primitive Data Types and String APIs"></a>Working With Java Primitive Data Types and String APIs</h1><h2 id="Using-Operators-and-Decision-Constructs"><a href="#Using-Operators-and-Decision-Constructs" class="headerlink" title="Using Operators and Decision Constructs"></a>Using Operators and Decision Constructs</h2><h3 id="Use-Java-operators-including-parentheses-to-override-operator-precedence"><a href="#Use-Java-operators-including-parentheses-to-override-operator-precedence" class="headerlink" title="Use Java operators; including parentheses to override operator precedence"></a>Use Java operators; including parentheses to override operator precedence</h3><h3 id="Create-if-and-if-else-and-ternary-constructs"><a href="#Create-if-and-if-else-and-ternary-constructs" class="headerlink" title="Create if and if/else and ternary constructs"></a>Create if and if/else and ternary constructs</h3><h3 id="use-a-switch-statement"><a href="#use-a-switch-statement" class="headerlink" title="use a switch statement"></a>use a switch statement</h3><h2 id="Declare-and-initialize-variables-including-casting-and-promoting-primitive-data-types"><a href="#Declare-and-initialize-variables-including-casting-and-promoting-primitive-data-types" class="headerlink" title="Declare and initialize variables (including casting and promoting primitive data types)"></a>Declare and initialize variables (including casting and promoting primitive data types)</h2><h2 id="Identify-the-scope-of-variables"><a href="#Identify-the-scope-of-variables" class="headerlink" title="Identify the scope of variables"></a>Identify the scope of variables</h2><h2 id="Use-local-variable-type-inference"><a href="#Use-local-variable-type-inference" class="headerlink" title="Use local variable type inference"></a>Use local variable type inference</h2><h2 id="Create-and-manipulate-Strings"><a href="#Create-and-manipulate-Strings" class="headerlink" title="Create and manipulate Strings"></a>Create and manipulate Strings</h2><h2 id="Manipulate-data-using-the-StringBuilder-class-and-its-methods"><a href="#Manipulate-data-using-the-StringBuilder-class-and-its-methods" class="headerlink" title="Manipulate data using the StringBuilder class and its methods"></a>Manipulate data using the StringBuilder class and its methods</h2><h1 id="Working-with-Java-Arrays"><a href="#Working-with-Java-Arrays" class="headerlink" title="Working with Java Arrays"></a>Working with Java Arrays</h1><h2 id="Declare-instantiate-initialize-and-use-a-one-dimensional-array"><a href="#Declare-instantiate-initialize-and-use-a-one-dimensional-array" class="headerlink" title="Declare, instantiate, initialize and use a one-dimensional array"></a>Declare, instantiate, initialize and use a one-dimensional array</h2><h2 id="Declare-instantiate-initialize-and-use-two-dimensional-array"><a href="#Declare-instantiate-initialize-and-use-two-dimensional-array" class="headerlink" title="Declare, instantiate, initialize and use two-dimensional array"></a>Declare, instantiate, initialize and use two-dimensional array</h2><h1 id="Creating-and-Using-Methods"><a href="#Creating-and-Using-Methods" class="headerlink" title="Creating and Using Methods"></a>Creating and Using Methods</h1><p>Create methods and constructors with arguments and return values<br>Create and invoke overloaded methods<br>Apply the static keyword to methods and fields </p><h1 id="Reusing-Implementations-Through-Inheritance"><a href="#Reusing-Implementations-Through-Inheritance" class="headerlink" title="Reusing Implementations Through Inheritance"></a>Reusing Implementations Through Inheritance</h1><p>Create and use subclasses and superclasses<br>Create and extend abstract classes<br>Enable polymorphism by overriding methods<br>Utilize polymorphism to cast and call methods, differentiating object type versus reference type<br>Distinguish overloading, overriding, and hiding</p><h1 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h1><p>Categories of Exception:</p><p>java.lang.Object –&gt; java.lang.Throwable –&gt; java.lang.Exception –&gt; java.lang.RuntimeException<br>                                        |–&gt; java.lang.Error</p><p><em>Error</em> means something went so horribly wrong that your program should not attempt to<br>recover from it. E.G. a disk drive “disappeared”</p><p><em>runtime exception</em> is defined as the RuntimeException class and its subclasses. It tends<br>to be unexpected but not necessarily fatal. E.G. accessing an invalid array index is<br>unexpected. It is known as unchecked exceptions.</p><p><em>checked exception</em> includes Exception and all subclasses that do not extend RuntimeException.<br>Checked exceptions tend to be more anticipated, like trying to read a file that doesn’t exist.</p><p>– handle or declare rule: for checked exceptions, Java requires the code to either handle them<br>or declare them in the method signature.</p><h4 id="throw-和-throws-区别"><a href="#throw-和-throws-区别" class="headerlink" title="throw 和 throws 区别"></a>throw 和 throws 区别</h4><p>throws: 在方法定义中用，declares that the method might throw an Exception.<br>throw:  在方法体中抛出异常, tells Java that you want to throw an Exception and tells Java you want<br>        some other part of the code to deal with the exception.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myFunction</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Describe-the-advantages-of-Exception-handling"><a href="#Describe-the-advantages-of-Exception-handling" class="headerlink" title="Describe the advantages of Exception handling"></a>Describe the advantages of Exception handling</h2><h2 id="Differentiate-among-checked-exceptions-unchecked-exceptions-and-Errors"><a href="#Differentiate-among-checked-exceptions-unchecked-exceptions-and-Errors" class="headerlink" title="Differentiate among checked exceptions, unchecked exceptions, and Errors"></a>Differentiate among checked exceptions, unchecked exceptions, and Errors</h2><ol><li><p>runtime exception == unchecked exception, 可以handle，也可以不handle</p></li><li><p>checked exception 包括所有在Exception中但是不在RuntimeException里的Exception， checked exception 必须 handle 或则 declare</p></li></ol><h2 id="Create-a-try-catch-block-and-determine-how-exceptions-alter-normal-program-flow"><a href="#Create-a-try-catch-block-and-determine-how-exceptions-alter-normal-program-flow" class="headerlink" title="Create a try-catch block and determine how exceptions alter normal program flow"></a>Create a try-catch block and determine how exceptions alter normal program flow</h2><p>Java uses a <em>try</em> statement to separate the logic that might throw an exception from the logic<br>to handle that exception</p><p>考点：在 try 语句中有没有办法执行的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fall();</span><br><span class="line">        System.out.println(<span class="string">"never get here"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        getUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    seeAnimals();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Adding-a-finally-block"><a href="#Adding-a-finally-block" class="headerlink" title="Adding a finally block"></a>Adding a finally block</h3><p>The finally block always executes, whether or not an exception occurs in the try block.</p><p>There are two paths through code with both a catch and a finally.</p><ul><li>If an exception is thrown, the finally block is run after the catch block.</li><li>If no exception is thrown, the finally block is run after the try block completes.</li></ul><p>In OCA examp, a try statement must have catch and/or finally. In other words, catch is not<br>required if finally is present. Having both is fine, Having neither is a problem.</p><p><em>finally</em> is typically used to close resources such as files or databases, so in OCA exam<br>with finally are going to look contrived.</p><h2 id="Create-and-invoke-a-method-that-throws-an-exception"><a href="#Create-and-invoke-a-method-that-throws-an-exception" class="headerlink" title="Create and invoke a method that throws an exception"></a>Create and invoke a method that throws an exception</h2><p>考点： the vast majority of questions have a choice about not compiling and<br>      about throwing an exception.</p><pre><code>calls a method on a null/ an invalid arry index --&gt; code will throw an exception.</code></pre><h2 id="Recognize-common-exception-classes"><a href="#Recognize-common-exception-classes" class="headerlink" title="Recognize common exception classes"></a>Recognize common exception classes</h2><h3 id="Catching-various-types-of-exceptions"><a href="#Catching-various-types-of-exceptions" class="headerlink" title="Catching various types of exceptions"></a>Catching various types of exceptions</h3><p>Steps:</p><ol><li>you must be able to recognize if the exception is a checked or an unchecked exception.</li><li>you need to determine if any of the exceptions are subclasses of the others.</li></ol><p>A rule exists for the order of the catch blocks. Java looks at them in the order they appear.<br>If it is impossible for one of the catch blocks to be executed, <em>a compiler error</em> about unreachable<br>code occurs.</p><p>考点： E.G. This happens when a superclass is caught before a subclass.</p><h3 id="Throwing-a-Second-Exception"><a href="#Throwing-a-Second-Exception" class="headerlink" title="Throwing a Second Exception"></a>Throwing a Second Exception</h3><p>A catch or finally block can have any valid java code in it – including another try statement.</p><h3 id="Types-of-execptions"><a href="#Types-of-execptions" class="headerlink" title="Types of execptions"></a>Types of execptions</h3><table><thead><tr><th>Type</th><th>How to recognize</th><th>Okay for program to catch?</th><th>Is program required to handle or declare?</th></tr></thead><tbody><tr><td>Runtime exception</td><td>Subclass of RuntimeException</td><td>Yes</td><td>No</td></tr><tr><td>Checked exception</td><td>Subclass of Exception but not subclass of RuntimeExcpetion</td><td>Yes</td><td>Yes</td></tr><tr><td>Error</td><td>Subclass of Error</td><td>No</td><td>No</td></tr></tbody></table><p>runtime exception 可能是 programmer 或者是 JVM 抛出的。</p><p>一些常见的继承于RuntimeException的异常：</p><p>JVM</p><ul><li>ArithmeticException  1除0</li><li>ArrayIndexOutOfBoundsException</li><li>ClassCastException 什么时候不能编译</li><li>NullPointExeception    (unchecked exception)</li></ul><p>Programer</p><ul><li>IllegalArgumentExecption</li><li>NumberFormatException</li></ul><p>常见的chekced exception 有：</p><ul><li><p>FileNotFoundException (IOException 的子类)</p></li><li><p>IOException</p></li></ul><h3 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h3><ul><li>system.exit() 在 try/catch 中的话， finally block 不会 run<br>When System.exit is called in teh try or catch block finally does not run.</li></ul><ul><li>如果有一个catch 不会 run，则是 compiler error 会爆出来</li><li>Error：<br><em>ExceptionInInitializerError</em> : thrown by JVM when a static initializer throws an exception and doesn’t handle it</li></ul><p><em>StackOverflowError</em> : thrown by JVM when a method calls itself too many times, (infinite loop)</p><p><em>NoClassDefFoundError</em> : thrown by JVM when a class that the code uses is available at compile time but not runtime.</p><h1 id="Creating-a-Simple-Java-Program"><a href="#Creating-a-Simple-Java-Program" class="headerlink" title="Creating a Simple Java Program"></a>Creating a Simple Java Program</h1><p>Create an executable Java program with a main class<br>Compile and run a Java program from the command line<br>Create and import packages</p><h1 id="Using-Operators-and-Decision-Constructs-1"><a href="#Using-Operators-and-Decision-Constructs-1" class="headerlink" title="Using Operators and Decision Constructs"></a>Using Operators and Decision Constructs</h1><p>Use Java operators including the use of parenthesis to override operator precedence<br>Use Java control statements including if, if/else, switch<br>Create and use do/while, while, for and for each loops, including nested loops, use break and continue statements</p><h1 id="Describing-Objects-and-Classes"><a href="#Describing-Objects-and-Classes" class="headerlink" title="Describing Objects and Classes"></a>Describing Objects and Classes</h1><p>Declare and instantiate Java objects, and explain objects’ lifecycles (including creation, dereferencing by reassignment, and garbage collection)<br>Define the structure of a Java class<br>Read or write to object fields</p><h1 id="Applying-Encapsulation"><a href="#Applying-Encapsulation" class="headerlink" title="Applying Encapsulation"></a>Applying Encapsulation</h1><p>Apply access modifiers<br>Apply encapsulation principles to a class</p><h1 id="Programming-Abstractly-Through-Interfaces"><a href="#Programming-Abstractly-Through-Interfaces" class="headerlink" title="Programming Abstractly Through Interfaces"></a>Programming Abstractly Through Interfaces</h1><p>Create and implement interfaces<br>Distinguish class inheritance from interface inheritance including abstract classes<br>Declare and use List and ArrayList instances<br>Understanding lambda Expressions<br>Understanding Modules<br>Describe the Modular JDK<br>Declare modules and enable access between modules<br>Describe how a modular project is compiled and run</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Understanding-Java-Technology-and-environment&quot;&gt;&lt;a href=&quot;#Understanding-Java-Technology-and-environment&quot; class=&quot;headerlink&quot; title=&quot;Un
      
    
    </summary>
    
    
      <category term="Java" scheme="http://www.yuliang.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.yuliang.xyz/2019/03/25/network-security-101a/"/>
    <id>http://www.yuliang.xyz/2019/03/25/network-security-101a/</id>
    <published>2019-03-25T04:32:50.970Z</published>
    <updated>2019-03-25T04:32:50.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网通信安全"><a href="#互联网通信安全" class="headerlink" title="互联网通信安全"></a>互联网通信安全</h1><p>两大主题：身份认证和数据安全</p><ul><li>身份认证: 对方要能证明其身份 （数字签名和数字证书）</li><li>数据安全: 如何保证密码传输过程中不会被别人窃取 （加解密）</li></ul><h2 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h2><h3 id="SSL-TLS-OpenSSL-HTTPS"><a href="#SSL-TLS-OpenSSL-HTTPS" class="headerlink" title="SSL/TLS, OpenSSL, HTTPS"></a>SSL/TLS, OpenSSL, HTTPS</h3><ol><li>SSL/TLS<br>SSL是在客户端和服务器之间建立一条SSL安全通道的安全协议</li><li>OpenSSL<br>OpenSSL是TLS/SSL协议的开源实现，提供开发库和命令行程序</li><li><p>HTTPS<br>常说的HTTPS是HTTP的加密版，底层使用的加密协议是SSL</p><h3 id="PKI-CA-和-Certificate"><a href="#PKI-CA-和-Certificate" class="headerlink" title="PKI, CA 和 Certificate"></a>PKI, CA 和 Certificate</h3></li><li><p>PKI (Public Key Infrastructure)<br>PKI 就是 Public Key Infrastructure 的缩写，翻译过来就是公开密钥基础设施。它是利用公开密钥技术所构建的，解决网络安全问题的，<br>普遍适用的一种基础设  施;是一种遵循既定标准的密钥管理平台,它能够为所有网络应用提供加密和数字签名等密码服务及所必需的密钥和证书管理体系。</p><p>PKI既不是一个协议，也不是一个软件，它是一个标准，在这个标准之下发展出的为了实现安全基础服务目的的技术统称为PKI。可以说CA(认证中心)是<br>PKI的核心，而数字证书是PKI的最基本元素，还有如apache等服务器、浏览器等客户端、银行等应用，都是pki的组件。</p></li><li><p>CA<br>CA 机构，又称为证书认证中心 (Certificate Authority) 中心，是一个负责发放和管理数字证书的第三方权威机构，它负责管理PKI结构下的<br>所有用户(包括各种应用程序)的证书，把用户的公钥和用户的其他信息捆绑在一起，在网上验证用户的身份。CA机构的数字签名使得攻击者不能伪造和篡改证书。</p><p>认证中心主要有以下5个功能：</p><p>证书的颁发：接收、验证用户(包括下级认证中心和最终用户)的数字证书的申请。可以受理或拒绝<br>证书的更新：认证中心可以定期更新所有用户的证书，或者根据用户的请求来更新用户的证书<br>证书的查询：查询当前用户证书申请处理过程；查询用户证书的颁发信息，这类查询由目录服务器ldap来完成<br>证书的作废：由于用户私钥泄密等原因，需要向认证中心提出证书作废的请求；证书已经过了有效期，认证中心自动将该证书作废。</p><pre><code>认证中心通过维护证书作废列表 (Certificate Revocation List,CRL) 来完成上述功能。</code></pre><p>证书的归档：证书具有一定的有效期，证书过了有效期之后就将作废，但是我们不能将作废的证书简单地丢弃，因为有时我们可能需要</p><pre><code>验证以前的某个交易过程中产生的数字签名，这时我们就需要查询作废的证书。</code></pre></li><li><p>Certificate<br>3.1 X.509 标准<br>PKI的标准规定了PKI的设计、实施和运营，规定了PKI各种角色的”游戏规则”，提供数据语法和语义的共同约定。<br>x.509是PKI中最重要的标准，它定义了公钥证书的基本结构，可以说PKI是在X.509标准基础上发展起来的。</p><ul><li>SSL公钥证书</li><li>证书废除列表CRL(Certificate revocation lists 证书黑名单)</li></ul><p>另外一个常用的标准是PKCS#12，通常采用pfx,p12作为文件扩展名，openssl和java的keytool工具都可以用作<br>生产此类格式的证书。</p><p>3.2 SSL/TLS 公钥证书格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">Version: 3 (0x2)</span><br><span class="line">1. 证书版本号(Version)</span><br><span class="line">版本号指明X.509证书的格式版本，现在的值可以为:</span><br><span class="line">    1) 0: v1</span><br><span class="line">    2) 1: v2</span><br><span class="line">    3) 2: v3</span><br><span class="line">也为将来的版本进行了预定义</span><br><span class="line"></span><br><span class="line">Serial Number: 9 (0x9)</span><br><span class="line">2. 证书序列号(Serial Number)</span><br><span class="line">               序列号指定由CA分配给证书的唯一的&quot;数字型标识符&quot;。当证书被取消时，实际上是将此证书的序列号放入由CA签发的CRL中，</span><br><span class="line">               这也是序列号唯一的原因。</span><br><span class="line"></span><br><span class="line">        Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        3. 签名算法标识符(Signature Algorithm)</span><br><span class="line">签名算法标识用来指定由CA签发证书时所使用的&quot;签名算法&quot;。算法标识符用来指定CA签发证书时所使用的:</span><br><span class="line">    1) 公开密钥算法</span><br><span class="line">    2) hash算法</span><br><span class="line">example: sha256WithRSAEncryption</span><br><span class="line">须向国际知名标准组织(如ISO)注册</span><br><span class="line"></span><br><span class="line">Issuer: C=CN, ST=GuangDong, L=ShenZhen, O=COMPANY Technologies Co., Ltd, OU=IT_SECTION, CN=registry.example.com.net/emailAddress=zhouxiao@example.com.net</span><br><span class="line">4. 签发机构名(Issuer)</span><br><span class="line">此域用来标识签发证书的CA的X.500 DN(DN-Distinguished Name)名字。包括:</span><br><span class="line">    1) 国家(C)</span><br><span class="line">    2) 省市(ST)</span><br><span class="line">    3) 地区(L)</span><br><span class="line">    4) 组织机构(O)</span><br><span class="line">    5) 单位部门(OU)</span><br><span class="line">    6) 通用名(CN)</span><br><span class="line">    7) 邮箱地址</span><br><span class="line"></span><br><span class="line">Validity</span><br><span class="line">    Not Before: Feb 11 06:04:56 2015 GMT</span><br><span class="line">    Not After : Feb  8 06:04:56 2025 GMT</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">5. 有效期(Validity)</span><br><span class="line">指定证书的有效期，包括:</span><br><span class="line">    1) 证书开始生效的日期时间</span><br><span class="line">    2) 证书失效的日期和时间</span><br><span class="line">每次使用证书时，需要检查证书是否在有效期内。</span><br><span class="line"></span><br><span class="line">Subject: C=CN, ST=GuangDong, L=ShenZhen, O=TP-Link Co.,Ltd., OU=Network Management, CN=172.31.1.210</span><br><span class="line">6. 证书用户名(Subject)</span><br><span class="line">指定证书持有者的X.500唯一名字。包括:</span><br><span class="line">    1) 国家(C)</span><br><span class="line">    2) 省市(ST)</span><br><span class="line">    3) 地区(L)</span><br><span class="line">    4) 组织机构(O)</span><br><span class="line">    5) 单位部门(OU)</span><br><span class="line">    6) 通用名(CN)</span><br><span class="line">    7) 邮箱地址</span><br><span class="line"></span><br><span class="line">Subject Public Key Info:</span><br><span class="line">    Public Key Algorithm: rsaEncryption</span><br><span class="line">Public-Key: (2048 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:a4:b0:dd:eb:c1:cf:5d:47:61:a6:ea:ef:8b:aa:</span><br><span class="line">    4b:f0:b4:2c:d8:96:c7:7c:ac:fa:c7:35:88:53:d0:</span><br><span class="line">    ...</span><br><span class="line">    8a:76:dc:8f:8c:44:c8:0b:3c:36:88:5f:01:f0:44:</span><br><span class="line">    4e:81:e6:7a:2b:ff:ba:da:33:a5:27:11:c6:f0:08:</span><br><span class="line">    6e:f3</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">7. 证书持有者公开密钥信息(Subject Public Key Info)</span><br><span class="line">证书持有者公开密钥信息域包含两个重要信息:</span><br><span class="line">    1) 证书持有者的公开密钥的值</span><br><span class="line">    2) 公开密钥使用的算法标识符。此标识符包含公开密钥算法和hash算法。</span><br><span class="line">   </span><br><span class="line">X509v3 extensions:</span><br><span class="line">8. 扩展项(extension)</span><br><span class="line">X.509 V3证书是在v2的基础上一标准形式或普通形式增加了扩展项，以使证书能够附带额外信息。标准扩展是指</span><br><span class="line">由X.509 V3版本定义的对V2版本增加的具有广泛应用前景的扩展项，任何人都可以向一些权威机构，如ISO，来</span><br><span class="line">注册一些其他扩展，如果这些扩展项应用广泛，也许以后会成为标准扩展项。</span><br><span class="line"></span><br><span class="line">    X509v3 Basic Constraints: </span><br><span class="line">CA:FALSE</span><br><span class="line"></span><br><span class="line">    Netscape Comment: </span><br><span class="line">OpenSSL Generated Certificate</span><br><span class="line"></span><br><span class="line">10. 证书持有者唯一标识符(Subject Unique Identifier)</span><br><span class="line">持有证书者唯一标识符在第2版的标准中加入X.509证书定义。此域用在当同一个X.500名字用于多个证书持有者时，</span><br><span class="line">用一比特字符串来唯一标识证书持有者的X.500名字。可选。</span><br><span class="line">    X509v3 Subject Key Identifier: </span><br><span class="line">07:C6:87:B7:C1:1E:28:E8:96:3F:EB:40:1E:82:41:45:CA:81:B6:3D</span><br><span class="line"></span><br><span class="line">9. 签发者唯一标识符(Issuer Unique Identifier)</span><br><span class="line">签发者唯一标识符在第2版加入证书定义中。此域用在当同一个X.500名字用于多个认证机构时，用一比特字符串</span><br><span class="line">来唯一标识签发者的X.500名字。可选。</span><br><span class="line">    X509v3 Authority Key Identifier: </span><br><span class="line">keyid:A4:C2:14:6A:39:D1:95:1E:BD:DF:3B:92:4A:5C:12:42:1B:BC:53:B8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">    11. 签名算法(Signature Algorithm)</span><br><span class="line">           证书签发机构对证书上述内容的签名算法</span><br><span class="line">    </span><br><span class="line">    12. 签名值(Issuer&apos;s Signature)</span><br><span class="line">           证书签发机构对证书上述内容的签名值</span><br><span class="line"> 0c:c6:81:70:cd:0a:2d:94:4f:cb:a4:1d:ef:9e:8e:e4:73:ae:</span><br><span class="line"> 50:62:a8:9c:64:ef:56:0f:41:fe:6b:b4:d3:07:37:39:2c:ed:</span><br><span class="line"> ...</span><br><span class="line"> 6f:62:61:b8:03:d7:97:31:ab:05:44:20:07:65:8b:ad:e2:cc:</span><br><span class="line"> ad:65:73:f6:82:0f:9e:65:d0:ae:b7:1e:fd:9f:c1:d7:41:6c:</span><br><span class="line"> 0f:06:95:ee</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEMDCCAxigAwIBAgIBCTANBgkqhkiG9w0BAQsFADCBtTELMAkGA1UEBhMCQ04x</span><br><span class="line">EjAQBgNVBAgMCUd1YW5nRG9uZzERMA8GA1UEBwwIU2hlblpoZW4xJjAkBgNVBAoM</span><br><span class="line">...</span><br><span class="line">ujwwRar6pPzusO95WuS93HsNmL2ZFZ63DS4LcW9iYbgD15cxqwVEIAdli63izK1l</span><br><span class="line">c/aCD55l0K63Hv2fwddBbA8Gle4=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure></li></ol><p>用在HTTPS加密</p><p>HASH 算法：SHA1， SHA2， MD5， SHA256</p><h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><ol><li>对称加密(双向加密): 加密与解密使用同一密码，对明文使用密码加密后，对方可以通过同一密码进行反向解密.</li></ol><p>常见的加密算法有 DES(56bits)、3DES、AES(128bits)、Blowfish、Twofish、IDEA、RC6、CAST5、Serpent等等.<br>AES，RC4， 3DES</p><p>此种加密一般都是 将原文分割成固定大小的数据块，对这些块进行加密(ECB，CBC).<br>此种方式加密容易遭受 字典攻击，同时解密方需要得到加密密码，中间可能涉及密码传输泄露问题.</p><ol><li><p>非对称加密<br>非对称加密与对称加密相反，其加密解密可使用不同的密码，常见的如 RSA、EIGmal、DSA/DSS 等. 在非对称加密中，有一种比较特殊的加密叫做单向加密，<br>单向机密也称消息摘要算法，其主要目的是提取消息特征码，加密后的密文不可逆。常见的单向加密算法有 : MD5、SHA1、SHA512、CRC-32(循环冗余校验码)<br>等；单向加密有两个重要的特性 : 定长输出、雪崩效应；定长输出可以理解为 无论消息体多大，最终输出加密后结果长度一致，雪崩效应顾名思义，即消息体的<br>微小变化，会导致加密结果的巨大变化。</p></li><li><p>公钥加密<br>公钥加密时会有两个文件，即一个公钥一个私钥；并且公钥与私钥成对出现，其特性是 使用公钥加密的内容必须使用与其匹配的私钥解密，反之亦然。</p></li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>证明自己身份的文件<br>身份认证问题，即 “支付宝要能证明他是支付宝”；纵观以上3中加密算法，比较适合做身份认证的就是 公钥加密，即在互联网上从未通讯过的主机想向对方<br>证明自己的身份，只需先生成一对密钥，然后将公钥放在互联网上大家可任意获取，私钥自己保留；需要证明身份时只需用自己的私钥加密一段信息发给<br>对方，对方若能使用其公钥解密，就能证明其身份。</p></li><li><p>证明用来证明自己身份的文件是真实的<br>如何保证从互联网上获取的公钥就是对方的，而不是别人恶意放到互联网上的假冒公钥？<br>解决方案就是 大家找一个公认的知名机构，把公钥全部放到这个机构那，然后谁需要谁从那里下载，此时这个机构称之为 CA，CA 为每个使用者颁发一个<br>证书，证书中包含使用者的公钥和CA 的私钥签名，以及一些使用者信息；同时证书具有级联信任关系，即 我们信任了一家 CA 的根证书，那么由其颁发的<br>其他证书将都被信任，类似于一棵树的结构，一旦我们信任了根节点那么以下所有子节点将全部被信任。</p></li></ol><ol><li>数据传输过程中的加密问题<br>传输数据，那么数据内容肯定需要双向加密才可以被接收方解密读取，但是很大的问题是 双向加密时，解密方需要知道解密密码；而将密码在互联网上<br>传输明显是不明智的，此时出现了另一种解决方案，即 密钥交换算法（Diffie-Hellman 算法），专门用于在互联网上传输密钥信息。</li></ol><ol><li>数据完整性<br>对于完整性最好的应用就是采用单向加密即消息摘要算法，提取数据的特征码；简单地说就是每发送一段数据，就对发送的数据做一次数据特征提取，<br>然后将特征码一并发送，接收方接收到数据并解密后可对其使用同样的算法进行特征码提取比对，如果计算结果不一致则证明数据被篡改，直接丢弃即可。</li></ol><h3 id="内容：数字证书，HTTPS，SSL-TLS-协议"><a href="#内容：数字证书，HTTPS，SSL-TLS-协议" class="headerlink" title="内容：数字证书，HTTPS，SSL/TLS 协议"></a>内容：数字证书，HTTPS，SSL/TLS 协议</h3><ol><li>HTTPS为什么安全？HTTPS是如何保证安全的？<br>使用非对称加密来交换一个密钥来进行对称加密，这个过程称为SSL/TLS的四次握手。用对称加密算法来进行通信<br>master_secret = PRF(pre_master_secret, “master secret”, ClientHello.random + ServerHello.random)[0 .. 47]</li></ol><p><strong>随机数为什么是三个？</strong><br>这是由于SSL/TLS设计，就假设服务器不相信所有客户端都能够提供完全随机数，假如某个客户端提供的随机数不随机的话，就大大增加了“对话密钥”<br>被破解的风险，所以由三组随机数组成的最后的随机数，保证了随机数的随机性，以此来保证每次生成的“对话密钥”安全性</p><ol><li><p>如何保证非对称加密时的安全性？<br>服务器端发送证书来传递非对称加密的公钥，保证了公钥和私钥的保密性</p></li><li><p>客户端怎么知道服务器端证书是不是真的？/ 客户端具体是如何验证SSL证书的？<br>客户端根据CA证书的公钥校验证书的数字签名来保证其合法性。</p></li></ol><p>为了抵御中间人 man-in-the-middle 攻击，SSL证书需要由可信的SSL证书颁发机构颁发，形成一个证书链<br>（比如Gmail的证书链为：最底层为网域 mail.google.com，上一层为Thawte SGC CA证书颁发机构，<br>最顶层为很有名的VeriSign证书颁发机构）。</p><p>那么，浏览器除了需要验证域和有效期外，还要检查证书链中的上级证书公钥是否有效，上级的上级证书公钥是否有效，直至根证书公钥为止。这样就可以有效避免中间人攻击了.</p><p>根证书公钥都是预装在操作系统中的，黑客如果不是暴力破解，无法得到根证书的私钥。如果黑客自己生成一个私钥，浏览器验证根证书公钥的时候发现无法通过操作系统中预装的公钥加密数据后使用这个私钥进行解密，从而判定这个公钥是无效的。这个方案也是现在https通讯通常的方案。</p><p>现在所有的浏览器正在使用的https通讯方案就无懈可击了吗？答案仍是否定的。我们可以看到，在后一个方案中，https的安全性需要在证书颁发机构公信力的强有力保障前提下才能发挥作用。如果证书颁发机构在没有验证黑客为mail.google.com的持游者的情况下，给黑客颁发了网域为mail.google.com的证书，那么黑客的中间人攻击又可以顺利实施然而，不验证域名持有者就颁发证书的情况在国外几乎不会发生，但是在国内就不一定了。针对破解目标，国内证书颁发机构WoSign（在此只是举例国内比较有名的证书颁发机构WoSign，并不代表WoSign今后一定会这么做）很有可能为了上级要求颁发了证书给非域名持有者的黑客，从而使得破解目标的Gmail密码被黑客截取。</p><p>证书验证失败的原因<br>1、SSL证书不是由受信任的CA机构颁发的(注意这种情况并不一定说明有SSL劫持发生)<br>2、证书过期<br>3、访问的网站域名与证书绑定的域名不一致</p><ol><li>证书内容被篡改</li><li>客户端没有保存认证服务器端证书的根证书</li><li><p>客户端拥有认证服务器证书的根证书，但是服务器被防火墙隔离，防火墙在收到来自客户端的SSL连接请求时候返回<br>防火墙的证书，需要查看根证书内容 openssl x509 -text -in rootCA.pem, 查看到根证书签发者信息  Issuer: O=Equifax</p></li><li><p>客户端的CA证书不会被伪造或泄露么？<br>CA证书时默认预装到浏览器和操作系统中的，所以CA证书的公钥是安全的。</p></li></ol><p>为什么证书是安全的？<br>什么是证书<br>数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，数字证书不是数字身份证，而是身份认证机构盖在数字身份证上的一个章或印（或者说加在数字身份证上的一个签名）。它是由权威机构——CA机构，又称为证书授权（Certificate Authority）中心发行的，人们可以在网上用它来识别对方的身份。<br>数字证书的格式普遍采用的是X.509V3国际标准，一个标准的X.509数字证书包含以下一些内容：</p><p>证书的版本信息；<br>证书的序列号，每个证书都有一个唯一的证书序列号；<br>证书所使用的签名算法；<br>证书的发行机构名称，命名规则一般采用X.500格式；<br>证书的有效期，通用的证书一般采用UTC时间格式，它的计时范围为1950-2049；<br>证书所有人的名称，命名规则一般采用X.500格式；<br>证书所有人的公开密钥；<br>证书发行者对证书的签名。<br>证书里的公钥的作用？<br>证书里的签名的作用？<br>数字证书的签发机构CA，在接收到申请者的资料后进行核对并确定信息的真实有效，然后就会制作一份符合X.509标准的文件。证书中的证书内容包含的持有者信息和公钥等都是由申请者提供的，而数字签名则是CA机构对证书内容进行hash加密后得到的，而这个数字签名就是我们验证证书是否是有可信CA签发的数据。</p><p>CA.png</p><p>证书的产生</p><p>certification_production.png</p><p>证书的类型<br>实际上，我们使用的证书分很多种类型，SSL证书只是其中的一种。证书的格式是由X.509标准定义。SSL证书负责传输公钥，是一种PKI（Public Key Infrastructure，公钥基础结构）证书。<br>我们常见的证书根据用途不同大致有以下几种：<br>1、SSL证书，用于加密HTTP协议，也就是HTTPS。<br>2、代码签名证书，用于签名二进制文件，比如Windows内核驱动，Firefox插件，Java代码签名等等。<br>3、客户端证书，用于加密邮件。<br>4、双因素证书，网银专业版使用的USB Key里面用的就是这种类型的证书。<br>这些证书都是由受认证的证书颁发机构——我们称之为CA（Certificate Authority）机构来颁发，针对企业与个人的不同，可申请的证书的类型也不同，价格也不同。CA机构颁发的证书都是受信任的证书，对于SSL证书来说，如果访问的网站与证书绑定的网站一致就可以通过浏览器的验证而不会提示错误。</p><p>证书的安全问题<br>如果让证书安全，那么就需要让客户端拿到的证书是真正想要的证书，即不能让证书被冒充或者被篡改。<br>那么如何保证这一点呢？</p><p>如果证书自己有一个id<br>证书的这个id无法被伪造<br>客户端知道自己想要的证书id是多少<br>如果做到了这三点就能保证证书的安全性了。上面说提到的id就是证书的数字签名。那么什么是数字签名？</p><p>数字签名（digital signature）<br>数字签名是证书的防伪标签，是将待签名内容通过哈希和私钥加密处理后生成的。目前使用最广泛的 SHA-RSA 数字签名的制作和验证过程如下：</p><p>数字签名的签发。首先是使用哈希函数对待签名内容进行安全哈希，生成数字摘要，然后使用CA自己的私钥对数字摘要进行加密。<br>数字签名的校验。使用CA的公钥解密签名，然后使用相同的签名函数对待签名证书内容进行签名并和服务端数字签名里的签名内容进行比较，如果相同就认为校验成功。<br>签发：待签名内容 -&gt; 哈希 -&gt; 数字摘要 -&gt; CA私钥加密 -&gt; 数字签名<br>校验：</p><p>数字签名 -&gt; CA公钥解密 -&gt; 数字摘要1<br>待签名内容 -&gt; 哈希 -&gt; 数字摘要2<br>比较「数字摘要1」和「数字摘要2」是否相等</p><p>CerValiate.png</p><p>这里有几点需要说明：</p><p>数字签名签发和校验使用的密钥对是 CA 自己的公私密钥，跟证书申请者提交的公钥没有关系。<br>数字签名的签发过程跟公钥加密的过程刚好相反，即是用私钥加密，公钥解密。<br>现在大的 CA 都会有证书链，证书链的好处一是安全，保持根 CA 的私钥离线使用。第二个好处是方便部署和撤销，即如果证书出现问题，只需要撤销相应级别的证书，根证书依然安全。<br>根 CA 证书都是自签名，即用自己的公钥和私钥完成了签名的制作和验证。而证书链上的证书签名都是使用上一级证书的密钥对完成签名和验证的。<br>那么问题又来了。<br>CA的私钥和公钥是安全的吗？可以被冒充吗？</p><p>CA的安全性<br>从根CA开始到直接给客户发放证书的各层次CA，都有其自身的密钥对。CA中心的密钥对一般由硬件加密服务器在机器内直接产生，并存储于加密硬件内，或以一定的加密形式存放于密钥数据库内。加密备份于IC卡或其他存储介质中，并以高等级的物理安全措施保护起来。密钥的销毁要以安全的密钥冲写标准，彻底清除原有的密钥痕迹。需要强调的是，根CA密钥的安全性至关重要，它的泄露意味着整个公钥信任体系的崩溃，所以CA的密钥保护必须按照最高安全级 的保护方式来进行设置和管理。</p><p>CA的私钥是自己靠上述方法保管的，不对外公开。<br>CA的公钥是厂商跟浏览器和操作系统合作，把公钥默认装到浏览器或者操作系统环境里。比如firefox 就自己维护了一个可信任的 CA 列表，而chrome 和 IE 使用的是操作系统的 CA 列表。</p><ol><li>分析HTTPS连接建立全过程</li><li><p>理解HTTPS</p><ol><li>什么是https<br>浏览器和网站之间的通信，浏览器要验证颁发证书的机构是否合法，证书中包含的网站地址是否和正在访问的地址一致等，如果<br>证书受信任，浏览器里面会显示一个小锁头， 否则会给出证书不守信的提示。</li><li>什么是SSL/TLS</li><li><p>为什么要有https</p><ol><li>http 和 https 协议的区别</li></ol><p>Https协议需要用到CA申请证书，<br>Http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议<br>http和https用的接口不一样，http是80， https 是443<br>http的链接是无状态的，<br>https是由ssl + http协议构成的可以进行加密传输，身份认证的网络协议，比 http协议要安全</p></li></ol></li></ol><p>不加密的通行带来了三大风险：</p><ol><li>窃听风险 eavesdropping ： 第三方可以获知通信内容</li><li>篡改风险 tampering： 第三方可以修改通信内容</li><li><p>冒充风险 pertending： 第三方可以冒充他人身份参与通信</p><ol><li>https保证安全的原理</li></ol></li></ol><p>SSL/TLS协议就是为了解决这三大风险而设计的，希望达到：</p><ol><li>所有信息都机密传播，第三方无法窃听</li><li>具有校验机制，一旦被篡改，通信双方会立刻发现</li><li><p>配备身份证书，防止身份被冒充</p><ol><li>为什么证书是安全的？<br> 5.1. 什么是证书<br> 5.2. 证书的产生<br> 5.3. 证书的类型<br> 5.4. 证书的安全问题<br> 5.4.1. 数字签名（digital signature）<br> 5.4.2. CA的安全性<br> 5.5. 证书验证失败的原因</li><li>客户端具体是如何验证SSL证书的</li><li>涉及到的算法</li><li>总结</li><li>Reference</li></ol></li></ol><ol><li>SSL/TLS 原理详解</li></ol><p>SSL/TLS</p><ol><li>The first few milliseconds of an HTTPS connection</li></ol><h2 id="什么是OpenSSL"><a href="#什么是OpenSSL" class="headerlink" title="什么是OpenSSL"></a>什么是OpenSSL</h2><p>  OpenSSL是一个安全套接字层密码库，其包括常用的密码算法、常用的密钥生成和证书封装管理功能及SSL协议，并提供了丰富的应用程序以供测试。</p><p>  OpenSSL 是一个开源项目，其组成主要包括一下三个组件：<br>    openssl：多用途的命令行工具。<br>      openssl命令工具有两种运行模式：交换模式和批处理模式。<br>      直接输入openssl回车即可进入交互模式，<br>      而输入带命令选项的openssl命令则进行批处理模式。<br>    libcrypto：加密算法库<br>    libssl：加密模块应用库，实现了ssl及tls<br>    openssl可以实现：秘钥证书管理、对称加密和非对称加密</p><p>  术语<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.key：  私有的密钥</span><br><span class="line">*.csr：   证书签名请求（证书请求文件），含有公钥信息，certificate signing request的缩写</span><br><span class="line">*.crt：   证书文件，certificate的缩写</span><br><span class="line">*.crl：   证书吊销列表，Certificate Revocation List的缩写</span><br><span class="line">*.pem：用于导出，导入证书时候的证书的格式，有证书开头，结尾的格式</span><br></pre></td></tr></table></figure></p><p>  公钥私钥的核心功能<br>    加密: 公钥用于对数据进行加密，私钥用于对数据进行解密<br>    签名: 私钥用于对数据进行签名，公钥用于对签名进行验证</p><h2 id="Openssl-操作指南"><a href="#Openssl-操作指南" class="headerlink" title="Openssl 操作指南"></a>Openssl 操作指南</h2><h4 id="直接加解密"><a href="#直接加解密" class="headerlink" title="直接加解密"></a>直接加解密</h4><p>  OpenSSL 使用子命令 enc 实现加密，命令格式如下</p><p>  openssl enc -算法 -salt -a -salt -in 输入文件 -out 输出文件 -k passwd<br>  如下为加密一个文件示例</p><p>  openssl enc -aes-256-ecb  -a -salt -in /etc/profile -out ~/test -k test123<br>  -a 选项用于将加密后内容以 base64 格式输出，加密后内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1/tVWQ7cGR5rTLU9Phnx7csis12ukuGpZTWx7sDiJ8Qdb4Jn8hvShnW</span><br><span class="line">7gPouyOwJlKufoDHXT2hqOnw/i8Rf5QisLc+EOXgUWDFun3AqHte6YmNbelDFchu</span><br><span class="line">hDsph4Vq7TNBmZ/C1LHSCnMoA39qHBWxyrIstpOWs5TWkdPjDgEVZkIXNiWIwoRF</span><br><span class="line">CDVv7AuZXO9qF3sMb4fLWPF9cM7FkbvGkkhzBJZ0dAdq8DetKaZyjOX4UfeWPSav</span><br><span class="line">U61t9s7hlmjEPmXpUSSfnO8/7u0B/EEnujpkwyNZXbQBcQ9QFDh7x1vdzQIAuMRw</span><br><span class="line">0SLsVm1OSOifvMOpOAJCmvhExrKsznWgQlQabLOWsr29yrs0YBuwSl6oUSf8Qx1S</span><br><span class="line">3z/GC7l13zzmHwXJTgPRe0WzdLYsy6GMj2/0DveLvcXT/cXGid69tzIf4JaczIEX</span><br><span class="line">zSS4N12C3CFS/60poXZmiwoNsC3n6ESBf3dZum6LKA9sNPdxveb/RTZ4KYl/iw9S</span><br><span class="line">NgAqNGa9Yp1xdyl2NBaruvDxVAGbwC+rGn9UjbIYbEdT7ZjKPjJ6BP8yzwv6jnOU</span><br><span class="line">3E58UVIuIEVWJY3kF77+Vk99JuQepFRGX9sHYdafQR7AISiS88eipn6qkMMDmrkT</span><br><span class="line">kwZtebWyhvmWTZABOa7tckzzYxJ/Ke1jkBudasUJr9RUEiNNmSASdRr0dlZvM/tS</span><br><span class="line">COuPeNo8ZU7ad/yd/OpvPKShn9Hh9oXCKSB4vl/DQVefVXWAaTp49FFAGFrQThiQ</span><br><span class="line">rAwHwrJ/N2ab0Do0iArctNTqz5u7MtEHwVtFsV45YJfAGQRwTg06Y6qKjhgWmBjX</span><br><span class="line">EGNGbP7c0A1SiI/g8maKl3ciTwWPWXCcpf14MFcYBvjpA7EVYSYTh7hSxzUtY0gk</span><br><span class="line">l3EUVrqnY0M8u+0LBgAcrA==</span><br></pre></td></tr></table></figure></p><p>  4.2.2、解密操作<br>  解密操作与加密基本相同，只不过需要加上 -d 选项，代表解密，命令格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl enc -算法 -salt -d -a -in 输入文件 -out 输出文件 -k passwd</span><br></pre></td></tr></table></figure></p><p>  如下为解密一个文件的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl enc -aes-256-ecb -salt -d -a -in test -out test1 -k test123</span><br></pre></td></tr></table></figure></p><p>  解密后文件即为原来的 /etc/profile 文件内容</p><h3 id="OpenSSL-CA-配置文件与格式"><a href="#OpenSSL-CA-配置文件与格式" class="headerlink" title="OpenSSL CA 配置文件与格式"></a>OpenSSL CA 配置文件与格式</h3><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><p>  生成密钥对<br>  生成私钥: openssl genrsa -out private.key 2048</p><p>  genrsa       产生RSA密钥命令。<br>  -out         输出路径,这里指private/server.key.pem。<br>  2048         指RSA密钥长度位数，默认长度为512位。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">lyu@ovm_h2o-lyu:~/Desktop$ openssl genrsa -out server.key 2048</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.......................+++</span><br><span class="line">...........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line"></span><br><span class="line">lyu@ovm_h2o-lyu:~/Desktop$ cat server.key </span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpQIBAAKCAQEA6vT9Z//kaSEEC5X3ngZUmzcXIMfBdGN1AOM8UANANDiD3kPm</span><br><span class="line">Pdc4oVogxEs1n3zDWr1ltdxoFnqLws9DYaqsbuuej+ZO3ZEFrhq7ElzdQGuvkSNa</span><br><span class="line">vqUOZvMlDFixdrn6hep5na2KtEP+q2aPTsA2/aRvXYhNeKhfjLhChWIbXknTj7UJ</span><br><span class="line">XVXDX0bWDJlm9/eNScCJWuJ6Krfe+nmfdcfAKlOK+OU+rXjCoETv6rYgyLuLxHJP</span><br><span class="line">qj8g6c6wv1f7s9g9J83HegjvqICRf25abfrAh+9pnAQ9+/CKHvu3BtHz0Xv7lMsh</span><br><span class="line">AlnRegBlDeGcrv/OZ9+qPsrnewjhTNJn9bxFeQIDAQABAoIBAEdt+6wma3ZahzRO</span><br><span class="line">f10XZ5lYgjuA/xs3MVb3vlpE4rv9gnmMAu9CAwFquRN0GfVGpM1tTwKe4zYSQ3MS</span><br><span class="line">N9X1YT7HewkcZ1WMxUFM9xp6CPmQw2tIaEoVO++oc9bxD+KcX8Feq2J4Y/axxTau</span><br><span class="line">k1rJrO4nk4PH8GWCKqpJSk/qp49eJUgWueOmV4FfRcjLCsKffUM/8jCeWu+iWwKV</span><br><span class="line">lJh/jhShSOpk9x2k8ObYRk+U8yBWi6K+roPFdKrwE/wragOtX+ULB+44jk1xV6sc</span><br><span class="line">9snkOKkdmRrBloG+F2REfyf8PNypndxyeveyT3ywlsQkcCK52vYIpLamw/tBoK3S</span><br><span class="line">AARqZgECgYEA9ZzSXa4a8wvwssGVKaQJaQqt3DN3UGElfKfNAmVceumeFysu15Y0</span><br><span class="line">k/OwR4AS03y9Nxta722ganaDztpVYPUg1t+c6B0eUPcW8NZQk9U+aPgtNz/pbkNt</span><br><span class="line">pdmkBYO4vAnvQL7wL3YYMw9OlOGs3TknLUvrePefEopBA+csJUlTIXECgYEA9OTN</span><br><span class="line">krosiWdYTqt5lK2wXavPVH1lXH0uilkKKdxNYHBB8n9CVSv6WJBmpOxrqE0ncoEt</span><br><span class="line">xKG3BFxPKXwr5fKvVgKQZ2PmZhTDqGpawe8yASYcugnwwPqZFHMIzxwPB94Ulin8</span><br><span class="line">JwW9B4hzlJib5QqB2jX3CQtnuZKARaJC8OyFYIkCgYEA3fbymlzM2BdTWIjf37jy</span><br><span class="line">FC7lfpo4Wrjgou4WtPKbiCz2hSOueoCxVYAmMAfLe7tAWLvtC3H8RhqC9f6UqEH/</span><br><span class="line">gpClgZNHIY6b+d0FBwTxGPYoDsVAlTh0sCynMaCf47fqs42bDJliN0q/DoeArJCJ</span><br><span class="line">GkOBM1o9NQkixn81gyDn8tECgYEAy7BbREVRsd+hVZ3OfFmTLfYvdojt++WrBitV</span><br><span class="line">BshUG3iDgZ1ToN/5VByXI2n5iXzS6KyFUt1nClt1BH5hTNtz9sgfL7+p7RIsQzJi</span><br><span class="line">1peLMeVvU1XdR8Wn+ZhMpWcjIVoYKWY2coaVWWSnLdtZH0KECumD1aQE3Bb8Ve7G</span><br><span class="line">Wvl/XnECgYEAvGwAMZUP3KZjIZ6EsdZU2JEuA9nLymeUEAB5oDlntHu3hFqv6jja</span><br><span class="line">BB7SIP8DKOwQJiqNlq7MC1iAUkDdSKk0tOod4IBj8fBDOBNrdMM/4nLnWUSfZLG1</span><br><span class="line">tTtIXXrXhU0KxDh1h01LXgOBRkfSBOM/evuCaOruWZi9iexGHJbik/s=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>  导出私钥对应的公钥: openssl rsa -in private.key -pubout -out public.key<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lyu@ovm_h2o-lyu:~/Desktop$ openssl rsa -pubout -in server.key </span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6vT9Z//kaSEEC5X3ngZU</span><br><span class="line">mzcXIMfBdGN1AOM8UANANDiD3kPmPdc4oVogxEs1n3zDWr1ltdxoFnqLws9DYaqs</span><br><span class="line">buuej+ZO3ZEFrhq7ElzdQGuvkSNavqUOZvMlDFixdrn6hep5na2KtEP+q2aPTsA2</span><br><span class="line">/aRvXYhNeKhfjLhChWIbXknTj7UJXVXDX0bWDJlm9/eNScCJWuJ6Krfe+nmfdcfA</span><br><span class="line">KlOK+OU+rXjCoETv6rYgyLuLxHJPqj8g6c6wv1f7s9g9J83HegjvqICRf25abfrA</span><br><span class="line">h+9pnAQ9+/CKHvu3BtHz0Xv7lMshAlnRegBlDeGcrv/OZ9+qPsrnewjhTNJn9bxF</span><br><span class="line">eQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><h3 id="数字证书的基础知识"><a href="#数字证书的基础知识" class="headerlink" title="数字证书的基础知识"></a>数字证书的基础知识</h3><p>问题两个：</p><ol><li>证书的安全性，Client端是如何验证证书合法性的，这个证书第三方无论如何都伪造不了吗？</li><li><p>对称加密密钥的安全性，生成的master secret密钥第三方为什么拿不到？</p><h2 id="Certificate-Authority-CA"><a href="#Certificate-Authority-CA" class="headerlink" title="Certificate Authority (CA)"></a>Certificate Authority (CA)</h2><p>CA是专门签发证书的权威机构，处于证书的最顶端。自签是用自己的私钥给证书签名，CA签发则是用CA的私钥给自己的证书签名来保证证书的可靠性</p><p>CA根证书的生成步骤：<br> 生成CA私钥（.key）–&gt;生成CA证书请求（.csr）–&gt;自签名得到根证书（.crt）（CA给自已颁发的证书）。</p><p>生成私钥:   openssl genrsa -out ca.key 2048<br>生成证书请求: openssl req -new -key ca.key -out ca.csr<br>自签名:  openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt</p><p>以上操作合并操作如下：<br>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ca.key -out ca.crt</p></li></ol><p>重要参数含义如下：<br>  req<br> -x509<br> -nodes 本option被set的话,生成的私有密钥文件将不会被加密<br> -days 365</p><p>   查看自签名CA证书：openssl x509 -text -in ca.cert</p><h3 id="生成自签证书"><a href="#生成自签证书" class="headerlink" title="生成自签证书"></a>生成自签证书</h3><p>   e.g.<br>   lyu@test:~/root-ca$ openssl req -nodes -config conf/openssl-root.cnf -days 1826<br>   -x509 -newkey rsa:1024 -out public/ca-root-cert.pem -outform PEM<br>   -keyout private/ca-root-key.pem</p><pre><code>Generating a 1024 bit RSA private key................++++++...............................++++++writing new private key to &apos;private/ca-root-key.pem&apos;</code></pre><h2 id="颁发证书-（-其他用户用OpenSSL-申请证书）"><a href="#颁发证书-（-其他用户用OpenSSL-申请证书）" class="headerlink" title="颁发证书 （ 其他用户用OpenSSL 申请证书）"></a>颁发证书 （ 其他用户用OpenSSL 申请证书）</h2><p>颁发证书就是用CA的秘钥给其他人签名证书，输入需要证书请求，CA的私钥及CA的证书，输出的是签名好的还给用户的证书.<br>用户的证书请求信息填写的国家省份等需要与CA配置一致，否则颁发的证书将会无效。</p><p>用户证书的生成步骤<br>生成私钥（.key）–&gt;生成证书请求（.csr）–&gt;CA的私钥及CA的证书签名得到用户证书（.crt）</p><p>e.g.</p><p>同样，先生成一对密钥</p><h1 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h1><p>mkdir mycrt</p><h1 id="生成公钥-扩展名随便取"><a href="#生成公钥-扩展名随便取" class="headerlink" title="生成公钥 扩展名随便取"></a>生成公钥 扩展名随便取</h1><p>openssl genrsa -out mritd.key 2048</p><h1 id="提取公钥"><a href="#提取公钥" class="headerlink" title="提取公钥"></a>提取公钥</h1><p>openssl rsa -in mritd.key -pubout &gt; mritd.public.key<br>接下来要申请一个证书签署请求，信息要保证与 CA 创建时一致(具体可调整 openssl.cnf 配置文件)，密码直接回车默认为空密码<br>openssl req -new -key mritd.key -out mritd.csr<br>最后使用 CA 进行签署即可(注意，要回到 demoCA 上一级目录)，提示是否确认全部 y 即可<br>openssl ca -in mycrt/mritd.csr -out mycrt/mritd.crt -days 3655<br>最终生成的 mritd.crt 即为可用的证书</p><p>生成密钥： openssl genrsa -out client.key 2048<br>生成请求: openssl req -new -subj -key client.key -out client.csr<br>签发证书:<br>openssl x509 -req -days 3650 -sha1 -extensions v3_req<br>-CA ca.cert -CAkey ca.key -CAserial ca.srl -CAcreateserial<br>-in client.csr -out client.cert</p><p>req          产生证书签发申请命令<br>-new         表示新请求。<br>-key         密钥,这里为client.key文件<br>-out         输出路径,这里为client.csr文件<br>-subj        指定用户信息</p><p>x509           签发X.509格式证书命令。<br>-req            表示证书输入请求。<br>-days          表示有效天数,这里为3650天。<br>-sha1           表示证书摘要算法,这里为SHA1算法。<br>-extensions    表示按OpenSSL配置文件v3_req项添加扩展<br>-CA            表示CA证书,这里为ca.cert<br>-CAkey         表示CA证书密钥,这里为ca.key<br>-CAserial      表示CA证书序列号文件,这里为ca.srl<br>-CAcreateserial表示创建CA证书序列号<br>-in            表示输入文件,这里为private/server.csr<br>-out           表示输出文件,这里为certs/server.cer</p><p>验证CA颁发的证书提取的公钥和私钥导出的公钥是否一致 openssl x509 -in server.cert -pubkey<br>验证server证书openssl verify -CAfile ca.cert server.cert<br>生成pem格式证书有时需要用到pem格式的证书，可以用以下方式合并证书文件（crt）和私钥文件（key）来生成 cat client.crt client.key &gt; client.pem</p><h4 id="session的恢复"><a href="#session的恢复" class="headerlink" title="session的恢复"></a>session的恢复</h4><p>session ID:<br>每次对话都有一个编号 session ID， 如果对话中断，下次重新连接的时候，只要客户端给出这个编号，而且服务器有这个编号的记录（现在都用集群集中管理session），<br>双方就可以重新使用已有的“对话密钥”， 而不必重新生成一把。双方就不再进行握手阶段剩余的步骤。 </p><p>优点是所有浏览器都支持，但是缺点在于session ID 往往只保留在一台服务器上。所以，如果客户端请求发送到另外一台服务器，就无法恢复对话。</p><p>session ticket：就是解决session id 不足的问题，<br>客户端不在发送session ID，而是发送一个服务器在上一次对话中发送过来的session ticket。 这个session ticket是加密的，只有服务器才能解谜，<br>其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket 后，解谜后就不必重新生成对话密钥了。</p><ol><li>附：数据加密的基础知识<br>对称密钥加密<br>对称密钥加密（一个密钥），也叫做共享密钥加密或机密密钥加密，使用发件人和收件人共同拥有的单个密钥。这种密钥既用于加密，也用于解密，叫做机密密钥。对称密钥加密是加密大量数据的一种行之有效的方法。</li></ol><p>对称密钥加密有许多种算法如DES,RC4,IDEA等，但所有这些算法都有一个共同的目的：以可还原的方式将明文 （未加密的数据转换为暗文。暗文使用加密密钥编码，对于没有解密密钥的任何人来说它都是没有意义的。由于对称密钥加密在加密和解密时使用相同的密钥，所以这种加密过程的安全性取决于是否有未经授权的人获得了对称密钥。</p><p>衡量对称算法优劣的主要尺度是其密钥的长度。密钥越长，在找到解密数据所需的正确密钥之前必须测试的密钥数量就越多。需要测试的密钥越多，破解这种算法就越困难。</p><p>公钥加密<br>公钥加密使用两个密钥:一个公钥和一个私钥，这两个密钥在数学上是相关的。为了与对称密钥加密相对照，公钥加密有时也叫做不对称密钥加密。在公钥加密中，公钥可在通信双方之间公开传递，或在公用储备库中发布，但相关的私钥是保密的。只有使用私钥才能解密用公钥加密的数据。使用私钥加密的数据只能用公钥解密。下图中，发件人拥有收件人的公钥，并用它加密了一封邮件，但只有收件人掌握解密该邮件的有关私钥。<br>openssl-encrpt01</p><p>公钥算法的主要局限在于，这种加密形式的速度相对较低。实际上，通常仅在关键时刻才使用公钥算法，如在实体之间交换对称密钥时，或者在签署一封邮件的散列时（散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法）。将公钥加密与其它加密形式（如对称密钥加密）结合使用，可以优化性能，如数字签名和密钥交换。</p><p>常用公钥算法：</p><p>RSA：适用于数字签名和密钥交换。 是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据，RSA算法以它的三位发明者的名字命名。<br>DSA：仅适用于数字签名。 数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，已作为数字签名的标准。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密。<br>Diffie-Hellman：仅适用于密钥交换。 Diffie-Hellman 是发明的第一个公钥算法，以其发明者 Whitfield Diffie 和 Martin Hellman 的名字命名。Diffie-Hellman 算法的安全性取决于在一个有限字段中计算离散算法的困难。<br>单向散列算法<br>散列，也称为散列值或消息摘要 ，是一种与基于密钥（对称密钥或公钥）的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。</p><p>下面是几个常用的散列函数：</p><p>MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个128位的数值。<br>SHA-1：与 DSA 公钥算法相似，安全散列算法1（SHA-1）也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。<br>MAC（Message Authentication Code）：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC（用于消息认证的密钥散列算法）。<br>CRC（Cyclic Redundancy Check）：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段（CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类）。<br>数字签名：结合使用公钥与散列算法<br>数字签名是邮件、文件或其它数字编码信息的发件人将他们的身份与信息绑定在一起（即为信息提供签名）的方法。对信息进行数字签名的过程，需要将信息与由发件人掌握的秘密信息一起转换（使用私钥）为叫做签名的标记。数字签名用于公钥环境（任何人都可以拥有）中，它通过验证发件人确实是他或她所声明的那个人，并确认收到的邮件与发送的邮件完全相同。</p><p>散列算法处理数据的速度比公钥算法快得多。散列数据还缩短了要签名的数据的长度，因而加快了签名过程。</p><p>密钥交换：结合使用对称密钥与公钥<br>对称密钥算法非常适合于快速并安全地加密数据。但其缺点是，发件人和收件人必须在交换数据之前先交换机密密钥。结合使用加密数据的对称密钥算法与交换机密密钥的公钥算法可产生一种既快速又灵活的解决方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网通信安全&quot;&gt;&lt;a href=&quot;#互联网通信安全&quot; class=&quot;headerlink&quot; title=&quot;互联网通信安全&quot;&gt;&lt;/a&gt;互联网通信安全&lt;/h1&gt;&lt;p&gt;两大主题：身份认证和数据安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身份认证: 对方要能证明其身份 （数字签名和
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>learning-russian</title>
    <link href="http://www.yuliang.xyz/2019/03/08/learning-russian/"/>
    <id>http://www.yuliang.xyz/2019/03/08/learning-russian/</id>
    <published>2019-03-09T01:26:43.000Z</published>
    <updated>2019-03-09T01:26:43.523Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Microsoft Azure AZ-900 Fundamentals Exam</title>
    <link href="http://www.yuliang.xyz/2019/03/05/microsoft-az900/"/>
    <id>http://www.yuliang.xyz/2019/03/05/microsoft-az900/</id>
    <published>2019-03-05T23:48:27.000Z</published>
    <updated>2019-03-07T01:04:15.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Microsoft-Azure-AZ-900-Fundamentals-Exam"><a href="#Microsoft-Azure-AZ-900-Fundamentals-Exam" class="headerlink" title="Microsoft Azure AZ-900 Fundamentals Exam"></a>Microsoft Azure AZ-900 Fundamentals Exam</h1><p>Reference: <a href="https://docs.microsoft.com/en-us/learn/modules/principles-cloud-computing" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/learn/modules/principles-cloud-computing</a></p><h2 id="Part-I-Understand-cloud-concepts"><a href="#Part-I-Understand-cloud-concepts" class="headerlink" title="Part I: Understand cloud concepts"></a>Part I: Understand cloud concepts</h2><h3 id="Describe-the-benefits-and-considerations-of-using-cloud-services"><a href="#Describe-the-benefits-and-considerations-of-using-cloud-services" class="headerlink" title="Describe the benefits and considerations of using cloud services"></a>Describe the benefits and considerations of using cloud services</h3><pre><code>1. understand terms such as High Availability, Scalability, Elasticity, Agility, Fault Tolerance, and Disaster Recovery2. understand the principles of economies of scale3. understand the differences between Capital Expenditure (CapEx) and Operational Expenditure (OpEx)</code></pre><p>   <strong>Capital Expenditure (CapEx)</strong>: CapEx is the spending of money on physical infrastructure up front, and then deducting that expense from your tax bill over time. CapEx is an upfront cost, which has a value that reduces over time.</p><ol><li>Server costs</li><li>Storage costs</li><li>Network costs</li><li>Backup and archive costs</li><li>Organization continuity and disaster recovery costs</li><li>Datacenter infrastructure costs</li><li><p>Technical personnel</p><p><strong>Benefits of CapEx</strong>: With capital expenditures, you plan your expenses at the start of a project or budget period. Your costs are fixed, meaning you know exactly how much is being spent. This is appealing when you need to predict the expenses before a project starts due to a limited budget.</p><p><strong>Operational Expenditure (OpEx)</strong>: OpEx is spending money on services or products now and being billed for them now. You can deduct this expense from your tax bill in the same year. There’s no upfront cost. You pay for a service or product as you use it.</p></li><li>Leasing a cloud-based server</li><li>Leasing software and customized features</li><li>Scaling charges based on usage/demand instead of fixed hardware or capacity</li><li><p>Billing at the user or organization level</p><p><strong>Benefits of OpEx</strong>: Demand and growth can be unpredictable and can outpace expectation, which is a challenge for the CapEx model as shown in the following graph.</p><ol><li>understand the consumption-based model</li></ol><h3 id="Describe-the-differences-between-Infrastructure-as-a-Service-IaaS-Platform-as-a-Service-PaaS-and-Software-as-a-Service-SaaS"><a href="#Describe-the-differences-between-Infrastructure-as-a-Service-IaaS-Platform-as-a-Service-PaaS-and-Software-as-a-Service-SaaS" class="headerlink" title="Describe the differences between Infrastructure-as-a-Service (IaaS), Platform-as-a-Service (PaaS) and Software-as-a-Service (SaaS)"></a>Describe the differences between Infrastructure-as-a-Service (IaaS), Platform-as-a-Service (PaaS) and Software-as-a-Service (SaaS)</h3><ol><li>describe Infrastructure-as-a-Service (IaaS) e.g. Virtual Machines</li><li>describe Platform-as-a-Service (PaaS) e.g. App and DB services</li><li>describe Software-as-a-Service (SaaS)</li><li>compare and contrast the three different service types</li></ol><p>|     Traditional    |       IaaS      |       PaaS      |       SaaS      |<br>|——————–|—————–|—————–|—————–|<br>| <strong>Application</strong>    | <strong>Application</strong> | <strong>Application</strong> |  Application    |<br>| <strong>Data</strong>           | <strong>Data</strong>        | <strong>Data</strong>        |  Data           |<br>| <strong>Runtime</strong>        | <strong>Runtime</strong>     |  Runtime        |  Runtime        |<br>| <strong>Middleware</strong>     | <strong>Middleware</strong>  |  Middleware     |  Middleware     |<br>| <strong>O/S</strong>            | <strong>O/S</strong>         |  O/S            |  O/S            |<br>| <strong>Virtualization</strong> |  Virtualization |  Virtualization |  Virtualization |<br>| <strong>Servers</strong>        |  Servers        |  Servers        |  Servers        |<br>| <strong>Storage</strong>        |  Storage        |  Storage        |  Storage        |<br>| <strong>Networking</strong>     |  Networking     |  Networking     |  Networking     |</p><p>legend: In bold font, what DevOps need to take care, in normal font, managed by vendor (Microsoft Azure)</p><h3 id="Describe-the-differences-between-Public-Private-and-Hybrid-cloud-models"><a href="#Describe-the-differences-between-Public-Private-and-Hybrid-cloud-models" class="headerlink" title="Describe the differences between Public, Private and Hybrid cloud models"></a>Describe the differences between Public, Private and Hybrid cloud models</h3><p>A cloud deployment model defines where your data is stored and how your customers interact with it – how do they get to it,<br>and where do the applications run? It also depends on how much of your own infrastructure you want or need to manage. Three<br>versions: Public, Private versus Hybrid</p><ol><li>describe Public cloud</li></ol><ul><li>Advantages<br>High scalability/agility – you don’t have to buy a new server in order to scale<br>Pay-as-you-go pricing – you pay only for what you use, no CapEx costs<br>You’re not responsible for maintenance or updates of the hardware<br>Minimal technical knowledge to set up and use - you can leverage the skills and expertise of the cloud provider to ensure workloads are secure, safe, and highly available</li></ul></li></ol><ul><li>Disadvantages<br>Not all scenarios fit the public cloud. Here are some disadvantages to think about:</li></ul><p>There may be specific security requirements that cannot be met by using public cloud<br>There may be government policies, industry standards, or legal requirements which public clouds cannot meet<br>You don’t own the hardware or services and cannot manage them as you may want to<br>Unique business requirements, such as having to maintain a legacy application might be hard to meet</p><pre><code>2. describe Private cloud</code></pre><p>In a private cloud, you create a cloud environment in your own datacenter and provide self-service access to compute resources to users in your organization.</p><ul><li>Advantages<br>This approach has several advantages:</li></ul><p>You have complete control over the resources and can ensure the configuration can support any scenario or legacy application<br>You have complete control (and responsibility) over security<br>Private clouds can meet strict security, compliance, or legal requirements in ways a public cloud might not be able to</p><ul><li>Disadvantages<br>Some reasons teams move away from the private cloud are:</li></ul><p>You have upfront CapEx costs and must purchase the hardware for startup and maintenance<br>Owning the equipment limits the agility - to scale you must buy, install, and setup new hardware<br>Private clouds require IT skills and expertise that’s hard to come by    </p><pre><code>3. describe Hybrid cloud</code></pre><p>A hybrid cloud combines public and private clouds, allowing you to run your applications in the most appropriate location. For example, you could host a website in the public cloud and link it to a highly secure database hosted in your private cloud (or on-premises datacenter).</p><ul><li><p>Advantages<br>Some advantages of a hybrid cloud are:    </p><ol><li>compare and contrast the three different cloud models</li></ol></li></ul><h2 id="Part-II-Understand-core-Azure-services"><a href="#Part-II-Understand-core-Azure-services" class="headerlink" title="Part II: Understand core Azure services"></a>Part II: Understand core Azure services</h2><h3 id="Understand-the-core-Azure-architectural-components"><a href="#Understand-the-core-Azure-architectural-components" class="headerlink" title="Understand the core Azure architectural components"></a>Understand the core Azure architectural components</h3><pre><code>1. describe RegionsAzure region: It is one or more Azure data centers within a specific geographic location. 50 regions worldwide.Region Pairs: westus paring with eastus for failover reason2. describe Availability Zones3. describe Resource Groups4. describe Azure Resource manager5. describe the benefits and usage of core Azure architectural components</code></pre><h3 id="Describe-some-of-the-core-products-available-in-Azure"><a href="#Describe-some-of-the-core-products-available-in-Azure" class="headerlink" title="Describe some of the core products available in Azure"></a>Describe some of the core products available in Azure</h3><pre><code>1. describe products available for Compute such as Virtual Machines, Virtual Machine Scale Sets, App Service and Functions2. describe products available for Networking such as Virtual Network, Load Balancer, VPN Gateway, Application Gateway and Content Delivery Network3. describe products available for Storage such as Blob Storage, Disk Storage, File Storage, and Archive Storage4. describe products available for Databases such as CosmosDB, Azure SQL Database, Azure Database Migration service, and Azure SQL Data Warehouse5. describe the Azure Marketplace and its usage scenarios</code></pre><h3 id="Describe-some-of-the-solutions-available-on-Azure"><a href="#Describe-some-of-the-solutions-available-on-Azure" class="headerlink" title="Describe some of the solutions available on Azure"></a>Describe some of the solutions available on Azure</h3><pre><code>1.describe Internet of Things (IoT) and products that are available for IoT on Azure such as IoT Fundamentals, IoT Hub and IoT Central2. describe Big Data and Analytics and products that are available for Big Data and Analytics such as SQL Data Warehouse, HDInsight and Data Lake Analytics3. describe Artificial Intelligence (AI) and products that are available for AI such as Azure Machine Learning Service and Studio4. describe Serverless computing and Azure products that are available for serverless computing such as Azure Functions, Logic Apps and App grid5. describe the benefits and outcomes of using Azure solutions</code></pre><h3 id="Understand-Azure-management-tools"><a href="#Understand-Azure-management-tools" class="headerlink" title="Understand Azure management tools"></a>Understand Azure management tools</h3><pre><code>1. understand Azure tools such as Azure CLI, PowerShell, and the Azure Portal2. understand Azure Advisor</code></pre><h2 id="Part-III-Understand-security-privacy-compliance-and-trust"><a href="#Part-III-Understand-security-privacy-compliance-and-trust" class="headerlink" title="Part III: Understand security, privacy, compliance, and trust"></a>Part III: Understand security, privacy, compliance, and trust</h2><h3 id="Understand-securing-network-connectivity-in-Azure"><a href="#Understand-securing-network-connectivity-in-Azure" class="headerlink" title="Understand securing network connectivity in Azure"></a>Understand securing network connectivity in Azure</h3><pre><code>1. describe Azure Firewall2. describe Azure DDoS Protection3. describe Network Security Group (NSG)4. choose an appropriate Azure security solution</code></pre><h3 id="Describe-core-Azure-Identity-services"><a href="#Describe-core-Azure-Identity-services" class="headerlink" title="Describe core Azure Identity services"></a>Describe core Azure Identity services</h3><pre><code>1. understand the difference between authentication and authorization</code></pre><p>   Two fundamental concepts that need to be understood when talking about identity and access control are authentication<br>   and authorization. They underpin everything else that happens and occur sequentially in any identity and access process:</p><p>   <strong>Authentication</strong> is the process of establishing the identity of a person or service looking to access a resource. It<br>   involves the act of challenging a party for legitimate credentials, and provides the basis for creating a security<br>   principal for identity and access control use. It establishes if they are who they say they are.</p><p>   <strong>Authorization</strong> is the process of establishing what level of access an authenticated person or service has. It<br>   specifies what data they’re allowed to access and what they can do with it.</p><pre><code>2. describe Azure Active Directory3. describe Azure Multi-Factor Authentication</code></pre><h3 id="Describe-security-tools-and-features-of-Azure"><a href="#Describe-security-tools-and-features-of-Azure" class="headerlink" title="Describe security tools and features of Azure"></a>Describe security tools and features of Azure</h3><pre><code>1. describe Azure Security2. understand Azure Security center usage scenarios3. describe Key Vault4. describe Azure Information Protection (AIP)5. describe Azure Advanced Threat Protection (ATP)</code></pre><h3 id="Describe-Azure-governance-methodologies"><a href="#Describe-Azure-governance-methodologies" class="headerlink" title="Describe Azure governance methodologies"></a>Describe Azure governance methodologies</h3><pre><code>1. describe Azure Policies2. describe Initiatives3. describe Role-Based Access Control (RBAC)4. describe Locks5. describe Azure Advisor security assistance</code></pre><h3 id="Understand-monitoring-and-reporting-options-in-Azure"><a href="#Understand-monitoring-and-reporting-options-in-Azure" class="headerlink" title="Understand monitoring and reporting options in Azure"></a>Understand monitoring and reporting options in Azure</h3><pre><code>1. describe Azure Monitor2. describe Azure Service Health3. understand the use cases and benefits of Azure Monitor and Azure Service Health</code></pre><h3 id="Understand-privacy-compliance-and-data-protection-standards-in-Azure"><a href="#Understand-privacy-compliance-and-data-protection-standards-in-Azure" class="headerlink" title="Understand privacy, compliance and data protection standards in Azure"></a>Understand privacy, compliance and data protection standards in Azure</h3><pre><code>1. understand industry compliance terms such as GDPR, ISO and NIST2. understand the Microsoft Privacy Statement3. describe the Trust center4. describe the Service Trust Portal5. describe Compliance Manager6. determine if Azure is compliant for a business need7. understand Azure Government services8. understand Azure Germany services</code></pre><h2 id="Part-IV-Understand-Azure-pricing-and-support"><a href="#Part-IV-Understand-Azure-pricing-and-support" class="headerlink" title="Part IV: Understand Azure pricing and support"></a>Part IV: Understand Azure pricing and support</h2><h3 id="Understand-Azure-subscriptions"><a href="#Understand-Azure-subscriptions" class="headerlink" title="Understand Azure subscriptions"></a>Understand Azure subscriptions</h3><pre><code>1. describe an Azure subscription2. understand the uses and options with Azure subscriptions</code></pre><h3 id="Understand-planning-and-management-of-costs"><a href="#Understand-planning-and-management-of-costs" class="headerlink" title="Understand planning and management of costs"></a>Understand planning and management of costs</h3><pre><code>1. understand options for purchasing Azure products and services2. understand options around Azure Free account3. understand the factors affecting costs such as resource types, services, locations, ingress and egress traffic4. understand Zones for billing purposes5. understand the Pricing calculator6. understand the Total Cost of Ownership (TCO) calculator7. understand best practices for minimizing Azure costs such as performing cost analysis, creating spending limits and quotas, and using tags to identify cost owners; use Azure reservations; use Azure Advisor recommendations8. describe Azure Cost Management</code></pre><h3 id="Understand-the-support-options-available-with-Azure"><a href="#Understand-the-support-options-available-with-Azure" class="headerlink" title="Understand the support options available with Azure"></a>Understand the support options available with Azure</h3><pre><code>1. understand support plans that are available such as Dev, Standard, Professional Direct and Premier2. understand how to open a support ticket3. understand available support channels outside of support plan channels4. describe the Knowledge Center</code></pre><h3 id="Describe-Azure-Service-Level-Agreements-SLAs"><a href="#Describe-Azure-Service-Level-Agreements-SLAs" class="headerlink" title="Describe Azure Service Level Agreements (SLAs)"></a>Describe Azure Service Level Agreements (SLAs)</h3><pre><code>1. describe a Service Level Agreement (SLA)2. determine SLA for a particular Azure product or service</code></pre><h3 id="Understand-service-lifecycle-in-Azure"><a href="#Understand-service-lifecycle-in-Azure" class="headerlink" title="Understand service lifecycle in Azure"></a>Understand service lifecycle in Azure</h3><pre><code>1. understand Public and Private Preview features2. understand how to access Preview features3. understand the term General Availability (GA)4. monitor feature updates</code></pre><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Cloud computing is renting resources, like storage space or CPU cycles, on another company’s computers. The company providing these serices is referred to as a cloud provider. Some example providers are Microsoft, Amazon, and Google.</p><h3 id="Common-cloud-computing-srevices"><a href="#Common-cloud-computing-srevices" class="headerlink" title="Common cloud computing srevices"></a>Common cloud computing srevices</h3><pre><code>1. Computer power2. Storage3. Applications - such as NoSQL or SQL database applications4. Networking - such as setting up virtual networks for virtual machines5. Analytics - such as visualizing telemetry, and performance data</code></pre><h3 id="Keep-it-short-with-two-common-services"><a href="#Keep-it-short-with-two-common-services" class="headerlink" title="Keep it short with two common services"></a>Keep it short with two common services</h3><pre><code>1. Computer power  A. Containers:      Containers provide a consistent, isolated execution environment for applications.      The open-source project, Docker, is one of the leading platforms for managing containers  B. Serverless Computing    Serverless computing lets you run application code without creating, configuring, or     maintaining a server. Serverless computing enables you to focus solely on how your     application behaves. It&apos;s ideal for automation tasks. For example, you can build a serverless     process that automatically sends an email confirmation after a customer makes an online purchase.2. Storage    Cloud providers typically offer services that can handle all of these types of data.     For example, if you wanted to store text, you could use a file on disk or you could take     a more structured approach like using a relational database.</code></pre><h3 id="Benefits-of-cloud-computing"><a href="#Benefits-of-cloud-computing" class="headerlink" title="Benefits of cloud computing"></a>Benefits of cloud computing</h3><pre><code>1. It&apos;s cost-effective or pay-as-you-go2. It&apos;s scalable  + vertical scaling (scale up) e.g. adding a faster CPU  + horizontal scaling (scale out) e.g. adding one more server3. It&apos;s elastic  As your workload changes due to a spike or drop in demand, a cloud computing system can compensate by automatically adding or removing resources4. It&apos;s currentWhen you use the cloud, you’re able to focus on what matters: building and deploying applications. You don&apos;t have to be caught up in the maintenance work of software patching, hardware setup, upgrades, and other IT management tasks.5. It&apos;s reliableCloud computing providers offer data backup, disaster recovery, and data replication services to make sure your data is always safe.6. It&apos;s globalCloud providers have fully-redundant datacenters located in various regions all over the globe. This gives you a local presence close to your customers to give them the best response time possible no matter where in the world they are.You can replicate your services into multiple regions for redundancy and locality, or select a specific region to ensure you meet data-residency and compliance laws for your customers.7. It&apos;s securephysical security to the cloud infrastructuredigital security, only authorized users to use the resources</code></pre><p>You can keep any systems running and accessible that use out-of-date hardware or an out-of-date operating system<br>You have flexibility with what you run locally versus in the cloud<br>You can take advantage of economies of scale from public cloud providers for services and resources where it’s cheaper, and then supplement with your own equipment when it’s not<br>You can use your own equipment to meet security, compliance, or legacy scenarios where you need to completely control the environment</p><ul><li>Disadvantages<br>Some concerns you’ll need to watch out for are:</li></ul><p>It can be more expensive than selecting one deployment model since it involves some CapEx cost up front<br>It can be more complicated to set up and manage</p><h2 id="Types-of-Cloud-Services"><a href="#Types-of-Cloud-Services" class="headerlink" title="Types of Cloud Services"></a>Types of Cloud Services</h2><p>Three categories:</p><ol><li>Infrastructure as a service (IaaS)</li><li>Platform as a service (PaaS)</li><li>Software as a service (SaaS)</li></ol><h2 id="Azure-management-options"><a href="#Azure-management-options" class="headerlink" title="Azure management options"></a>Azure management options</h2><ul><li><p>Azure portal for interacting with Azure via a Graphical User Interface (GUI)</p></li><li><p>Azure PowerShell and Azure Command-Line Interface (CLI) for command line and automation-based interactions with Azure</p></li><li>Azure Cloud Shell for a web-based command-line interface</li><li>Azure mobile app for monitoring and managing your resources from your mobile device</li></ul><p>There are four common techniques for performing compute in Azure:</p><ol><li>Virtual machines</li><li>Containers – Containers are a virtualization environment for running applications</li><li>Azure App Service</li><li>Serverless computing</li></ol><p>Storage tiers</p><p>Azure offers three storage tiers for blob object storage:</p><p><strong>Hot storage tier:</strong> optimized for storing data that is accessed frequently.<br><strong>Cool storage tier:</strong> optimized for data that is infrequently accessed and stored for at least 30 days.<br><strong>Archive storage tier:</strong> for data that is rarely accessed and stored for at least 180 days with flexible latency requirements.</p><p>A virtual network is a logically isolated network on Azure. A virtual network allows Azure resources to securely communicate with each other, the internet, and on-premises networks. A virtual network is scoped to a single region; however, multiple virtual networks from different regions can be connected together using virtual network peering.</p><p>You can also keep your service or data tiers in your on-premises network, placing your web tier into the cloud, but keeping tight control over other aspects of your application. A VPN gateway (or virtual network gateway), enables this scenario. It can provide a secure connection between an Azure Virtual Network and an on-premises location over the internet.</p><p>What’s a network security group?</p><p>A network security group, or NSG, allows or denies inbound network traffic to your Azure resources. Think of a network security group as a cloud-level firewall for your network.</p><p>To provide a dedicated, private connection between your network and Azure, you can use Azure ExpressRoute. ExpressRoute lets you extend your on-premises networks into the Microsoft cloud over a private connection facilitated by a connectivity provider. With ExpressRoute, you can establish connections to Microsoft cloud services, such as Microsoft Azure, Office 365, and Dynamics 365. This improves the security of your on-premises communication by sending this traffic over the private circuit instead of over the public internet. You don’t need to allow access to these services for your end users over the public internet, and you can send this traffic through appliances for further traffic inspection.</p><p>Course Outline<br>Module 1: Cloud Concepts<br>In this module you will learn basic cloud concepts.<br>Lessons<br>Learning Objectives<br>Why Cloud Services?<br>Infrastructure-as-a-Service (IaaS), Platform-as-a-Service (PaaS) and Software-as-a-Service (SaaS)<br>Public, Private, and Hybrid cloud models<br>After completing this module, students will be able:</p><p>Understand general cloud computing concepts<br>Module 2: Core Azure Services<br>In this module you will learn the basics core services available with Microsoft Azure.<br>Lessons<br>Core Azure architectural components<br>Core Azure Services and Products<br>Azure Solutions<br>Azure management tools<br>After completing this module, students will be able:</p><p>Understand core services available with Microsoft Azure<br>Module 3: Security, Privacy, Compliance and Trust<br>In this module, you learn about security, privacy, compliance, and trust with Microsoft Azure.<br>Lessons<br>Securing network connectivity in Azure<br>Core Azure Identity services<br>Security tools and features<br>Azure governance methodologies<br>Monitoring and Reporting in Azure<br>Privacy, Compliance and Data Protection standards in Azure<br>After completing this module, students will be able:</p><p>Understand security, privacy, compliance and trust with Microsoft Azure<br>Module 4: Azure Pricing and Support<br>In this module, you will focus on pricing and support models available with Microsoft.<br>Lessons<br>Azure subscriptions<br>Planning and managing costs<br>Support options available with Azure<br>Service lifecycle in Azure<br>After completing this module, students will be able:</p><p>Understand pricing and support models available with Microsoft </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Microsoft-Azure-AZ-900-Fundamentals-Exam&quot;&gt;&lt;a href=&quot;#Microsoft-Azure-AZ-900-Fundamentals-Exam&quot; class=&quot;headerlink&quot; title=&quot;Microsoft Az
      
    
    </summary>
    
    
      <category term="azure" scheme="http://www.yuliang.xyz/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>AZ-100 Azure Infrastructure and Deployment</title>
    <link href="http://www.yuliang.xyz/2019/03/05/microsoft-az100/"/>
    <id>http://www.yuliang.xyz/2019/03/05/microsoft-az100/</id>
    <published>2019-03-05T23:48:23.000Z</published>
    <updated>2019-03-05T23:49:42.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Test-Preparation-to-being-a-full-fledged-Microsoft-Azure-Administrator-Certificate"><a href="#Test-Preparation-to-being-a-full-fledged-Microsoft-Azure-Administrator-Certificate" class="headerlink" title="Test Preparation to being a full-fledged Microsoft Azure Administrator Certificate"></a>Test Preparation to being a full-fledged Microsoft Azure Administrator Certificate</h1><h2 id="AZ-100-Azure-Infrastructure-and-Deployment"><a href="#AZ-100-Azure-Infrastructure-and-Deployment" class="headerlink" title="AZ-100 Azure Infrastructure and Deployment"></a>AZ-100 Azure Infrastructure and Deployment</h2><p>40-60 questions, exam will be around 180 minutes, pass with 700 marks</p><h3 id="Manage-Azure-subscriptions-and-resources-15-20"><a href="#Manage-Azure-subscriptions-and-resources-15-20" class="headerlink" title="Manage Azure subscriptions and resources (15-20%)"></a>Manage Azure subscriptions and resources (15-20%)</h3><h4 id="Manage-Azure-subscriptions"><a href="#Manage-Azure-subscriptions" class="headerlink" title="Manage Azure subscriptions"></a>Manage Azure subscriptions</h4><pre><code>1. Assign administrator permissions2. Configure cost center quotas and tagging3. Configure Azure subscription polices at Azure subscription level</code></pre><h4 id="Analyze-resource-utilization-and-consumption"><a href="#Analyze-resource-utilization-and-consumption" class="headerlink" title="Analyze resource utilization and consumption"></a>Analyze resource utilization and consumption</h4><pre><code>1. Configure diagnostic settings on reources2. Create baseline for resources3. Create and test alerts4. Analyze alerts across subscription5. Analyze metrics across subscription6. Create action groups7. Monitor for unsused resources8. Monitor spend9. Report on spend10. utilize Log Search query functions11. view alerts in Log Analytics</code></pre><h4 id="Manage-resource-groups"><a href="#Manage-resource-groups" class="headerlink" title="Manage resource groups"></a>Manage resource groups</h4><pre><code>1. Use Azure policies for resource groups2. Configure resource locks3. Configure resource policies4. Implement and set tagging on resource groups5. Move resources across resource groups6. Remove resources groups</code></pre><h3 id="Implement-and-manage-storage-20-25"><a href="#Implement-and-manage-storage-20-25" class="headerlink" title="Implement and manage storage (20-25%)"></a>Implement and manage storage (20-25%)</h3><h4 id="Create-and-configure-storage-accounts"><a href="#Create-and-configure-storage-accounts" class="headerlink" title="Create and configure storage accounts"></a>Create and configure storage accounts</h4><pre><code>1. Configure network access to the storage account2. Create and configure storage account3. Generate shared access signature4. Install and use Azure Storage Explorer5. Manage access keys6. Monitor activity log by using Log Analytics7. Implement Azure storage replication</code></pre><h4 id="Import-and-export-data-to-Azure"><a href="#Import-and-export-data-to-Azure" class="headerlink" title="Import and export data to Azure"></a>Import and export data to Azure</h4><pre><code>1. Create export from Azure job2. Create import into Azure job3. Use Azure Data Box4. Configure and use Azure blob storage5. Configure Azure content delivery network (CDN) endpoints</code></pre><h4 id="Configure-Azure-files"><a href="#Configure-Azure-files" class="headerlink" title="Configure Azure files"></a>Configure Azure files</h4><pre><code>1. Create Azure file share2. Create Azure File Sync service3. Create Azure sync group4. Troubleshoot Azure File Sync</code></pre><h4 id="Implement-Azure-backup"><a href="#Implement-Azure-backup" class="headerlink" title="Implement Azure backup"></a>Implement Azure backup</h4><pre><code>1. Configure and review backup reports2. Perform backup operation3. Create Recovery Services Vault4. Create and configure backup policy5. Perform a restore operation</code></pre><h3 id="Deploy-and-manage-virtual-machines-VMs-20-25"><a href="#Deploy-and-manage-virtual-machines-VMs-20-25" class="headerlink" title="Deploy and manage virtual machines (VMs) (20-25%)"></a>Deploy and manage virtual machines (VMs) (20-25%)</h3><h4 id="Create-and-configure-a-VM-for-Windows-and-Linux"><a href="#Create-and-configure-a-VM-for-Windows-and-Linux" class="headerlink" title="Create and configure a VM for Windows and Linux"></a>Create and configure a VM for Windows and Linux</h4><pre><code>1. Configure high availabilty2. Configure monitoring, networking, storage, and virtual machine size3. deploy and configure scale sets</code></pre><h4 id="Automate-deployment-of-VMs"><a href="#Automate-deployment-of-VMs" class="headerlink" title="Automate deployment of VMs"></a>Automate deployment of VMs</h4><pre><code>1. Modify Azure Resource Manager(ARM) template2. Configure location of new VMs3. Configure VHD template4. Deploy from template5. Save a deployment as an ARM template6. Deploy Windows and Linux VMs</code></pre><h4 id="Manage-Azure-VM"><a href="#Manage-Azure-VM" class="headerlink" title="Manage Azure VM"></a>Manage Azure VM</h4><pre><code>1. Add data discs2. Add network interfaces3. Automate configuration management by using PowerShell Desired State Configuration (DSC) and VM Agent by using custom script extensions4. Manage VM sizes5. Move VMs from one resource group to another6. Redeploy VMs</code></pre><h4 id="Manage-VM-backups"><a href="#Manage-VM-backups" class="headerlink" title="Manage VM backups"></a>Manage VM backups</h4><pre><code>1. Configure VM backup2. Define backup policies3. Implement backup policies4. Perform VM restore</code></pre><h3 id="Configure-and-manage-virtual-networks-20-25"><a href="#Configure-and-manage-virtual-networks-20-25" class="headerlink" title="Configure and manage virtual networks (20-25%)"></a>Configure and manage virtual networks (20-25%)</h3><h4 id="Create-connectivity-between-virtual-networks"><a href="#Create-connectivity-between-virtual-networks" class="headerlink" title="Create connectivity between virtual networks"></a>Create connectivity between virtual networks</h4><pre><code>1. Create and configure VNET peering2. Create and configure VNET to VNET3. Verify virtual network connectivity4. Create virtual network gateway</code></pre><h4 id="Impement-and-manage-virtual-networking"><a href="#Impement-and-manage-virtual-networking" class="headerlink" title="Impement and manage virtual networking"></a>Impement and manage virtual networking</h4><pre><code>1. Configure provate and public IP addresses2. Network routes3. Network interface, subnets, and virtual network</code></pre><h4 id="Configure-name-resolution"><a href="#Configure-name-resolution" class="headerlink" title="Configure name resolution"></a>Configure name resolution</h4><pre><code>1. Configure Azure DNS2. Configure custom DNS settings3. Configure private and public DNS zones</code></pre><h4 id="Create-and-configure-a-Network-Security-Group-NSG"><a href="#Create-and-configure-a-Network-Security-Group-NSG" class="headerlink" title="Create and configure a Network Security Group (NSG)"></a>Create and configure a Network Security Group (NSG)</h4><pre><code>1. Create security rules2. associate NSG to a subnet or network interface3. identify required ports4. evaluate effective security rules</code></pre><h3 id="Manage-identities-15-20"><a href="#Manage-identities-15-20" class="headerlink" title="Manage identities (15-20%)"></a>Manage identities (15-20%)</h3><h4 id="Manage-Azure-Active-Directory-AD"><a href="#Manage-Azure-Active-Directory-AD" class="headerlink" title="Manage Azure Active Directory (AD)"></a>Manage Azure Active Directory (AD)</h4><pre><code>1. Add custom domains2. Configure Azure AD Identity Protection3. Azure AD Join, and Enterprise State Roaming4. Configure self-service password reset5. Implement conditional access policies6. Manage multiple directories7. Perform an access review</code></pre><h4 id="Manage-Azure-AD-objects-usres-groups-and-devices"><a href="#Manage-Azure-AD-objects-usres-groups-and-devices" class="headerlink" title="Manage Azure AD objects (usres, groups, and devices)"></a>Manage Azure AD objects (usres, groups, and devices)</h4><pre><code>1. Create users and groups2. Manage user and group properties3. Manage device settings4. Perform bulk user updates</code></pre><h4 id="Implement-and-manage-hybrid-identites"><a href="#Implement-and-manage-hybrid-identites" class="headerlink" title="Implement and manage hybrid identites"></a>Implement and manage hybrid identites</h4><pre><code>1. Install and configure Azure AD Connect2. Configure federation and single sign-on3. Manage Azure AD Connect4. Manage password sync and writeback</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Test-Preparation-to-being-a-full-fledged-Microsoft-Azure-Administrator-Certificate&quot;&gt;&lt;a href=&quot;#Test-Preparation-to-being-a-full-fledg
      
    
    </summary>
    
    
      <category term="azure" scheme="http://www.yuliang.xyz/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>Objected Oriented Design</title>
    <link href="http://www.yuliang.xyz/2019/02/07/design-ood/"/>
    <id>http://www.yuliang.xyz/2019/02/07/design-ood/</id>
    <published>2019-02-08T03:34:35.000Z</published>
    <updated>2019-02-08T03:35:11.722Z</updated>
    
    <content type="html"><![CDATA[<p>OOD. 老老实实实现了两遍Singleton, Factory, 还有MVC pattern. 设计一个class应该也算在OOD范围里:<br>写过无数遍LRU, Trie, Iterator, BST以及变种, BlockingQueue等等, 生怕被问到…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OOD. 老老实实实现了两遍Singleton, Factory, 还有MVC pattern. 设计一个class应该也算在OOD范围里:&lt;br&gt;写过无数遍LRU, Trie, Iterator, BST以及变种, BlockingQueue等等, 生怕被问到…&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="ood" scheme="http://www.yuliang.xyz/tags/ood/"/>
    
  </entry>
  
  <entry>
    <title>IP Sec 101</title>
    <link href="http://www.yuliang.xyz/2019/02/03/ipsec-101/"/>
    <id>http://www.yuliang.xyz/2019/02/03/ipsec-101/</id>
    <published>2019-02-03T20:18:43.000Z</published>
    <updated>2019-02-03T20:19:20.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IP-Security"><a href="#IP-Security" class="headerlink" title="IP Security"></a>IP Security</h1><p>Ipsec协议不是一个单独的协议，它包括认证头AH（Authentication Header），封装安全载荷ESP（Encapsulating Security Payload），密钥交换协议IKE（Internet Key Exchange）和用于网络认证及加密的一些算法等。其中，AH和ESP协议用于提供安全服务，IKE协议用于提供密钥交换。</p><p>Authentication Header (AH)<br>Encapsulating Security Payload (ESP)</p><p>IPSec also uses other existing encryption standards to make up a protocol suite, which are explained in the next sections.<br>IPSec has several standards that are supported by Cisco IOS and the PIX Firewall.</p><p>IP Security Protocol<br>Authentication Header (AH)<br>Encapsulating Security Payload (ESP)<br>Data Encryption Standard (DES)<br>Triple DES (3DES)<br>Diffie-Hellman (D-H)<br>Message Digest 5 (MD5)<br>Secure Hash Algorithm-1 (SHA-1)<br>Rivest, Shamir, and Adelman (RSA) Signatures<br>Internet Key Exchange (IKE)<br>Certificate Authorities (CAs)</p><h2 id="IP-Security-简介"><a href="#IP-Security-简介" class="headerlink" title="IP Security 简介"></a>IP Security 简介</h2><p>英语：Internet Protocol Security，縮寫為IPsec），是一個协议套件，透过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议族（一些相互关联的协议的集合）。</p><p>IPsec主要由以下协议组成[1][2]：一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护[3][4]；二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性[5]；三、安全關聯（SA），提供算法和数据包，提供AH、ESP操作所需的参数[6]。</p><p>IP Security (IPsec) protocols provide security services such as encrypting sensitive data, authentication, protection against replay, and data confidentiality for IP packets.  </p><p> 一种三层隧道加密协议。它为Internet上传输的数据提供了高质量的、可互操作的、基于密码学的安全保证。<br> 特定的通信方之间在IP层通过加密与数据源认证等方式，提供了以下的三种安全服务：</p><ul><li><p>数据机密性(Data Confidentiality):       IPsec发送方在通过网络传输包前对包进行加密。<br>在传输前，对数据进行加密，可以保证在传输过程中，即使数据包遭截取，信息也无法被读。该特性在IPSec中为可选项，与IPSec策略的具体设置相关。</p></li><li><p>数据完整性(Data Integrity):        IPsec接收方对发送方发送来的包进行认证，以确保数据在传输过程中没有被篡改。<br>防止传输过程中数据被篡改，确保发出数据和接收数据的一致性。IPSec利用Hash函数为每个数据包产生一个加密检查和，接收方在打开包前先计算检查和，若包遭篡改导致检查和不相符，数据包即被丢弃。</p></li><li><p>数据来源认证(Data Authentication):  IPsec在接收端可以认证发送IPsec报文的发送端是否合法。<br>“不可否认性”可以证实消息发送方是唯一可能的发送者，发送者不能否认发送过消息。“不可否认性”是采用公钥技术的一个特征，当使用公钥技术时，发送方用私钥产生一个数字签名随消息一起发送，接收方用发送者的公钥来验证数字签名。由于在理论上只有发送者才唯一拥有私钥，也只有发送者才可能产生该数字签名，所以只要数字签名通过验证，发送者就不能否认曾发送过该消息</p></li><li><p>防报文重放功能(Antireplay)：“反重播”确保每个IP包的唯一性，保证信息万一被截取复制后，不能再被重新利用、重新传输回目的地址。该特性可以防止攻击者截取破译信息后，再用相同的信息包冒取非法访问权。 sender sets the replay bit in the header </p></li></ul><h2 id="IP-Security-实现"><a href="#IP-Security-实现" class="headerlink" title="IP Security 实现"></a>IP Security 实现</h2><p>IP Security 提供了两种安全机：认证和加密。</p><ol><li>认证：使接收方可以确认发送方的真实身份，确认原始数据没有遭到篡改</li><li>加密：发送方发送的数据被加密，防止数据被窃听</li></ol><p>协议族：</p><ol><li>网络认证协议AH（Authentication Header，认证头） –&gt; 1st security protocol to provide security services</li><li>ESP（Encapsulating Security Payload，封装安全载荷）–&gt; 2nd security protocol to provide security services</li><li><p>IKE（Internet Key Exchange，因特网密钥交换）–&gt;<br>IKE协议（互联网密钥交换协议）: 两个系统端使用IKE协议来互相验证，并协商建立IPsec通道所需的特定加密参数和两端特定的网段。IKE负责连接双方的身份验证，双方协商得出的密码和使用的加密算法都告知给操作系统，操作系统对两边网段之间的流量数据进行加密传输。</p></li><li><p>用于网络认证及加密的一些算法</p></li></ol><p>IPSEC安全机制中两种协议的比较：<br>  AH协议 (IP协议号为51): 提供数据源认证、数据完整性校验和防报文重放功能，它能保护通信免受篡改，但不能防止窃听，适合用于传输非机密数据。AH的工作原理是在每一个数据包上添加一个身份验证报文头，此报文头插在标准IP包头后面，对数据提供完整性保护。，但因为IP头部分包含很多变量，比如type of service(TOS)，flags，fragment offset，TTL以及header checksum。所以这些值在进行authtication前要全部清零。否则hash会mismatch导致丢包。因此AH不支持NAT转换。</p><p>  ESP协议 (IP协议号为50): 提供加密、数据源认证、数据完整性校验和防报文重放功能。ESP的工作原理是在每一个数据包的标准IP包头后面添加一个ESP报文头，并在数据包后面追加一个ESP尾。与AH协议不同的是，ESP将需要保护的用户数据进行加密后再封装到IP包中，以保证数据的机密性。</p><p>IKE提供端与端之间的动态认证，IKE为Ipsec提供自动协商交换密钥、建立SA的服务<br>IKE协商建立的SA有两种定义的生命周期：基于时间和基于流量 </p><p>IPSEC SA:<br>SA（Security Association，安全联盟）SA是IPsec的基础，也是IPsec的本质。IPsec在两个端点之间提供安全通信，端点被称为IPsec对等体。SA是通信对等体间对某些要素的约定，例如，使用哪种协议（AH、ESP还是两者结合使用）、协议的封装模式（传输模式和隧道模式）、加密算法（DES、3DES和AES）、特定流中保护数据的共享密钥以及密钥的生存周期等。</p><p>建立SA的方式有手工配置和IKE自动协商两种。</p><p>SA是单向的，在两个对等体之间的双向通信，最少需要两个SA来分别对两个方向的数据流进行安全保护。同时，如果两个对等体希望同时使用AH和ESP来进行安全通信，则每个对等体都会针对每一种协议来构建一个独立的SA。</p><p>SA由一个三元组来唯一标识，这个三元组包括SPI（Security Parameter Index，安全参数索引）、目的IP地址、安全协议号（AH或ESP）。</p><p>SPI是用于唯一标识SA的一个32比特数值，它在AH和ESP头中传输。在手工配置SA时，需要手工指定SPI的取值。使用IKE协商产生SA时，SPI将随机生成。<br>通过IKE协商建立的SA具有生存周期，手工方式建立的SA永不老化。</p><p>IKE协商建立的SA的生存周期有两种定义方式：</p><ul><li>基于时间的生存周期，定义了一个SA从建立到失效的时间；</li><li>基于流量的生存周期，定义了一个SA允许处理的最大流量。<br>生存周期到达指定的时间或指定的流量，SA就会失效。SA失效前，IKE将为IPsec协商建立新的SA，这样，在旧的SA失效前新的SA就已经准备好。在新的SA开始协商而没有协商好之前，继续使用旧的SA保护通信。在新的SA协商好之后，则立即采用新的SA保护通信。</li></ul><p>决定了对报文进行何种处理<br>协议、算法、密钥</p><p>每个IPSec SA都是单向的<br>手工建立/IKE协商生成</p><p>IPSec对数据流提供的安全服务通过SA来实现<br>SPD（Security Policy Database）<br>SAD（Security Association Database）</p><p>SA[Security Associations]是单向，在两个对等体之间的双向通信，最少需要两个SA来分别对两个方向的数据流进行安全保护。  </p><h3 id="4-认证算法和加密算法"><a href="#4-认证算法和加密算法" class="headerlink" title="4. 认证算法和加密算法"></a>4. 认证算法和加密算法</h3><p>4.1 认证算法<br>认证算法的实现主要是通过杂凑函数。杂凑函数是一种能够接受任意长的消息输入，并产生固定长度输出的算法，<br>该输出称为消息摘要。IPsec对等体计算摘要，如果两个摘要是相同的，则表示报文是完整未经篡改的。</p><p>  IPsec使用两种认证算法：</p><ol><li>MD5：MD5通过输入任意长度的消息，产生128bit的消息摘要</li><li>SHA-1：SHA-1通过输入长度小于2的64次方bit的消息，产生160bit的消息摘要</li></ol><p>4.2 加密算法<br>加密算法实现主要通过对称密钥系统，它使用相同的密钥对数据进行加密和解密。</p><p>目前设备的IPsec实现三种加密算法:</p><ol><li>DES（Data Encryption Standard）：使用56bit的密钥对一个64bit的明文块进行加密。</li><li>3DES（Triple DES）：使用三个56bit的DES密钥（共168bit密钥）对明文进行加密。</li><li>AES（Advanced Encryption Standard）：使用128bit、192bit或256bit密钥长度的AES算法对明文进行加密。</li></ol><p>这三个加密算法的安全性由高到低依次是：AES、3DES、DES，安全性高的加密算法实现机制复杂，运算速度慢。对于普通的安全要求，DES算法就可以满足需要。</p><h2 id="协商方式"><a href="#协商方式" class="headerlink" title="协商方式"></a>协商方式</h2><p>两种协商方式建立SA：</p><p>手工方式（manual）：<br>    配置比较复杂，创建SA所需的全部信息都必须手工配置，而且不支持一些高级特性（例如定时更新密钥），但优点是可以不依赖IKE而单独实现IPsec功能。</p><p>IKE自动协商（isakmp）：<br>    方式相对比较简单，只需要配置好IKE协商安全策略的信息，由IKE自动协商来创建和维护SA。<br>当与之进行通信的对等体设备数量较少时，或是在小型静态环境中，手工配置SA是可行的。对于中、大型的动态网络环境中，推荐使用IKE协商建立SA。</p><h2 id="工作模式（封装模式）"><a href="#工作模式（封装模式）" class="headerlink" title="工作模式（封装模式）"></a>工作模式（封装模式）</h2><ol><li>隧道（tunnel）模式：用户的整个IP数据包被用来计算AH或ESP头，AH或ESP头以及ESP加密的用户数据被封装在一个新的IP数据包中。<br>通常，隧道模式应用在两个安全网关之间的通讯。</li><li>传输（transport）模式：只是传输层数据被用来计算AH或ESP头，AH或ESP头以及ESP加密的用户数据被放置在原IP包头后面。<br>通常，传输模式应用在两台主机之间的通讯，或一台主机和一个安全网关之间的通讯。</li></ol><p>data encapsulation diagram</p><p><a href="https://zh.wikipedia.org/wiki/IPsec" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IPsec</a></p><p>IPsec协议必须处理可靠性和分片的问题<br>认证头（AH）<br>认证头（Authentication Header，AH）被用来保证被传输分组的完整性和可靠性。此外，它还保护不受重放攻击。认证头试图保护IP数据报的所有字段，那些在传输IP分组的过程中要发生变化的字段就只能被排除在外。当认证头使用非对称数字签名算法（如RSA）时，可以提供不可否认性（RFC 1826）[10]。</p><p>认证头分组图示：</p><p>0    1    2    3<br>0 1 2 3 4 5 6 7    0 1 2 3 4 5 6 7    0 1 2 3 4 5 6 7    0 1 2 3 4 5 6 7<br>下一个头    载荷长度    保留<br>安全参数索引（SPI）<br>序列号<br>认证数据（可变长度）<br>字段含义：</p><p>下一个头：标识被传送数据所属的协议。<br>载荷长度：认证头包的大小。<br>保留：为将来的应用保留（目前都置为0）。<br>安全参数索引：与IP地址一同用来标识安全参数。<br>序列号：单调递增的数值，用来防止重放攻击。<br>认证数据：包含了认证当前包所必须的数据。</p><p>将VPN主要划分为两类，一类是工作于客户端到服务端的模式，像OpenVPN，SSL VPN，L2TP，PPTP这些都是需要客户端主动发起连接，拨到Server端在两者之间建立一个逻辑上的隧道 (tunnel)进行通信。这种方式一般适用于个人到总部场景。</p><p>另外一种就是站点到站点（site-to-site）的模式，像OpenSwan，StrongSwan， Raccoon 等软件，这种情况下两端会各有一个设备负责来建立两个站点之间安全通信的隧道，任何需要到对端的通信都会触发设备来建立安全隧道通信。 那么公司原有数据中心与云通信都是双向通信，所以站点到站点更合理。 实际上这里说的 VPN 即是指 IPsec VPN，IPsec 是一种工业标准，只要支持这种标准的设备都可以互相协商建立一个安全的隧道出来，比如支持的硬件设备有路由器，防火墙以及专业的 VPN 设备</p><h2 id="IPSEC-Over-GRE-IPSec在里，GRE在外-OR-GER-Over-IPSEC-（GRE-在里，-IPSec在外）"><a href="#IPSEC-Over-GRE-IPSec在里，GRE在外-OR-GER-Over-IPSEC-（GRE-在里，-IPSec在外）" class="headerlink" title="IPSEC Over GRE(IPSec在里，GRE在外) OR GER Over IPSEC （GRE 在里， IPSec在外）"></a>IPSEC Over GRE(IPSec在里，GRE在外) OR GER Over IPSEC （GRE 在里， IPSec在外）</h2><ul><li>IPSec建立的隧道在设计时就只支持IP单播，并且也不支持组播，即不能传递路由协议，所以IGP动态路由协议的流量不可能穿越IPSec隧道， 并且也不支持非IP协议的流量。</li><li>GRE只提供了数据包的封装，它并没有加密功能来防止网络侦听和攻击，不支持对于数据完整性以及身份认证的验证功能。支持传递路由协议。</li></ul><p>IPSEC Over GRE：<br>先把需要加密的数据包封装成IPSEC包，然后再扔到GRE隧道里。作法是把IPSEC的加密图作用在Tunnel口上的，即在Tunnel口上监控（访问控制列表监控本地ip网段-源i和远端ip网段-目的地），是否有需要加密的数据流，有则先加密封装为IPSEC包，然后封装成GRE包进入隧道（这里显而易见的是，GRE隧道始终无论如何都是存在的，即GRE隧道的建立过程并没有被加密），同时，未在访问控制列表里的数据流将以不加密的状态直接走GRE隧道，即存在有些数据可能被不安全地传递的状况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a. 访问控制列表，针对两个网段的数据流，如：</span><br><span class="line">   ip access-list extended vpn12</span><br><span class="line">   permit ip 10.1.1.0 0.0.0.255 10.2.2.0 0.0.0.255</span><br><span class="line">b. 加密图放在Tunnel口</span><br></pre></td></tr></table></figure><p>GRE Over IPSEC：<br>先把数据分装成GRE包，然后再分装成IPSEC包。做法是在物理接口上监控，是否有需要加密的GRE流量（访问控制列表针对GRE两端的设备ip），所有的这两个端点的GRE数据流将被加密分装为IPSEC包再进行传递，这样保证的是所有的数据包都会被加密，包括隧道的建立和路由的建立和传递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a. 访问列表，针对两个路由器之间的GRE流，如：</span><br><span class="line">   ip access-list extended vpn12</span><br><span class="line">   permit gre host 172.16.11.2 host 172.16.22.2</span><br><span class="line">b. 加密图作用在物理口。</span><br></pre></td></tr></table></figure><p>只有当GRE Over IPSEC的时候，才可以将模式改为传输模式。</p><h2 id="L2TP-Layer-2-Tunneling-Protocol-v-s-IPSec"><a href="#L2TP-Layer-2-Tunneling-Protocol-v-s-IPSec" class="headerlink" title="L2TP(Layer 2 Tunneling Protocol) v.s. IPSec"></a>L2TP(Layer 2 Tunneling Protocol) v.s. IPSec</h2><h2 id="CI-Continous-Integeration-amp-amp-CD-Continous-Delivery"><a href="#CI-Continous-Integeration-amp-amp-CD-Continous-Delivery" class="headerlink" title="CI (Continous Integeration)  &amp;&amp; CD (Continous Delivery)"></a>CI (Continous Integeration)  &amp;&amp; CD (Continous Delivery)</h2><p>软件交付管道以快速、自动化和可重复的方式从源代码生成发布版本。如何完成这项工作的总体设计称为“持续交付”（CD）。启动装配线的过程称为“持续集成”（CI）。确保质量的过程称为“持续测试”，将最终产品提供给用户的过程称为“持续部署”。一些专家让这一切简单、顺畅、高效地运行，这些人被称为运维开发DevOps践行者。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IP-Security&quot;&gt;&lt;a href=&quot;#IP-Security&quot; class=&quot;headerlink&quot; title=&quot;IP Security&quot;&gt;&lt;/a&gt;IP Security&lt;/h1&gt;&lt;p&gt;Ipsec协议不是一个单独的协议，它包括认证头AH（Authenti
      
    
    </summary>
    
    
      <category term="networking, tcp/ip protocol" scheme="http://www.yuliang.xyz/tags/networking-tcp-ip-protocol/"/>
    
  </entry>
  
  <entry>
    <title>Java Thread</title>
    <link href="http://www.yuliang.xyz/2019/01/27/java-thread/"/>
    <id>http://www.yuliang.xyz/2019/01/27/java-thread/</id>
    <published>2019-01-27T22:52:43.000Z</published>
    <updated>2019-02-11T01:04:18.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-4-1-Defining-Instantiating-and-Starting-Threads"><a href="#Objective-4-1-Defining-Instantiating-and-Starting-Threads" class="headerlink" title="Objective 4.1 Defining, Instantiating, and Starting Threads"></a>Objective 4.1 Defining, Instantiating, and Starting Threads</h2><h3 id="Defining-a-Thread"><a href="#Defining-a-Thread" class="headerlink" title="Defining a Thread"></a>Defining a Thread</h3><h4 id="Extend-the-java-lang-Thread-class"><a href="#Extend-the-java-lang-Thread-class" class="headerlink" title="Extend the java.lang.Thread class"></a>Extend the java.lang.Thread class</h4><ol><li>extend the java.lang.Thread class</li><li>override the run() method</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Running the task in a seperate thread"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// can overload the run() method, but it will be ignored by the Thread class</span></span><br><span class="line"><span class="comment">// unless you call it yourself， and it will be executed in the current call stack</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"String in run is: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Implement-the-java-lang-Runnable-interface"><a href="#Implement-the-java-lang-Runnable-interface" class="headerlink" title="Implement the java.lang.Runnable interface"></a>Implement the java.lang.Runnable interface</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Important job running in MyRunnable."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Instantiating-a-Thread"><a href="#Instantiating-a-Thread" class="headerlink" title="Instantiating a Thread"></a>Instantiating a Thread</h3><p>Every thread of execution begins as an instance of class Thread.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructors need to know</span></span><br><span class="line">Thread()</span><br><span class="line">Thread(Runnable target)</span><br><span class="line">Thread(Runnable target, String name)</span><br><span class="line">Thread(String name)</span><br></pre></td></tr></table></figure><p>new -&gt; runnable alive  -&gt; dead</p><p>start()</p><p>yield()</p><p>sleep()</p><p>run()</p><p>getState() method<br>isAlive() start() is called but run() is not called</p><p>Thread &amp; Locks. 考得不多但是面ebay碰到了. 主要知识点: thread和process区别, multithread, lock, semaphore, 对resource分配, deadlock, 怎么解决/预防deadlock. 还有BlockingQueue 和 Producer-Consumer经典题要会implement.<br>这里有几个经典问题:<br><a href="https://www.careercup.com/question?id=4783236498587648" target="_blank" rel="noopener">https://www.careercup.com/question?id=4783236498587648</a><br><a href="https://www.careercup.com/question?id=5652784707796992" target="_blank" rel="noopener">https://www.careercup.com/question?id=5652784707796992</a></p><ul><li>Semaphore:</li></ul><p>When a process encounters a semaphore, it performs a test to determine whether someone else is currently accessing the resources the semaphore protects.<br>If so, the process blocks and waits until another process signals that the resource is available. Since many process may be waiting on a resource, some<br>implementions of semaphores use a queue to determine who is next to go.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Objective-4-1-Defining-Instantiating-and-Starting-Threads&quot;&gt;&lt;a href=&quot;#Objective-4-1-Defining-Instantiating-and-Starting-Threads&quot; clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>投资美股入门</title>
    <link href="http://www.yuliang.xyz/2018/08/21/us-stock-101/"/>
    <id>http://www.yuliang.xyz/2018/08/21/us-stock-101/</id>
    <published>2018-08-21T04:15:46.000Z</published>
    <updated>2019-01-21T20:26:24.676Z</updated>
    
    <content type="html"><![CDATA[<p>可转债： convertible bond/debenture/note</p><ul><li>上市公司发行的一种低息债券，在发行的时候，表明了它的利息，期限，支付方式，还同时规定了一个价格。</li><li>转股股价，发行时，确定的转股股价，一般不会改变，但当正股股价低于转股股价的时候，上市公司有可能会调低转股价，转股价只能调低不能调高</li><li>大盘好的时候</li><li>股票上涨的时候</li><li>股票下跌的时候，会触发回售条款</li><li>正股价：公司的股价，随行情波动</li><li>可转债价格：公司的转债价格，随行情进行波动，但不会无限上涨，会触发强赎条款</li><li>可转债发行价格</li></ul><p>公式： 可转股数 = 100（可转债的规定发行价格） / 当时规定的转股价 （可变）</p><p>什么时候/情况下，可转在的价格对应转换成股票后的价值处在一个溢价的状态</p><ul><li>强赎条款</li><li>回购条款</li></ul><p>杠杆</p><p>盘前、盘后交易</p><p>收盘价</p><p>撮合价</p><p>空利率，以及可做空数（这是一个很好参看市场做空情绪的指标），新手一定要清楚，做多的利率是固定的，而做空利率是浮动的，一般3.6%-56%都有</p><p>小散户适合什么方法：短期+中期的策略，换句话说，你看准了一支股票可以耐心的等1-2个月，如果你真心长期看好，就买了别天天看，第二年再看，或者你设定好在某个高位卖掉，否则你必输无疑。</p><p>亏损的经验：</p><p>Apple：iPhone 8 发布会那天晚上最高买入，结果被套，持续加仓，持续下跌，从163美金到151.5美金，看着iPhone8销量不济的趋势，割肉了，亏6000美金；</p><p>寺库：刚上市就跌破发行价从13到10元，以为是抄底，没想到过两天跌到8块多，还有继续下跌趋势，实在受不了，割肉，亏2400美金其他：还亏了一些不熟悉的美股，猫途鹰、CVS之类的，反正跌了也不了解其基本面，也不懂啥原因，还要看英文的新闻才知道发生了啥事，累计亏损：3000美金</p><p>盈利的经验：</p><p>趣店：我打趣的跟朋友说，这个可以说是中国股民最爱的股票，只要做空的矜持的住的，至今无亏损案例！从他上市第一天我就开始做空，反复做空，累计盈利：13000美金+网易、阿里：长线看好，所以不怕，感觉低位就入手，高位就抛售，游击战罢了，简简单单，被套也不担心，只要牛市还在，你就不输；累计盈利5000美金</p><h2 id="By-Cody-知乎-https-www-zhihu-com-question-20482563-answer-133760429"><a href="#By-Cody-知乎-https-www-zhihu-com-question-20482563-answer-133760429" class="headerlink" title="By Cody 知乎  https://www.zhihu.com/question/20482563/answer/133760429"></a>By Cody 知乎  <a href="https://www.zhihu.com/question/20482563/answer/133760429" target="_blank" rel="noopener">https://www.zhihu.com/question/20482563/answer/133760429</a></h2><p>个人投资者如果要入门美股，大概可以分为三个阶段。</p><h3 id="一、「入门篇」1-投资美股，首先需要了解的是，美股市场与A股市场，在市场机制上的不同。美股是世界上最成熟的资本市场，从规则上来说，可以T-0交易，没有10-的涨跌停限制，可以做多以及做空，大部分个股都有期权交易，是一个相当自由的市场。不过，自由的另一面也意味着很多在A股市场存在的现象，在美股没有。比如，壳资源几乎没有价值，公司是会退市的。打新股没有稳定的超额收益，新股是会破发的。脱离基本面的妖股很快会受到市场纠正，因为美股是能做空的。所以，A股投资者，投资美股，要了解美股的做空机制，尽量远离妖股。没有涨跌停的限制，该有什么样的止损意识。还有什么样的飞刀可以接，什么样的飞刀不能接。美国证监会对上市公司采用宽近严出的作风，将公司经营的鉴别交给投资者，对市场舞弊，数据作假、内幕交易采取强力的惩罚措施。所以，从这一点上来说，与国内证监会刻意保护中小投资者的态度有所不同。2-要清楚一些美股市场和券商的基本情况。美股的开盘时间，分为夏令和冬令两个时节，9-30-4-00或者10-30-5-00，中间不像A股，没有午休时间。同时美股盘前和盘后，都有大概4个小时的非常规交易时段，可以交易大部分流动性较好，以及券商支持的股票（期权不行）。非常规交易时段对于美股交易非常重要，一来因为很多公司会在盘前盘后发布季报，二来一些重大事件可以在非常规时段对市场产生影响。一个好的券商，可以尽量多的支持非常规时段交易的品种，同时在做空上面也更容易借到股票。所以选好一个券商也很重要。就国内做美股来说，算是灰色地带，因为目前中国还没有做国外股票市场经纪业务的具体规定，所以很多国际券商，不能在中国从事经纪业务。他们多数采取与国内互联网金融公司合作的形式，底层使用他们的中后台，表层这些互联网金融公司自己设计交互方式（也就是下单软件一类），至于开户都属于UNSOLICATED-CASE。比较知名的IB、嘉维证券、socttrade等，都有和国内的这些互联网金融公司服务，但是就像这些互联网公司提供了翻译、资讯、软件服务一样，佣金也要加收一层，对于中低频交易者来说，相差也不是很大，但在用户体验方面改进却不小。另外一方面，就安全性来说，所有美国知名的券商，都必须要在SIPC-（投资者保护公司），强制投保，最多保障金额50万美金，其中现金占25万。所以，在这个额度内，券商破产的风险几乎不会影响到本金安全。3-要会查询美股的相关资料，如果英文阅读能力强，特别是又懂财务的同学，而且还喜欢投资或者交易的同学。我是建议直接上-SEC-gov-Company-Search-Page-查询公司资料，10K、10Q、424B、13F分别代表什么意思-GOOGLE-一下，如果英文一般般的，也可以多关注新浪美股、雪球这类财经新闻，有很多热心的网友有写很多行业、公司相关的新闻。我自己和朋友有收集一些美股相关的网站-美股维基百科-，里面有我-呕-xian-心-de-沥-wu-血-liao-收集的各类美股信息网站，讲真，就静态信息而言，我感觉自己都仿佛能用四五个网站拼出一个-bloomberg，也有人表示从这个网站里面学到很多东西，我还感觉蛮开心的。这里我推荐几个比较好用的网站吧，a-第一个是-Stock-Market-Insights-Seeking-Alpha-seeking-alpha-最强大的两点，一点是可以读每个季度的电话会议稿，这对你了解公司战略，市场concensus，非常重要。第二点是，可以看他的news，分析个股在每个阶段变化的主要矛盾。b-第二个是FINVIZ-com-Stock-Screener-finviz-估计是美股最强大免费筛选软件，而付费版的精度更细，更好的是他的主页有很多市场统计数据，普通投资者，每天观察下，可以总揽市场走势，有cover的行业或者公司出现变动，可以去考究下背后变动的原因。c-第三个，主要是纯粹为了小白投资服务的两个简单估值软件，一个是https-simplywall-st-NasdaqGS-NVDA-nvidia-close-一个是Discounted-Cash-Flow-Calculator-for-Stock-Valuation这两个网站，分别从multiple-和-DCF-的角度去简单对个股进行估值，如果你不懂估值，可以在网上花几个小时看看简单了解下，以后如果要做个股估值，可以用这两个网站节约不少时间。这个东西的好处是，能够将你的目标公司价格，进行进一步的精确化，这样如果你手上有对行业的洞见或者公司洞见的-alpha，那么这个可以东西弥补一部分金融知识上的缺失。专业一点地话，很多免费的财经网站，yahoo-finance-morning-star-marketwathing都可以找到各样的财务数据，自己做做财务预测也可以。还有些别的网站，查寻其他数据就不一一介绍了，有兴趣可以多逛逛那个美股维基百科那个网站。二、「进阶篇」这部分主要简单讲讲自己对美股市场的感性和理性的认识，大部分来自于长期的市场观察，和一些自己的投资理念。个人做了几年美股，总体来说，美股是一个半强有效的市场，与A股的最大区别在于，虽然他们的流动性都很强。但是美股对公司故事变现时长的容忍度很低，也就是说市场自身的纠错机制非常健全，比如GOPRO的视频社交、REWALK的外骨骼、3D打印行业的C端应用市场。这些故事在初期都能获得极好的估值和溢价，但是一般在2-3个季度内，都不能实质性的增收或者增利表现的话，市场真是分分钟就翻脸，估值和逻辑一起杀，一天暴跌30-，一点都不奇怪。要辨别这些故事，最重要的还是依赖于常识，想清楚究竟应该怎么挣钱，这点很重要。另外一个体现有效市场的地方在于，美股的定价机制在某些方面还是很理智的，对于大多数公司来说，除非有极端的整体偏见，市场可能会会犯错，大部分情况市场都是“正确”的，这也是为什么我更倾向于做，至少在月线级别是多头排列的公司。这算是动能策略的一种，配合估值能够在一定程度保证自己尽量不犯错，有一定的安全边际。而如果你做空头排列的公司，尤其是月线级别的，你要有十足的把握，你的超额收益究竟来源于哪里，是市场不知道，还是你知道市场不知道，还是市场和你都不知道？我见过的大多数喜欢接美股飞刀的人，经常都搞的满身鲜血，很多时候这种公司会爆出进一步恶化的黑天鹅事件。到时候清仓还是持仓都很被动。通过分批买进的，摊低成本的前提是，公司真的具有安全边际，无论是估值上，还是业务逻辑上。美股另外还有个有意思的地方在于，他的投资工具非常丰富，不同品种、不同地域、不同逻辑的ETF都有，最近看有基金准备发一个跟比特币相关的ETF，还蛮有意思的。其他的还有期权、reits等等。有个网站叫-ETFdatebase，可以试试看。这种丰富成熟的市场，让各种天马行空的策略都可以尝试，尤其是在对冲方面。举个简单的例子，之前川普大选，其实从对冲策略上来讲，可以分为三种，第一种是方向性的对冲，最直接的就是做空大盘指数，通过ETF或者期权。大部分可以预见的所谓尾部风险，都可以通过期权的形式，低成本对冲掉。不可预知的，也能用相关ETF品种，长期COVER-敞口大小。不过期权对冲要注意盘前后不能交易，这点比较蛋疼。第二个是资产平衡的方式，美股是个长期走牛的市场，企业的-top-line和button-line决定了长期估值中枢，很多时候，保持更多的现金仓位，本身就是极好的对冲方式。市场恐慌的时候，才有机会用便宜的价格买入好的公司。当然更激进一点的话，可以采取配置部分避险资产去对冲掉一些波动率，甚至还有机会瞎蒙到alpha。第三个是内涵逻辑上的对冲，这个就是研究事件发生后的后续变化，然后布置相关标的，以川普为例，如果川普当选，必然利好军工、能源、金融，这个时候布置军工、能源、金融龙头，即便川普没有当选，那么他的下跌空间也很有限，甚至有可能随着大盘继续涨。但是如果川普当选了，就能得到一波超额收益。同样的道理也适用于做空墨西哥ETF等等。至于期权方面，个人是越用越趋于简单，最喜欢的sell-call其实是个不错的策略，最简单好用，虽然有时候会卖飞，但是可以到期roll-over，我曾经就经历过一个本来一天内到期的盈利sell-call，被活生生的拉到了亏损区间，一怒之下，roll-over了个深度价内期权，结果躲过了一波大跌。SELL-CALL-印象中也是少数几个被养老型共同基金允许的期权策略。唔，零零碎碎的大概想起来一些东西，总之，美股投资最重要的还是了解公司，美股的科技行业经常出现-Game-Changer-的公司，遇到这种好公司只有一句话：好股要握紧。（所以，我今年最大的错误就是卖飞了英伟达，而我在漫长的回调等待中，一等再等，最终决定放弃。人真的很难说服自己认识到自己的错误。T-gt-T-三、「高手篇」－-－0其实我也只是个弱鸡啦这个坑，以后有机会再来填吧。嘤嘤嘤（捂脸逃走－分割线—PS-以上内容主要针对想“入门”美股的，对追求alpha有天然乐趣的投资者。不完全针对想要分享美股市场红利的投资者，这类型的投资者想投海外市场的话，国内有很多QDII基金可以投，或者也可以定投标普500这类的大盘ETF，或者指数增强型组合，类似于smartbeta（国内有些智能投顾公司有尝试做）等等"><a href="#一、「入门篇」1-投资美股，首先需要了解的是，美股市场与A股市场，在市场机制上的不同。美股是世界上最成熟的资本市场，从规则上来说，可以T-0交易，没有10-的涨跌停限制，可以做多以及做空，大部分个股都有期权交易，是一个相当自由的市场。不过，自由的另一面也意味着很多在A股市场存在的现象，在美股没有。比如，壳资源几乎没有价值，公司是会退市的。打新股没有稳定的超额收益，新股是会破发的。脱离基本面的妖股很快会受到市场纠正，因为美股是能做空的。所以，A股投资者，投资美股，要了解美股的做空机制，尽量远离妖股。没有涨跌停的限制，该有什么样的止损意识。还有什么样的飞刀可以接，什么样的飞刀不能接。美国证监会对上市公司采用宽近严出的作风，将公司经营的鉴别交给投资者，对市场舞弊，数据作假、内幕交易采取强力的惩罚措施。所以，从这一点上来说，与国内证监会刻意保护中小投资者的态度有所不同。2-要清楚一些美股市场和券商的基本情况。美股的开盘时间，分为夏令和冬令两个时节，9-30-4-00或者10-30-5-00，中间不像A股，没有午休时间。同时美股盘前和盘后，都有大概4个小时的非常规交易时段，可以交易大部分流动性较好，以及券商支持的股票（期权不行）。非常规交易时段对于美股交易非常重要，一来因为很多公司会在盘前盘后发布季报，二来一些重大事件可以在非常规时段对市场产生影响。一个好的券商，可以尽量多的支持非常规时段交易的品种，同时在做空上面也更容易借到股票。所以选好一个券商也很重要。就国内做美股来说，算是灰色地带，因为目前中国还没有做国外股票市场经纪业务的具体规定，所以很多国际券商，不能在中国从事经纪业务。他们多数采取与国内互联网金融公司合作的形式，底层使用他们的中后台，表层这些互联网金融公司自己设计交互方式（也就是下单软件一类），至于开户都属于UNSOLICATED-CASE。比较知名的IB、嘉维证券、socttrade等，都有和国内的这些互联网金融公司服务，但是就像这些互联网公司提供了翻译、资讯、软件服务一样，佣金也要加收一层，对于中低频交易者来说，相差也不是很大，但在用户体验方面改进却不小。另外一方面，就安全性来说，所有美国知名的券商，都必须要在SIPC-（投资者保护公司），强制投保，最多保障金额50万美金，其中现金占25万。所以，在这个额度内，券商破产的风险几乎不会影响到本金安全。3-要会查询美股的相关资料，如果英文阅读能力强，特别是又懂财务的同学，而且还喜欢投资或者交易的同学。我是建议直接上-SEC-gov-Company-Search-Page-查询公司资料，10K、10Q、424B、13F分别代表什么意思-GOOGLE-一下，如果英文一般般的，也可以多关注新浪美股、雪球这类财经新闻，有很多热心的网友有写很多行业、公司相关的新闻。我自己和朋友有收集一些美股相关的网站-美股维基百科-，里面有我-呕-xian-心-de-沥-wu-血-liao-收集的各类美股信息网站，讲真，就静态信息而言，我感觉自己都仿佛能用四五个网站拼出一个-bloomberg，也有人表示从这个网站里面学到很多东西，我还感觉蛮开心的。这里我推荐几个比较好用的网站吧，a-第一个是-Stock-Market-Insights-Seeking-Alpha-seeking-alpha-最强大的两点，一点是可以读每个季度的电话会议稿，这对你了解公司战略，市场concensus，非常重要。第二点是，可以看他的news，分析个股在每个阶段变化的主要矛盾。b-第二个是FINVIZ-com-Stock-Screener-finviz-估计是美股最强大免费筛选软件，而付费版的精度更细，更好的是他的主页有很多市场统计数据，普通投资者，每天观察下，可以总揽市场走势，有cover的行业或者公司出现变动，可以去考究下背后变动的原因。c-第三个，主要是纯粹为了小白投资服务的两个简单估值软件，一个是https-simplywall-st-NasdaqGS-NVDA-nvidia-close-一个是Discounted-Cash-Flow-Calculator-for-Stock-Valuation这两个网站，分别从multiple-和-DCF-的角度去简单对个股进行估值，如果你不懂估值，可以在网上花几个小时看看简单了解下，以后如果要做个股估值，可以用这两个网站节约不少时间。这个东西的好处是，能够将你的目标公司价格，进行进一步的精确化，这样如果你手上有对行业的洞见或者公司洞见的-alpha，那么这个可以东西弥补一部分金融知识上的缺失。专业一点地话，很多免费的财经网站，yahoo-finance-morning-star-marketwathing都可以找到各样的财务数据，自己做做财务预测也可以。还有些别的网站，查寻其他数据就不一一介绍了，有兴趣可以多逛逛那个美股维基百科那个网站。二、「进阶篇」这部分主要简单讲讲自己对美股市场的感性和理性的认识，大部分来自于长期的市场观察，和一些自己的投资理念。个人做了几年美股，总体来说，美股是一个半强有效的市场，与A股的最大区别在于，虽然他们的流动性都很强。但是美股对公司故事变现时长的容忍度很低，也就是说市场自身的纠错机制非常健全，比如GOPRO的视频社交、REWALK的外骨骼、3D打印行业的C端应用市场。这些故事在初期都能获得极好的估值和溢价，但是一般在2-3个季度内，都不能实质性的增收或者增利表现的话，市场真是分分钟就翻脸，估值和逻辑一起杀，一天暴跌30-，一点都不奇怪。要辨别这些故事，最重要的还是依赖于常识，想清楚究竟应该怎么挣钱，这点很重要。另外一个体现有效市场的地方在于，美股的定价机制在某些方面还是很理智的，对于大多数公司来说，除非有极端的整体偏见，市场可能会会犯错，大部分情况市场都是“正确”的，这也是为什么我更倾向于做，至少在月线级别是多头排列的公司。这算是动能策略的一种，配合估值能够在一定程度保证自己尽量不犯错，有一定的安全边际。而如果你做空头排列的公司，尤其是月线级别的，你要有十足的把握，你的超额收益究竟来源于哪里，是市场不知道，还是你知道市场不知道，还是市场和你都不知道？我见过的大多数喜欢接美股飞刀的人，经常都搞的满身鲜血，很多时候这种公司会爆出进一步恶化的黑天鹅事件。到时候清仓还是持仓都很被动。通过分批买进的，摊低成本的前提是，公司真的具有安全边际，无论是估值上，还是业务逻辑上。美股另外还有个有意思的地方在于，他的投资工具非常丰富，不同品种、不同地域、不同逻辑的ETF都有，最近看有基金准备发一个跟比特币相关的ETF，还蛮有意思的。其他的还有期权、reits等等。有个网站叫-ETFdatebase，可以试试看。这种丰富成熟的市场，让各种天马行空的策略都可以尝试，尤其是在对冲方面。举个简单的例子，之前川普大选，其实从对冲策略上来讲，可以分为三种，第一种是方向性的对冲，最直接的就是做空大盘指数，通过ETF或者期权。大部分可以预见的所谓尾部风险，都可以通过期权的形式，低成本对冲掉。不可预知的，也能用相关ETF品种，长期COVER-敞口大小。不过期权对冲要注意盘前后不能交易，这点比较蛋疼。第二个是资产平衡的方式，美股是个长期走牛的市场，企业的-top-line和button-line决定了长期估值中枢，很多时候，保持更多的现金仓位，本身就是极好的对冲方式。市场恐慌的时候，才有机会用便宜的价格买入好的公司。当然更激进一点的话，可以采取配置部分避险资产去对冲掉一些波动率，甚至还有机会瞎蒙到alpha。第三个是内涵逻辑上的对冲，这个就是研究事件发生后的后续变化，然后布置相关标的，以川普为例，如果川普当选，必然利好军工、能源、金融，这个时候布置军工、能源、金融龙头，即便川普没有当选，那么他的下跌空间也很有限，甚至有可能随着大盘继续涨。但是如果川普当选了，就能得到一波超额收益。同样的道理也适用于做空墨西哥ETF等等。至于期权方面，个人是越用越趋于简单，最喜欢的sell-call其实是个不错的策略，最简单好用，虽然有时候会卖飞，但是可以到期roll-over，我曾经就经历过一个本来一天内到期的盈利sell-call，被活生生的拉到了亏损区间，一怒之下，roll-over了个深度价内期权，结果躲过了一波大跌。SELL-CALL-印象中也是少数几个被养老型共同基金允许的期权策略。唔，零零碎碎的大概想起来一些东西，总之，美股投资最重要的还是了解公司，美股的科技行业经常出现-Game-Changer-的公司，遇到这种好公司只有一句话：好股要握紧。（所以，我今年最大的错误就是卖飞了英伟达，而我在漫长的回调等待中，一等再等，最终决定放弃。人真的很难说服自己认识到自己的错误。T-gt-T-三、「高手篇」－-－0其实我也只是个弱鸡啦这个坑，以后有机会再来填吧。嘤嘤嘤（捂脸逃走－分割线—PS-以上内容主要针对想“入门”美股的，对追求alpha有天然乐趣的投资者。不完全针对想要分享美股市场红利的投资者，这类型的投资者想投海外市场的话，国内有很多QDII基金可以投，或者也可以定投标普500这类的大盘ETF，或者指数增强型组合，类似于smartbeta（国内有些智能投顾公司有尝试做）等等" class="headerlink" title="一、「入门篇」1.投资美股，首先需要了解的是，美股市场与A股市场，在市场机制上的不同。美股是世界上最成熟的资本市场，从规则上来说，可以T+0交易，没有10%的涨跌停限制，可以做多以及做空，大部分个股都有期权交易，是一个相当自由的市场。不过，自由的另一面也意味着很多在A股市场存在的现象，在美股没有。比如，壳资源几乎没有价值，公司是会退市的。打新股没有稳定的超额收益，新股是会破发的。脱离基本面的妖股很快会受到市场纠正，因为美股是能做空的。所以，A股投资者，投资美股，要了解美股的做空机制，尽量远离妖股。没有涨跌停的限制，该有什么样的止损意识。还有什么样的飞刀可以接，什么样的飞刀不能接。美国证监会对上市公司采用宽近严出的作风，将公司经营的鉴别交给投资者，对市场舞弊，数据作假、内幕交易采取强力的惩罚措施。所以，从这一点上来说，与国内证监会刻意保护中小投资者的态度有所不同。2.要清楚一些美股市场和券商的基本情况。美股的开盘时间，分为夏令和冬令两个时节，9.30-4.00或者10.30-5.00，中间不像A股，没有午休时间。同时美股盘前和盘后，都有大概4个小时的非常规交易时段，可以交易大部分流动性较好，以及券商支持的股票（期权不行）。非常规交易时段对于美股交易非常重要，一来因为很多公司会在盘前盘后发布季报，二来一些重大事件可以在非常规时段对市场产生影响。一个好的券商，可以尽量多的支持非常规时段交易的品种，同时在做空上面也更容易借到股票。所以选好一个券商也很重要。就国内做美股来说，算是灰色地带，因为目前中国还没有做国外股票市场经纪业务的具体规定，所以很多国际券商，不能在中国从事经纪业务。他们多数采取与国内互联网金融公司合作的形式，底层使用他们的中后台，表层这些互联网金融公司自己设计交互方式（也就是下单软件一类），至于开户都属于UNSOLICATED CASE。比较知名的IB、嘉维证券、socttrade等，都有和国内的这些互联网金融公司服务，但是就像这些互联网公司提供了翻译、资讯、软件服务一样，佣金也要加收一层，对于中低频交易者来说，相差也不是很大，但在用户体验方面改进却不小。另外一方面，就安全性来说，所有美国知名的券商，都必须要在SIPC （投资者保护公司），强制投保，最多保障金额50万美金，其中现金占25万。所以，在这个额度内，券商破产的风险几乎不会影响到本金安全。3.要会查询美股的相关资料，如果英文阅读能力强，特别是又懂财务的同学，而且还喜欢投资或者交易的同学。我是建议直接上 SEC.gov | Company Search Page 查询公司资料，10K、10Q、424B、13F分别代表什么意思 GOOGLE 一下，如果英文一般般的，也可以多关注新浪美股、雪球这类财经新闻，有很多热心的网友有写很多行业、公司相关的新闻。我自己和朋友有收集一些美股相关的网站 美股维基百科 ，里面有我 呕 (xian) 心 (de) 沥 (wu) 血(liao)收集的各类美股信息网站，讲真，就静态信息而言，我感觉自己都仿佛能用四五个网站拼出一个 bloomberg，也有人表示从这个网站里面学到很多东西，我还感觉蛮开心的。这里我推荐几个比较好用的网站吧，a.第一个是 Stock Market Insights | Seeking Alpha  seeking alpha 最强大的两点，一点是可以读每个季度的电话会议稿，这对你了解公司战略，市场concensus，非常重要。第二点是，可以看他的news，分析个股在每个阶段变化的主要矛盾。b.第二个是FINVIZ.com - Stock Screener finviz 估计是美股最强大免费筛选软件，而付费版的精度更细，更好的是他的主页有很多市场统计数据，普通投资者，每天观察下，可以总揽市场走势，有cover的行业或者公司出现变动，可以去考究下背后变动的原因。c.第三个，主要是纯粹为了小白投资服务的两个简单估值软件，一个是https://simplywall.st/NasdaqGS:NVDA/nvidia#close  一个是Discounted Cash Flow Calculator for Stock Valuation这两个网站，分别从multiple 和 DCF 的角度去简单对个股进行估值，如果你不懂估值，可以在网上花几个小时看看简单了解下，以后如果要做个股估值，可以用这两个网站节约不少时间。这个东西的好处是，能够将你的目标公司价格，进行进一步的精确化，这样如果你手上有对行业的洞见或者公司洞见的 alpha，那么这个可以东西弥补一部分金融知识上的缺失。专业一点地话，很多免费的财经网站，yahoo finance\morning star\marketwathing都可以找到各样的财务数据，自己做做财务预测也可以。还有些别的网站，查寻其他数据就不一一介绍了，有兴趣可以多逛逛那个美股维基百科那个网站。二、「进阶篇」这部分主要简单讲讲自己对美股市场的感性和理性的认识，大部分来自于长期的市场观察，和一些自己的投资理念。个人做了几年美股，总体来说，美股是一个半强有效的市场，与A股的最大区别在于，虽然他们的流动性都很强。但是美股对公司故事变现时长的容忍度很低，也就是说市场自身的纠错机制非常健全，比如GOPRO的视频社交、REWALK的外骨骼、3D打印行业的C端应用市场。这些故事在初期都能获得极好的估值和溢价，但是一般在2-3个季度内，都不能实质性的增收或者增利表现的话，市场真是分分钟就翻脸，估值和逻辑一起杀，一天暴跌30%，一点都不奇怪。要辨别这些故事，最重要的还是依赖于常识，想清楚究竟应该怎么挣钱，这点很重要。另外一个体现有效市场的地方在于，美股的定价机制在某些方面还是很理智的，对于大多数公司来说，除非有极端的整体偏见，市场可能会会犯错，大部分情况市场都是“正确”的，这也是为什么我更倾向于做，至少在月线级别是多头排列的公司。这算是动能策略的一种，配合估值能够在一定程度保证自己尽量不犯错，有一定的安全边际。而如果你做空头排列的公司，尤其是月线级别的，你要有十足的把握，你的超额收益究竟来源于哪里，是市场不知道，还是你知道市场不知道，还是市场和你都不知道？我见过的大多数喜欢接美股飞刀的人，经常都搞的满身鲜血，很多时候这种公司会爆出进一步恶化的黑天鹅事件。到时候清仓还是持仓都很被动。通过分批买进的，摊低成本的前提是，公司真的具有安全边际，无论是估值上，还是业务逻辑上。美股另外还有个有意思的地方在于，他的投资工具非常丰富，不同品种、不同地域、不同逻辑的ETF都有，最近看有基金准备发一个跟比特币相关的ETF，还蛮有意思的。其他的还有期权、reits等等。有个网站叫 ETFdatebase，可以试试看。这种丰富成熟的市场，让各种天马行空的策略都可以尝试，尤其是在对冲方面。举个简单的例子，之前川普大选，其实从对冲策略上来讲，可以分为三种，第一种是方向性的对冲，最直接的就是做空大盘指数，通过ETF或者期权。大部分可以预见的所谓尾部风险，都可以通过期权的形式，低成本对冲掉。不可预知的，也能用相关ETF品种，长期COVER 敞口大小。不过期权对冲要注意盘前后不能交易，这点比较蛋疼。第二个是资产平衡的方式，美股是个长期走牛的市场，企业的 top line和button line决定了长期估值中枢，很多时候，保持更多的现金仓位，本身就是极好的对冲方式。市场恐慌的时候，才有机会用便宜的价格买入好的公司。当然更激进一点的话，可以采取配置部分避险资产去对冲掉一些波动率，甚至还有机会瞎蒙到alpha。第三个是内涵逻辑上的对冲，这个就是研究事件发生后的后续变化，然后布置相关标的，以川普为例，如果川普当选，必然利好军工、能源、金融，这个时候布置军工、能源、金融龙头，即便川普没有当选，那么他的下跌空间也很有限，甚至有可能随着大盘继续涨。但是如果川普当选了，就能得到一波超额收益。同样的道理也适用于做空墨西哥ETF等等。至于期权方面，个人是越用越趋于简单，最喜欢的sell call其实是个不错的策略，最简单好用，虽然有时候会卖飞，但是可以到期roll over，我曾经就经历过一个本来一天内到期的盈利sell call，被活生生的拉到了亏损区间，一怒之下，roll over了个深度价内期权，结果躲过了一波大跌。SELL CALL 印象中也是少数几个被养老型共同基金允许的期权策略。唔，零零碎碎的大概想起来一些东西，总之，美股投资最重要的还是了解公司，美股的科技行业经常出现 Game Changer 的公司，遇到这种好公司只有一句话：好股要握紧。（所以，我今年最大的错误就是卖飞了英伟达，而我在漫长的回调等待中，一等再等，最终决定放弃。人真的很难说服自己认识到自己的错误。T&gt;T ) 三、「高手篇」－ －0其实我也只是个弱鸡啦这个坑，以后有机会再来填吧。嘤嘤嘤（捂脸逃走－分割线—PS.以上内容主要针对想“入门”美股的，对追求alpha有天然乐趣的投资者。不完全针对想要分享美股市场红利的投资者，这类型的投资者想投海外市场的话，国内有很多QDII基金可以投，或者也可以定投标普500这类的大盘ETF，或者指数增强型组合，类似于smartbeta（国内有些智能投顾公司有尝试做）等等"></a>一、「入门篇」<br><br>1.<br>投资美股，首先需要了解的是，美股市场与A股市场，在市场机制上的不同。<br><br>美股是世界上最成熟的资本市场，从规则上来说，可以T+0交易，没有10%的涨跌停限制，可以做多以及做空，大部分个股都有期权交易，是一个相当自由的市场。不过，自由的另一面也意味着很多在A股市场存在的现象，在美股没有。比如，壳资源几乎没有价值，公司是会退市的。打新股没有稳定的超额收益，新股是会破发的。脱离基本面的妖股很快会受到市场纠正，因为美股是能做空的。<br><br>所以，A股投资者，投资美股，要了解美股的做空机制，尽量远离妖股。没有涨跌停的限制，该有什么样的止损意识。还有什么样的飞刀可以接，什么样的飞刀不能接。美国证监会对上市公司采用宽近严出的作风，将公司经营的鉴别交给投资者，对市场舞弊，数据作假、内幕交易采取强力的惩罚措施。所以，从这一点上来说，与国内证监会刻意保护中小投资者的态度有所不同。<br><br>2.<br>要清楚一些美股市场和券商的基本情况。美股的开盘时间，分为夏令和冬令两个时节，9.30-4.00或者10.30-5.00，中间不像A股，没有午休时间。同时美股盘前和盘后，都有大概4个小时的非常规交易时段，可以交易大部分流动性较好，以及券商支持的股票（期权不行）。非常规交易时段对于美股交易非常重要，一来因为很多公司会在盘前盘后发布季报，二来一些重大事件可以在非常规时段对市场产生影响。<br><br>一个好的券商，可以尽量多的支持非常规时段交易的品种，同时在做空上面也更容易借到股票。所以选好一个券商也很重要。就国内做美股来说，算是灰色地带，因为目前中国还没有做国外股票市场经纪业务的具体规定，所以很多国际券商，不能在中国从事经纪业务。他们多数采取与国内互联网金融公司合作的形式，底层使用他们的中后台，表层这些互联网金融公司自己设计交互方式（也就是下单软件一类），至于开户都属于UNSOLICATED CASE。<br><br>比较知名的IB、嘉维证券、socttrade等，都有和国内的这些互联网金融公司服务，但是就像这些互联网公司提供了翻译、资讯、软件服务一样，佣金也要加收一层，对于中低频交易者来说，相差也不是很大，但在用户体验方面改进却不小。另外一方面，就安全性来说，所有美国知名的券商，都必须要在SIPC （投资者保护公司），强制投保，最多保障金额50万美金，其中现金占25万。所以，在这个额度内，券商破产的风险几乎不会影响到本金安全。<br><br>3.<br>要会查询美股的相关资料，如果英文阅读能力强，特别是又懂财务的同学，而且还喜欢投资或者交易的同学。我是建议直接上 <a href="https://link.zhihu.com/?target=https%3A//www.sec.gov/edgar/searchedgar/companysearch.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">SEC.gov | Company Search Page</a> 查询公司资料，10K、10Q、424B、13F分别代表什么意思 GOOGLE 一下，如果英文一般般的，也可以多关注新浪美股、雪球这类财经新闻，有很多热心的网友有写很多行业、公司相关的新闻。<br><br>我自己和朋友有收集一些美股相关的网站 <a href="https://link.zhihu.com/?target=http%3A//www.meiguwiki.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">美股维基百科</a> ，里面有我 呕 (xian) 心 (de) 沥 (wu) 血(liao)收集的各类美股信息网站，讲真，就静态信息而言，我感觉自己都仿佛能用四五个网站拼出一个 bloomberg，也有人表示从这个网站里面学到很多东西，我还感觉蛮开心的。<br><br>这里我推荐几个比较好用的网站吧，a.第一个是 <a href="https://link.zhihu.com/?target=http%3A//seekingalpha.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Stock Market Insights | Seeking Alpha</a>  seeking alpha 最强大的两点，一点是可以读每个季度的电话会议稿，这对你了解公司战略，市场concensus，非常重要。第二点是，可以看他的news，分析个股在每个阶段变化的主要矛盾。<br><br>b.第二个是<a href="https://link.zhihu.com/?target=http%3A//finviz.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">FINVIZ.com - Stock Screener</a> finviz 估计是美股最强大免费筛选软件，而付费版的精度更细，更好的是他的主页有很多市场统计数据，普通投资者，每天观察下，可以总揽市场走势，有cover的行业或者公司出现变动，可以去考究下背后变动的原因。<br><br>c.第三个，主要是纯粹为了小白投资服务的两个简单估值软件，一个是<a href="https://link.zhihu.com/?target=https%3A//simplywall.st/NasdaqGS%3ANVDA/nvidia%23close" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">simplywall.st/NasdaqGS:</span><span class="invisible">NVDA/nvidia#close</span><span class="ellipsis"></span></a>  一个是<a href="https://link.zhihu.com/?target=http%3A//www.moneychimp.com/articles/valuation/dcf.htm" class=" wrap external" target="_blank" rel="nofollow noreferrer">Discounted Cash Flow Calculator for Stock Valuation</a><br>这两个网站，分别从multiple 和 DCF 的角度去简单对个股进行估值，如果你不懂估值，可以在网上花几个小时看看简单了解下，以后如果要做个股估值，可以用这两个网站节约不少时间。这个东西的好处是，能够将你的目标公司价格，进行进一步的精确化，这样如果你手上有对行业的洞见或者公司洞见的 alpha，那么这个可以东西弥补一部分金融知识上的缺失。专业一点地话，很多免费的财经网站，yahoo finance\morning star\marketwathing都可以找到各样的财务数据，自己做做财务预测也可以。<br><br>还有些别的网站，查寻其他数据就不一一介绍了，有兴趣可以多逛逛那个美股维基百科那个网站。<br><br>二、「进阶篇」<br><br>这部分主要简单讲讲自己对美股市场的感性和理性的认识，大部分来自于长期的市场观察，和一些自己的投资理念。<br><br>个人做了几年美股，总体来说，美股是一个半强有效的市场，与A股的最大区别在于，虽然他们的流动性都很强。但是美股对公司故事变现时长的容忍度很低，也就是说市场自身的纠错机制非常健全，比如GOPRO的视频社交、REWALK的外骨骼、3D打印行业的C端应用市场。这些故事在初期都能获得极好的估值和溢价，但是一般在2-3个季度内，都不能实质性的增收或者增利表现的话，市场真是分分钟就翻脸，估值和逻辑一起杀，一天暴跌30%，一点都不奇怪。要辨别这些故事，最重要的还是依赖于常识，想清楚究竟应该怎么挣钱，这点很重要。<br><br>另外一个体现有效市场的地方在于，美股的定价机制在某些方面还是很理智的，对于大多数公司来说，除非有极端的整体偏见，市场可能会会犯错，大部分情况市场都是“正确”的，这也是为什么我更倾向于做，至少在月线级别是多头排列的公司。这算是动能策略的一种，配合估值能够在一定程度保证自己尽量不犯错，有一定的安全边际。而如果你做空头排列的公司，尤其是月线级别的，你要有十足的把握，你的超额收益究竟来源于哪里，是市场不知道，还是你知道市场不知道，还是市场和你都不知道？我见过的大多数喜欢接美股飞刀的人，经常都搞的满身鲜血，很多时候这种公司会爆出进一步恶化的黑天鹅事件。到时候清仓还是持仓都很被动。通过分批买进的，摊低成本的前提是，公司真的具有安全边际，无论是估值上，还是业务逻辑上。<br><br>美股另外还有个有意思的地方在于，他的投资工具非常丰富，不同品种、不同地域、不同逻辑的ETF都有，最近看有基金准备发一个跟比特币相关的ETF，还蛮有意思的。其他的还有期权、reits等等。有个网站叫 ETFdatebase，可以试试看。<br><br>这种丰富成熟的市场，让各种天马行空的策略都可以尝试，尤其是在对冲方面。举个简单的例子，之前川普大选，其实从对冲策略上来讲，可以分为三种，<br><br>第一种是方向性的对冲，最直接的就是做空大盘指数，通过ETF或者期权。大部分可以预见的所谓尾部风险，都可以通过期权的形式，低成本对冲掉。不可预知的，也能用相关ETF品种，长期COVER 敞口大小。不过期权对冲要注意盘前后不能交易，这点比较蛋疼。<br><br>第二个是资产平衡的方式，美股是个长期走牛的市场，企业的 top line和button line决定了长期估值中枢，很多时候，保持更多的现金仓位，本身就是极好的对冲方式。市场恐慌的时候，才有机会用便宜的价格买入好的公司。当然更激进一点的话，可以采取配置部分避险资产去对冲掉一些波动率，甚至还有机会瞎蒙到alpha。<br><br>第三个是内涵逻辑上的对冲，这个就是研究事件发生后的后续变化，然后布置相关标的，以川普为例，如果川普当选，必然利好军工、能源、金融，这个时候布置军工、能源、金融龙头，即便川普没有当选，那么他的下跌空间也很有限，甚至有可能随着大盘继续涨。但是如果川普当选了，就能得到一波超额收益。同样的道理也适用于做空墨西哥ETF等等。<br><br>至于期权方面，个人是越用越趋于简单，最喜欢的sell call其实是个不错的策略，最简单好用，虽然有时候会卖飞，但是可以到期roll over，我曾经就经历过一个本来一天内到期的盈利sell call，被活生生的拉到了亏损区间，一怒之下，roll over了个深度价内期权，结果躲过了一波大跌。SELL CALL 印象中也是少数几个被养老型共同基金允许的期权策略。<br><br>唔，零零碎碎的大概想起来一些东西，总之，美股投资最重要的还是了解公司，美股的科技行业经常出现 Game Changer 的公司，遇到这种好公司只有一句话：好股要握紧。（所以，我今年最大的错误就是卖飞了英伟达，而我在漫长的回调等待中，一等再等，最终决定放弃。人真的很难说服自己认识到自己的错误。T&gt;T ) <br><br>三、「高手篇」<br><br>－ －0<br><br>其实我也只是个弱鸡啦<br><br>这个坑，以后有机会再来填吧。<br><br>嘤嘤嘤（捂脸逃走<br><br>－分割线—<br><br>PS.以上内容主要针对想“入门”美股的，对追求alpha有天然乐趣的投资者。<br><br>不完全针对想要分享美股市场红利的投资者，这类型的投资者想投海外市场的话，国内有很多QDII基金可以投，或者也可以定投标普500这类的大盘ETF，或者指数增强型组合，类似于smartbeta（国内有些智能投顾公司有尝试做）等等</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可转债： convertible bond/debenture/note&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上市公司发行的一种低息债券，在发行的时候，表明了它的利息，期限，支付方式，还同时规定了一个价格。&lt;/li&gt;
&lt;li&gt;转股股价，发行时，确定的转股股价，一般不会改变，但当正股股
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 101</title>
    <link href="http://www.yuliang.xyz/2018/08/19/python-101/"/>
    <id>http://www.yuliang.xyz/2018/08/19/python-101/</id>
    <published>2018-08-19T17:18:52.000Z</published>
    <updated>2018-08-19T22:58:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Coding-conventions"><a href="#Coding-conventions" class="headerlink" title="Coding conventions"></a>Coding conventions</h2><ul><li>Module/package names:  short, all lowercase, underscores only if needed   e.g. imp, sys</li><li>Function names: all lowercase, underscores_for_readability, e.g. foo(), my_func()</li><li>Variable names: all lowercase, underscores_for_readability, e.g. my_var</li><li>Class names: CapitablizeEachWord, e.g. MyClass</li><li>Constant names: ALL_CAPS_WITH_UNDERSCORES, e.g. PI, TAX_RATE</li><li>Indentation: 4 spaces per level</li><li>Comparisons: Don’t compare explicityly to True of False, e.g. if my_var:  if not my_var:</li></ul><h2 id="Built-in-data-types"><a href="#Built-in-data-types" class="headerlink" title="Built-in data types"></a>Built-in data types</h2><p>Python has a number of build-in data types. Varialbes don’t have to be declared and can have any built-in data type.</p><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><ul><li>Integers</li></ul><p>arithmetic operators:<br>(+ addition)<br>(- subtraction)<br>(<em> multiplication)<br>(/ division)<br>(// division with trunction)<br>(*</em> exponentiation)<br>(% modulus)</p><ul><li>Floats</li></ul><p>built-in function <strong>round</strong><br>library module <strong>math.ceil</strong></p><ul><li><p>Complex numbers</p></li><li><p>Booleans<br>True and False, when used with numbers, True is 1 and False is 0</p></li></ul><h3 id="Lists-1-2-3-4-or-1"><a href="#Lists-1-2-3-4-or-1" class="headerlink" title="Lists [1, 2, 3, 4] or [1]"></a>Lists [1, 2, 3, 4] or [1]</h3><p>A list can contain a mixture of other types.<br>A list can be indexed from its front or back. You can also refer to a subsegment, or slice, of a list using slice notation</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>built-in functions:  <strong>len</strong>, <strong>max</strong>, <strong>min</strong><br>operators         : <strong>in</strong> <strong>+</strong> <strong>*</strong>  (+ and * create a new list, leaving the original unchanged)<br>statement         : del<br>list methods      : append, count, extend, index, insert, pop, remove, reverse, sort</p><h3 id="Tuples-1-2-3-4-or-1"><a href="#Tuples-1-2-3-4-or-1" class="headerlink" title="Tuples (1, 2, 3, 4) or (1, )"></a>Tuples (1, 2, 3, 4) or (1, )</h3><p>Tuples are similar to lists but are immutable.</p><p>Operators: in, +, *<br>Built-in functions: len, max, min, count, index<br>Index and slice notition also work the same way as they do on lists.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = (1, 2, 3, 4)</span><br><span class="line">x.index(2)</span><br><span class="line">1</span><br><span class="line">x.count(x)</span><br><span class="line">0</span><br><span class="line">x.count(2)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="Tuples-lt-gt-Lists"><a href="#Tuples-lt-gt-Lists" class="headerlink" title="Tuples &lt;-&gt; Lists"></a>Tuples &lt;-&gt; Lists</h4><p>tuple(x)<br>list(x)</p><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><p>Strings are also immutable<br>in + * len max min operate on strings as they do on lists and tuples</p><p>split()<br><strong>re</strong> library module<br>print()</p><h3 id="Dictionaries-1-“one”-2-“two”"><a href="#Dictionaries-1-“one”-2-“two”" class="headerlink" title="Dictionaries {1: “one”, 2: “two”}"></a>Dictionaries {1: “one”, 2: “two”}</h3><p>Dictionary data type  provides associative array functionality implemented using hash tables.</p><p>built-in functions: len, del, clear, copy, get, has_key, items, keys, update and values</p><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>Membership and uniqueness are teh main things you need to know.<br>create a set by using <strong>set</strong> on a sequence, like a list.<br><strong>in</strong> is used to check for membership on an object in a set.</p><h3 id="File-objects"><a href="#File-objects" class="headerlink" title="File objects"></a>File objects</h3><ul><li>read/write</li><li>chdir</li></ul><h2 id="Control-flow"><a href="#Control-flow" class="headerlink" title="Control flow"></a>Control flow</h2><h3 id="Boolean-values-and-expressions"><a href="#Boolean-values-and-expressions" class="headerlink" title="Boolean values and expressions"></a>Boolean values and expressions</h3><ul><li>Boolean constant <strong>False</strong>, <strong>0</strong></li><li>Python nil value <strong>None</strong></li><li>empty values, like empty list [ ] or empty string “” are False</li><li>Boolean constant True and everything else are considered <strong>True</strong></li></ul><h3 id="The-if-elif-else"><a href="#The-if-elif-else" class="headerlink" title="The if-elif-else"></a>The if-elif-else</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">5</span>:</span><br><span class="line">y = <span class="number">-1</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> x &gt; <span class="number">5</span>:</span><br><span class="line">y = <span class="number">1</span></span><br><span class="line">z = <span class="number">11</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">y = <span class="number">0</span></span><br><span class="line">z = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure><h3 id="The-while-loop"><a href="#The-while-loop" class="headerlink" title="The while loop"></a>The while loop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">u, v, x, y = <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> x &gt; y:</span><br><span class="line">u = u + y</span><br><span class="line">x = x - y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &lt; y + <span class="number">2</span>:</span><br><span class="line">v = v + x</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">v = v + y + <span class="number">2</span></span><br><span class="line">x = x - y <span class="number">-2</span></span><br><span class="line"></span><br><span class="line">print(u, v)</span><br></pre></td></tr></table></figure><h3 id="The-for-loop"><a href="#The-for-loop" class="headerlink" title="The for loop"></a>The for loop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="number">3</span>, <span class="string">"string1"</span>, <span class="number">23</span>, <span class="number">14.0</span>, <span class="string">"string2"</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">70</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> item_list:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, int):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> x % <span class="number">7</span>:</span><br><span class="line">print(<span class="string">"found an integer divisible by sever: %d"</span> % x)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Function-definition"><a href="#Function-definition" class="headerlink" title="Function definition"></a>Function definition</h2><p>return statement:<br>If no returen statement is encountered, Python’s None value is returned</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funct1</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">value = x + <span class="number">2</span>*y + z**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">funct1(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">others:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funct2</span><span class="params">(x, y=<span class="number">1</span>, z=<span class="number">1</span>)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funct3</span><span class="params">(x, y=<span class="number">1</span>, z=<span class="number">1</span>, *tup)</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">funct4</span><span class="params">(x, y=<span class="number">1</span>, z=<span class="number">1</span>, **dictionary)</span></span></span><br></pre></td></tr></table></figure><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p><strong>try-except-finally-else</strong> compound statement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> filename:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = open(file, <span class="string">'r'</span>)</span><br><span class="line">line = f.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line == <span class="string">""</span>:</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">raise</span> EmptyFileError(<span class="string">"%s: is empty"</span> % file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> error:</span><br><span class="line">print(<span class="string">"%s: could not be opened; %s"</span> % (file, error.strerror))</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> EmptyFileError <span class="keyword">as</span> error:</span><br><span class="line">print(error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"%s: %s"</span> % (file, f.readline()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">print(<span class="string">"Done processing"</span>, file)</span><br></pre></td></tr></table></figure><h2 id="Module-creation"><a href="#Module-creation" class="headerlink" title="Module creation"></a>Module creation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File wo.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words_occur</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"some thing"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This allows the program to also be run as a script by typing python wo.py at a command line</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">words_occur()</span><br></pre></td></tr></table></figure><h2 id="Object-oriented-programming"><a href="#Object-oriented-programming" class="headerlink" title="Object-oriented programming"></a>Object-oriented programming</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File sh.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">""" sh module. Contains classes Shape, Square ans Circle"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>:</span></span><br><span class="line">    <span class="string">""" Shape class: has method move """</span></span><br><span class="line">    <span class="comment"># instance variables x and y are created and initialized in __init__</span></span><br><span class="line">    <span class="comment"># first argument is always self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    self.x = x</span><br><span class="line">    self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, deltaX, deltaY)</span>:</span></span><br><span class="line">    self.x = self.x + deltaX</span><br><span class="line">    self.y = self.y + deltaY</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span><span class="params">(Shape)</span>:</span></span><br><span class="line">    <span class="string">""" Square class: inherits from Shape"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init</span><span class="params">(self, side = <span class="number">1</span>, x = <span class="number">0</span>, y = <span class="number">0</span>)</span>:</span></span><br><span class="line">    Shape.__init(self, x, y)</span><br><span class="line">    self.side = side</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span><span class="params">(Shape)</span>:</span></span><br><span class="line">    <span class="string">""" Circle class: inherits from Shap and has method area """</span></span><br><span class="line">    pi = <span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, r=<span class="number">1</span>, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></span><br><span class="line">    Shape.__init__(self, x, y)</span><br><span class="line">    self.radius = r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">""" Circle area method: returns the area of the circle. """</span></span><br><span class="line">    <span class="keyword">return</span> self.radius * self.radius * self.pi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __str__ is used by the print function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Circle of radius %s at coordinates (%d, %d) "</span>\</span><br><span class="line">        % (self.radius, self.x, self.y)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Coding-conventions&quot;&gt;&lt;a href=&quot;#Coding-conventions&quot; class=&quot;headerlink&quot; title=&quot;Coding conventions&quot;&gt;&lt;/a&gt;Coding conventions&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A simple German Grammar Handbook</title>
    <link href="http://www.yuliang.xyz/2018/08/18/learning-german/"/>
    <id>http://www.yuliang.xyz/2018/08/18/learning-german/</id>
    <published>2018-08-18T17:59:26.000Z</published>
    <updated>2019-05-21T05:21:55.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="音素"><a href="#音素" class="headerlink" title="音素"></a>音素</h2><h2 id="词语"><a href="#词语" class="headerlink" title="词语"></a>词语</h2><h2 id="动词的时态"><a href="#动词的时态" class="headerlink" title="动词的时态"></a>动词的时态</h2><p>  动词分成数类， 强变化，弱变化，强弱变化以及不规则变化</p><blockquote><p>强动词和弱动词<br>schwach v.s. stark verb<br><a href="https://www.zhihu.com/question/21701216" target="_blank" rel="noopener">https://www.zhihu.com/question/21701216</a></p></blockquote><p>德语有6个时态：</p><blockquote><p>现在时，过去时，将来时，现在完成时，过去完成时，和第二将来时(将来完成时)</p></blockquote><p>Z.B. Bauen (to build)</p><ul><li>现在时， ich baue</li><li>过去时， ich baute</li><li>将来时， ich werde bauen</li><li>现在完成时， ich habe gebaut</li><li>过去完成时， ich hatte gebaut</li><li><p>第二将来时(将来完成时),  ich werde gebaut … haben</p><h3 id="动词-现在时变位-（规则动词）"><a href="#动词-现在时变位-（规则动词）" class="headerlink" title="动词 - 现在时变位 （规则动词）"></a>动词 - 现在时变位 （规则动词）</h3></li></ul><h3 id="动词-元音会发生变化的现在时变位-（不规则动词）第二，第三人称单数"><a href="#动词-元音会发生变化的现在时变位-（不规则动词）第二，第三人称单数" class="headerlink" title="动词 - 元音会发生变化的现在时变位 （不规则动词）第二，第三人称单数"></a>动词 - 元音会发生变化的现在时变位 （不规则动词）第二，第三人称单数</h3><pre><code>fahren:   ich fahre, du fährst, er/es/sie fährt, wir fahren, ihr fahrt, sie fahrenschlafen:  ich schlafe, du schläfst, er/es/sie schläft, wir schlafen, ihr schlaft, sie schlaftenlaufen:  ich laufe, du läufst, er/es/sie läuft, wir laufen, ihr lauft, sie laufenessen:  ich esse, du isst, er/es/sie isst, wir essen, ihr esst, sie essensehen:  ich sehe, du siehst, er/es/sie sieht, wir sehen, ihr seht, sie sehenlesen:  ich lese, du liest, er/es/sie liest, wir lesen, ihr lest, sie lesengeben:  ich gebe, du gibst, er/es/sie gibt, wir geben, ihr gebt, sie geben</code></pre><h3 id="haben-和-sein"><a href="#haben-和-sein" class="headerlink" title="haben 和 sein"></a>haben 和 sein</h3><h3 id="带前缀带动词：可分动词"><a href="#带前缀带动词：可分动词" class="headerlink" title="带前缀带动词：可分动词"></a>带前缀带动词：可分动词</h3><h3 id="情态动词的含义"><a href="#情态动词的含义" class="headerlink" title="情态动词的含义"></a>情态动词的含义</h3><h3 id="情态动词的现在时"><a href="#情态动词的现在时" class="headerlink" title="情态动词的现在时"></a>情态动词的现在时</h3><pre><code>1. dürfen (to be allowed to)ich darf, du(Sie) darfst, er/es/sie darft, wir dürfen, ihr dürft, sie(Sie) dürfen2. können (to be able to, can)ich kann, du(Sie) kannst, er/es/sie kann, wir können, ihr könnt, sie(Sie) können3. wollen (to want to)ich will, du(Sie) willst, er/es/sie will, wir wollen, ihr wollt, sie(Sie) wollen4. mögen (to like)ich mag, du(Sie) magst, er/es/sie mag, wir mögen, ihr mögt, sie(Sie) mögen5. müssen (must)ich muss, du(Sie) musst, er/es/sie muss, wir müssen, ihr müsst, sie(Sie) müssen6. sollen (to be supposed to, shall)ich soll, du(Sie) sollst, er/es/sie soll, wir sollen, ihr sollt, sie(Sie) sollen</code></pre><p> 注1：mögen 时常不和动词在一起用<br>     Z.B. Er mag seine Arbeit im Hotel.</p><p> 注2：mögen 的虚拟式 möchten(would like)<br>     Z.B. Wir möchten morgen Tennis spielen.</p><pre><code>ich möchte, du möchtest, er/es/sie möchtewir möchten, ihr möchtet, sie möchten</code></pre><p> 注3：动词可省去，如果上下文意思明确<br>     Z.B. Ich muss jetzt in die Vorlesung (gehen).<br>     Z.B. Ich möchte jetzt nach Hause (gehen).<br>     Z.B. Er will das nicht (machen).</p><h3 id="过去：用现在完成时来表示"><a href="#过去：用现在完成时来表示" class="headerlink" title="过去：用现在完成时来表示"></a>过去：用现在完成时来表示</h3><pre><code>现在完成时 （present perfect tense） 表示过去发生的事情1. haben + 过去分词（动词的第二分词）2. sein + 过去分词（动词的第二分词）表示运动和方向Z.B.sein  (ab/weg)fahrensein  aufstehensein  (an/mit)kommensein  (aus/ein)steigensein  (weg)gehensein  (weg/mit)laufensein  (ab)fliegensein  bleibensein  passieren</code></pre><h3 id="过去：haben和sein的过去时"><a href="#过去：haben和sein的过去时" class="headerlink" title="过去：haben和sein的过去时"></a>过去：haben和sein的过去时</h3><p>  haben</p><pre><code>ich hatte, du hattest, er/es/sie hatte, wir hatten, ihr hattet, sie hatten</code></pre><p>  sein</p><pre><code>ich war, du warst, er/es/sie war, wir waren, ihr wart, sie waren</code></pre><h3 id="动词第二分词，-用在完成时表示过去时态"><a href="#动词第二分词，-用在完成时表示过去时态" class="headerlink" title="动词第二分词， 用在完成时表示过去时态"></a>动词第二分词， 用在完成时表示过去时态</h3><h4 id="规则变化"><a href="#规则变化" class="headerlink" title="规则变化"></a>规则变化</h4><ol><li><p>简单动词</p><p>kaufen,    gekauft<br>lernen,    gelernt<br>arbeiten,  gearbeitet<br>fragen,    hat gefragt<br>glaube,    hat geglaubt<br>machen,    hat gemacht<br>haben,     hat gehabt<br>gehören,   hat gehört<br>planen,    hat geplant<br>feiren,    hat gefeiert (to celebrate)<br>heiraten,  hat geheiratet<br>antworten, hat geantwortet<br>lernen,    hat gelernt<br>holen,     hat geholt</p></li></ol><ol><li><p>可分动词</p><p><strong>ein</strong>kaufen   eingekauft<br><strong>ab</strong>holen     abgeholt<br><strong>ab</strong>fahren    abgefahren<br><strong>an</strong>rufen     angerufen<br>mit.bringen  mitgebraucht<br>fern.sehen    fengesehen<br>aus.füllen    ausgefüllt</p></li><li><p>不可分动词</p><p>ver<strong>kau</strong>fen      hat verfauft<br>bez<strong>a</strong>hlen       bezahlt<br>entsch<strong>u</strong>ldigen  hat entschuldigt<br>verm<strong>ie</strong>ten      hat vermietet (to rent)</p></li><li><p>以 ieren 结尾</p><p>passie<strong>ren</strong>      hat pass<strong>ier</strong>t<br>telefonie<strong>ren</strong>   telefon<strong>ier</strong>t<br>gratulie<strong>ren</strong>    hat gratul<strong>ier</strong>t</p></li></ol><h4 id="不规则变化"><a href="#不规则变化" class="headerlink" title="不规则变化"></a>不规则变化</h4><ol><li><p>简单动词</p><p>scheiben  – geschrieben<br>lesen     – gelesen<br>trinken   – getrunken<br>erlauben  – haben erlaubt (to allow, to permit)<br>gefallen  – haben gefallen<br>besuchen  – haben besucht ( to visit, to attend school)<br>erklären  – haben erklärt (to explain)<br>bleiben   – ist geblieben<br>essen     – hat gegessen<br>fahren    – ist gefahren<br>bezahlen  – haben bezahlt (to pay)<br>benutzen  – haben benutzt (to use)<br>gehen     – ist gegangen<br>nehmen    – hat genommen (need)<br>beginnen  – hat begonnen<br>werden    – sein geworden (to become)<br>kennen    – haben gekannt ( to know)<br>wissen    – haben gewusst ( to know fact)<br>geben     – habe gegeben ( to give)<br>kommen    – gekommen<br>erzählen  erzält<br>verstehen  verstanden<br>bezalen   bezahlt<br>vermieten  vermietet<br>bestellen   bestellt<br>verkaufen   verkauft<br>studieren   studiert<br>benutzen    benutzt<br>verdienen  verdient<br>überweisen  überwiesen<br>unterschreiben unterschriebe</p></li></ol><ol><li><p>可分动词</p><p>aufschreiben – auf ge schrieben<br>vorlesen     – vorgelesen ( to read out)<br>ab/weg … fahren – ist ab/weggefahren<br>an/mit … kommen – ist mitgekommen<br>weg .. gehen – ist weggegangen<br>aufstehen    – ist aufgestanden<br>aus/ein … steigen  – ist ausgestiegen<br>abfliegen – ist abgeflogen<br>weg/mit … laufen – ist gelaufen<br>bestellen – haben bestellt ( to order, to deliver)<br>besichtigen – haben besichtigt ( to visit  观光)<br>gehen  – ist gegangen<br>mitbringen – hat mitgebraucht</p></li></ol><ol><li>不可分动词<br>bekommen  – haben/sein bekommen  (to get)<br>verstehen – haben/sein verstanden<br>unterschreiben – unterschrieben<br>wiederholen – haben wiederholt ( to repeat)<br>übertragen – haben übertragen<br>überweisen – haben überweisen ( to transfer money)</li></ol><p>  Z.B. Rudi hat die Rechnung bezahlt.<br>  Z.B. Ich bin gestern schon um drei nach Haus gegangen.</p><h3 id="过去：过去时"><a href="#过去：过去时" class="headerlink" title="过去：过去时"></a>过去：过去时</h3><p>  词干 + t + 人称结尾</p><p>  sagen</p><pre><code>ich sagte, du sagtest, er/es/sie sagte, wir sagten, ihr sagtet, sie sagten</code></pre><p>  können</p><pre><code>ich konnte, du konntest, er/es/sie konnte, wir konnten, ihr konntet, sie konnten</code></pre><p>  kommen</p><pre><code>ich kam, du kamst, er/es/sie kam, wir kamen, ihr kamt, sie kamen</code></pre><p>  geben</p><pre><code>ich gab, du gabst, er/es/sie gab, wir gaben, ihr gabt, sie gaben</code></pre><h3 id="名词和冠词"><a href="#名词和冠词" class="headerlink" title="名词和冠词"></a>名词和冠词</h3><pre><code>德语名词在使用的时需要根据其性，数，格进行变化，而修饰，限定名词的形容词，冠词也需要随之进行变化，成为变格。德语名词和动词的关系主要由格变化来体现。而名词所带的格词尾有限（阳性，中性名词单数第二格，第三格，个别少量弱变化名词除外），所以德语的格词尾主要由其他静词体现，如冠词，形容词。德语有单复数，体现在名词本身，冠词，形容词，代副词的形式上。名词的数可以通过： + 变更词尾 + 变更一个元音（元音变音） + 以上两个同时出现 Baum -&gt; Bäume</code></pre><h3 id="格"><a href="#格" class="headerlink" title="格"></a>格</h3><h3 id="性"><a href="#性" class="headerlink" title="性"></a>性</h3><h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><h3 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h3><h4 id="数：单数和复数"><a href="#数：单数和复数" class="headerlink" title="数：单数和复数"></a>数：单数和复数</h4><h3 id="格："><a href="#格：" class="headerlink" title="格："></a>格：</h3><p>  Nomitive: 表示 subject  主格<br>  Accusative: 表示 direct ojbect  宾格<br>  Dative： 表示 indirect object (wem -&gt; whom/ for whom)  与格<br>  Genetive：  属格</p><p>  德语名词与动词之间的关系主要由格变化体现，但是德语名词本身所带的格词尾<br>  有限，只存在与阳性和中性名词单数的第二格，第三格，个别少量的弱变化名词<br>  除外。所以德语的格词尾主要由其他的静词体现，如冠词、形容词。</p><h4 id="格：第一格和第四格"><a href="#格：第一格和第四格" class="headerlink" title="格：第一格和第四格"></a>格：第一格和第四格</h4><h4 id="格：-第三格-Dative-Case"><a href="#格：-第三格-Dative-Case" class="headerlink" title="格： 第三格 Dative Case"></a>格： 第三格 Dative Case</h4><ol><li><p>The dative case for indirect objects<br>有些动词可以带直接宾语和间接宾语<br>direct object is in accusative case, usually a thing<br>indirect object is in datvie case, usually a person</p></li><li><p>一些动词的例子：<br>empfehlen (empfiehlt)  to recommend<br>geben (gibt) to give<br>schenken to give as a gift<br>schichen to send<br>zeigen  to show</p></li><li><p>在句子中的位置<br>如果accuastive direct ojbect是名词， dative 在 accusative object 前面， e.g. give sb sth<br>如果accusative direct object是人称代词，dative 在 accusative object 后面， e.g. give （it， sth） to sb</p></li><li><p>句子例子<br>Z.B. Michael kauft seiner Freundin  eine Digitalkamera.</p><pre><code>dative           acc     </code></pre><p>Z.B. Der Verkäufer zeigt ihm mehere Kameras.</p><pre><code>dative     acc     </code></pre><p>Z.B. Michael schenkt sie ihr zum Geburtstag.</p><pre><code>acc  dat (阴性代词第三格）</code></pre></li><li><p>一些动词 take an object in the dative case. (通常表示 people)</p><p>danken:<br>Ich danke dir für die Karte. / I thank zou for the card.</p><p>gefallen:<br>Wie gefällt Ihnen dieses Hemd. / How do you like this shirt?</p><p>gehören:<br>Der Mercedes gehört meinem Bruder. / The Mercedes belongs to my brother.</p><p>glauben:<br>Ich glaube dir. / I believe zou</p><p>helfen:<br>Der Verkäufer hilft dem Kunden / The salesperson is helping the customer.</p><p>passen:<br>Größe 48 passt mir bestimmt/ Size 48 will surelz fit me</p><p>schmecken:<br>Das Brot schmeckt mir/ That bread tastes good (to me)</p><p>stehen:<br>Das Kleid steht dir gut/ The dress looks good on you.</p></li><li><p>一些关于 dative 的熟语<br>Wie geht es dir? / How are you?<br>Das tut mir leid. / I am sorry.<br>Das is mir egal. / [I don’t care,?] it is same for me.<br>Das macht mir Spaß. / I like/ enjoy that/<br>Das ist mir zu teuer. /Thats’s too expensive (for me)</p></li></ol><h2 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h2><h3 id="人称代词"><a href="#人称代词" class="headerlink" title="人称代词"></a>人称代词</h3><pre><code>|  Nom.       |  Acc.      |  Dat.         |    Gen.    ||-------------|------------|---------------|------------||   ich       |  mich      |  mir          |   mein     ||   du(Sie)   |  dich(Sie) |  dir(ihnen)   |   dein (Ihr)||   er        |  ihn       |  ihm          |   sein     ||   es        |  es        |  ihm          |   sein     ||   sie       |  sie       |  ihr          |   ihr      ||   wir       |  uns       |  uns          |   unser    ||   ihr       |  euch      |  euch         |   euer     ||   sie(Sie)  |  sie(Sie)  |  ihnen(Ihnen) |   ihr (Ihr)||-------------|------------|---------------|</code></pre><h3 id="物主代词"><a href="#物主代词" class="headerlink" title="物主代词"></a>物主代词</h3><h3 id="指示代词"><a href="#指示代词" class="headerlink" title="指示代词"></a>指示代词</h3><p>  diese, jene（那）, solche（这样的）</p><p>   主格：<br>    阳性 Nom. dieser<br>    中性 Nom. dieses<br>    阴性 Nom. diese<br>    复数 Nom. diese</p><p>   属格：<br>    阳性  dieses<br>    中性  dieses<br>    阴性  dieser<br>    复数  dieser</p><p>   与格：<br>    阳性  diesem<br>    中性  diesem<br>    阴性  dieser<br>    复数  diesen</p><p>   宾格：<br>    阳性  diesen<br>    中性  dieses<br>    阴性  diese<br>    复数  diese</p><pre><code>阳性 Nom. welcher中性 Nom. welches阴性 Nom. welche复数 Nom. welche</code></pre><h3 id="关系代词（见相关section）"><a href="#关系代词（见相关section）" class="headerlink" title="关系代词（见相关section）"></a>关系代词（见相关section）</h3><h3 id="反身代词"><a href="#反身代词" class="headerlink" title="反身代词"></a>反身代词</h3><p>宾格    与格<br>ich    mich    mir<br>du    dich    dir<br>er/sie/es    sich    sich<br>wir    uns    uns<br>ihr    euch    euch<br>sie/Sie    sich    sich</p><h3 id="疑问代词"><a href="#疑问代词" class="headerlink" title="疑问代词"></a>疑问代词</h3><p>  谁 wer, wessen wem, wen 分别针对四个格提问，<br>  哪里 wo<br>  怎样 wie<br>  哪一个 welch<br>  什么 was<br>  对于固定介词搭配的疑问代副词 wo + （r) + 介词<br>  疑问代词可以用来发问，也可以用来引导从句。</p><h3 id="代副词"><a href="#代副词" class="headerlink" title="代副词"></a>代副词</h3><p>  代副词具有代词的作用，但只能指代事物，情况等，不能指代人，分指示代副词<br>及疑问代副词。</p><pre><code>1) 构成：                 指示代副词                   疑问代副词                                   da + 介词                    wo + 介词                 damit                        womit                  dabei                        wobei                 dadurch                      wodurch                  dafuer                       wofuer                 danach                       wonach                 dazu                         wozu                  davor                        wovor                 介词以元音开头，它前面要加r                 darauf                       worauf                  daran                        woran                 daraus                       woraus                 darin                        worin                 darueber                     worueber                 darum                        worum                 注意：hier 和介词连写，也可看做是指示代副词                 hierbei                 hierueber                 hierzu                 hiermit                 hierfuer                 hierzu                 hiervon                   2) 代副词的用法：    2-1) 指示代副词的用法：代替某一句子成分或整个句子         Ich bin davon ueberzeugt, dass ich die Arbeit nicht falsch geschrieben.         我相信，我没写错作业。(代全句)         Er ist in Hamburg eingetroffen. Darin gibt es viele Freunde von ihm.          他到达了汉堡。那儿他有很多朋友。(代句子成分)         Hiermit erhalten Sie unsere Rechnung ...         兹附上我方发票...         注意：有些指示代副词，主要起连词作用，做状语。例如：dabei, damit, dadurch,          dagegen         Dabei ging er sofort ins Zimmer.         同时，他马上走进房间里。      2-2) 指示代副词的用法：         当疑问副词用，对事物或情况提问：         Worueber sprecht ihr?         你们说什么？         当关系带副词用，引导出关系从句         Ein Geschenk, worauf ich mich besonders freue, ist ein Buch         我特别喜欢的礼物是一本书。</code></pre><p>  指示代副词：<br>  指示代副词的构成为da+(r)Präp., </p><p>  疑问代副词：<br>  疑问代副词的构成为wo+(r)Präp.。</p><p>  当代词的第一个字母是元音时，中间需要加r。代副词通常用于指代前句的某一个成分或整句。</p><p>例如：</p><ul><li>Mein Freund hat mir eine Tasche geschenkt? Ich freue mich darüber.</li><li>Wie bitte? Worüber freust du dich?</li></ul><p>代副词后面可以接带zu的不定式结构，例如：</p><p>Ich freue mich darauf, ein Geschenke zu bekommen.</p><p>值得注意的是，代副词不能用在“人”上，例如下面的句子只能用关系代词表达。</p><ul><li>Monika ist nicht gekommen. Ich habe auf sie zwei Stunden gewartet.</li><li>Wie bitte? Auf wen hast du gewartet?</li></ul><h3 id="不定代词-es"><a href="#不定代词-es" class="headerlink" title="不定代词 es"></a>不定代词 es</h3><h3 id="定冠词和不定冠词"><a href="#定冠词和不定冠词" class="headerlink" title="定冠词和不定冠词"></a>定冠词和不定冠词</h3><blockquote><pre><code> Nom.  Acc.   Dat.   Gen.单数阳  der   den    dem    des中  das   das    dem    des阴  die   die    der    der复数   die   die    den    der  Nom.   Acc.   Dat.  Gen.单数阳  ein   einen  einem  eines中  ein   ein    einem  eines阴  eine  eine   einer  einer</code></pre></blockquote><p>  在德语交流中，定冠词 der 通常被使用， 而不是er es sie 人称代词，特别是强调语气<br>  的时候，这时一般放在句首。</p><p>  只有阳性名词可以明确地区分各种情况下的冠词变化，其他两种性需要其他成分，如形容词或者在<br>  句子中分析才能明确。</p><p>Z.B.<br>– Was kostet dieser Computer?<br>– Der ist sehr preisert, nur 600 Euro.<br>– Gut, den kaufe ich.</p><p>Z.B.<br>– Wie findest du die Wohnung von Klaus?<br>– Die finde ich sehr gemütlich (cozy)</p><h3 id="否定冠词"><a href="#否定冠词" class="headerlink" title="否定冠词"></a>否定冠词</h3><pre><code>kein</code></pre><h3 id="物主代词-1"><a href="#物主代词-1" class="headerlink" title="物主代词"></a>物主代词</h3><p>  我的 mein + 阳性名词</p><pre><code>作主格 mein作宾格 meinen作与格 meinem作属格 meines</code></pre><p>  我的 mein + 中性名词</p><pre><code>作主格 mein作宾格 mein作与格 meinem作属格 meines</code></pre><p>  我的 mein + 阴性名词</p><pre><code>作主格 meine作宾格 meine作与格 meiner作属格 meiner</code></pre><p>  我的 mein + 复数名词</p><pre><code>作主格 meine作宾格 meine作与格 meinen作属格 meiner</code></pre><p>  主格：</p><pre><code>阳： mein dein (Ihr) sein sein ihr unser euer ihr (Ihr)中： mein dein (Ihr) sein sein ihr unser euer ihr (Ihr)阴： meine deine (Ihre) seine seine ihre unsere eure ihre (Ihre)复： meine deine (Ihre) seine seine ihre unsere eure ihre (Ihre)</code></pre><p>  宾格;</p><pre><code>阳： meinen deinen (Ihren) seinen seinen ihren unseren euren ihren (Ihren)中： mein dein (Ihr) sein sein ihr unser euer ihr (Ihr)阴： meine deine (Ihr) seine seine ihre unsere eure ihre (Ihre)复： meine deine (Ihr) seine seine ihre unsere eure ihre (Ihre)  </code></pre><p>  与格：</p><pre><code>阳： meinem deinem (Ihrem) seinem seinem ihrem unserem eurem ihrem (Ihrem)中： meinem deinem (Ihrem) seinem seinem ihrem unserem eurem ihrem (Ihrem)阴： meiner deiner (Ihrer) seiner seiner ihrer unserer eurer ihrer (Ihrer)复： meinen deinen (Ihren) seinen seinen ihren unseren euren ihren (Ihren)  </code></pre><p>  属格:</p><pre><code>阳： meines deines (Ihres) seines seines ihres unseres eures ihres (Ihres)中： meines deines (Ihres) seines seines ihres unseres eures ihres (Ihres)阴： meiner deiner (Ihrer) seiner seiner ihrer unserer eurer ihrer (Ihrer)复： meiner deiner (Ihrer) seiner seiner ihrer unserer eurer ihrer (Ihrer)  </code></pre><h3 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h3><p> 形容词用于修饰名词，一般置于名词之前，该名词若有冠词则列于冠词后。德语中大部分形容词不需变化即可直接作「副词」使用，修饰动词。</p><h4 id="名词化形容词"><a href="#名词化形容词" class="headerlink" title="名词化形容词"></a>名词化形容词</h4><p>有些形容词可以名词化，也随之变成名词（首字母如名词大写）。阴性或阳性的名词化形容词一般是人物，如：</p><p>die Gute    好女人<br>der Gute    好男人<br>而中性的名词化形容词一般是抽象概念：</p><p>das Gute 善良</p><h3 id="比较级"><a href="#比较级" class="headerlink" title="比较级"></a>比较级</h3><p>  做定语的不同级形容词后都需要加上变格的词尾，表语则不用，与基础规则相同。例如：</p><p>Ein schönes Wochenende.    一个美好的周末。    Letztes Wochenende war schön.    上周末美好。<br>Ein schöneres Wochenende.    一个更美好的周末。    Nächstes Wochenende wird nicht schöner sein.    下周末不会更美好。<br>Das schönste Wochenende meines Lebens.</p><h2 id="Expressing-Equality"><a href="#Expressing-Equality" class="headerlink" title="Expressing Equality"></a>Expressing Equality</h2><p>Use <strong>so … wie</strong> (as … as) to express equality.<br>Use <strong>nicht so … wie</strong> to express inequality.<br>e.g.</p><p>Das Wetter im Norden ist so schlecht wie im Süden.<br>Im Süden regent es nicht so viel wie im Norden.</p><p>Use <strong>genauso … wie</strong> (just/exactly as) can repalce so to empphasize the point being made.<br>e.g.<br>Österreich ist genauso schön wie die schweiz.</p><p>Adjectives and adverbs have three form: </p><pre><code>1. the basic form (die Grundform)2. the comparative (der Komparativ)3. the superlative (der Superlativ)</code></pre><h1 id="Expressiong-Comaprisons"><a href="#Expressiong-Comaprisons" class="headerlink" title="Expressiong Comaprisons:"></a>Expressiong Comaprisons:</h1><h2 id="Der-Komparativ"><a href="#Der-Komparativ" class="headerlink" title="Der Komparativ:"></a>Der Komparativ:</h2><pre><code>Adding -er to the basic form of the adjective or adverb.</code></pre><p>Note:</p><ul><li><p>Most adjectives of one syllable with the vowel a, o, u have a umlaut in the comparative.</p><p>  groß –&gt; größer<br>  oft  –&gt; öfter<br>  kurz –&gt; kürzer<br>  warm –&gt; wärmer</p></li><li><p>Some adjectives that end in -er or -el will drop the e before <strong>r</strong> and <strong>l</strong>, then add the -er ending.</p><p>  teuer  –&gt; teurer<br>  dunkel –&gt; dunkler</p></li><li><p>A small number of adjectives and adverbs have irregular forms in the comparative.</p><p>  gern –&gt; lieber<br>  e.g. Ich reite gern, aber ich wandere lieber.</p><p>  gut  –&gt; besser<br>  e.g. Gestern war das Wetter gut, aber heute ist es noch besser.</p><p>  hoch –&gt; höher<br>  e.g. </p><p>  viel –&gt; mehr<br>  e.g. Im Sommer regnet es hier nicht viel, im Winter regnet es mehr.</p></li><li><p>The adverb <strong>immer</strong> is used with a <strong>comparative</strong> form to express the notion of “more and more”.<br>  e.g. Das Wetter wird immer besser.<br>  e.g. Die Sommerabende werden immer angenehmer.</p></li><li><p>The conjunction als (than) links the two parts of a comparison.<br>  e.g.<br>  Das Wetter ist besser im Süden asl im Norden.</p><p>  Z.B. Sabid is größer als Ahmed, aber kleiner als Irina und Markus.</p></li></ul><p>The particle <strong>noch</strong> (even) intensifies a comparative.<br>    e.g. Morgen wird es <strong>noch</strong> wärmer.</p><h2 id="Der-Superlativ"><a href="#Der-Superlativ" class="headerlink" title="Der Superlativ:"></a>Der Superlativ:</h2><p>The form of superlative is <strong>am … -sten.</strong></p><p>bequem     –&gt; am bequemsten<br>freundlich –&gt; am freundlichsten<br>schnell    –&gt; am schnellsten</p><p>Note:</p><ul><li><p>Most adjectives of one syllable with the vowel a, o or u in the stem add an umlaut in the superlative.<br>hoch  –&gt; am höchsten<br>lang  –&gt; am längsten</p></li><li><p>Adjectives ending in -s, -ß, -z or -t add -esten to the basic form.<br>heiß  –&gt; am heißesten<br>kurz  –&gt; am kürzesten</p></li><li><p>Some common irregular forms:<br>gern –&gt; am liebsten<br>groß –&gt; am größten<br>gut  –&gt; am besten<br>viel –&gt; am meisten</p><h3 id="名词化形容词-1"><a href="#名词化形容词-1" class="headerlink" title="名词化形容词"></a>名词化形容词</h3></li></ul><h3 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h3><h3 id="变格"><a href="#变格" class="headerlink" title="变格"></a>变格</h3><p>作为定语的形容词在德语中需要变格，而作为表语的形容词与副词形式一样，不需要改变。需要变格的情况又可细分为无冠词还是跟在定冠词、不定冠词之后三种情况。</p><hr><pre><code>1. 定冠词 + 形容词 + 名词              阳                中                阴                  复Nom.  der große  Apfel   das große  Haus   die große  Katze    die großen Äpfel/Katzen/HäuserAcc.  den großen Apfel   das große  Haus   die große  Katze    die großen Äpfel/Katzen/HäuserDat.  dem großen Apfel   dem großen Haus   der großen Katze    den großen Äpfel/Katzen/HäuserGen.  des großen Apfel   des großen Haus   der großen Katze    der großen Äpfel/Katzen/Häuser</code></pre><p>  同理：jeder， dieser，welcher<br>  定冠词（der, die, das）或代词（dieser, jener, solcher, jeder, mancher, alle/er/es）后：</p><hr><pre><code>2. 不定冠词 + 形容词 + 名词             阳                     中                    阴                     复Nom. kein   großer Apfel   kein   großes Haus    keine  große Katze    keine  großen Äpfel/Katzen/Häuser Acc. keinen großen Apfel   kein   großes Haus    keine  große Katze    keine  großen Äpfel/Katzen/HäuserDat. keinem großen Apfel   keinem großen Haus    keiner großen Katze   keinen großen Äpfel/Katzen/HäuserGen. keines großen Apfel   keines großen Haus    keiner großen Katze   keiner großen Äpfel/Katzen/Häuser</code></pre><p>  同理：possessive adj (mein, dein, sein, ihr, unser, euer, ihr)<br>  不定冠词（ein, eine, ein）（一个）、不定代词（kein, keine, kein）（没有），物主代词（mein, dein, sein … ）后的形容词词尾变化</p><hr><pre><code>3. 形容词 + 名词          阳              中            阴              复Nom. großer Apfel   großes Haus   große  Katze   große  Äpfel/Katzen/HäuserAcc. großen Apfel   großes Haus   große  Katze   große  Äpfel/Katzen/HäuserDat. großem Apfel   großem Haus   großer Katze   großen Äpfel/Katzen/HäuserGen. großen Apfel   großen Haus   großer Katze   großer Äpfel/Katzen/Häuser</code></pre><p>  形容词前无冠词或位于无词尾变化的代词（deren, dessen）之后的词尾变化</p><h3 id="不定代词"><a href="#不定代词" class="headerlink" title="不定代词"></a>不定代词</h3><pre><code>allevieleman</code></pre><p>  和英语类似，可做形式主语。<br>  天气不错。 Es ist ein guter Tag.</p><h1 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h1><h2 id="介词和格："><a href="#介词和格：" class="headerlink" title="介词和格："></a>介词和格：</h2><ul><li>介词在句中不能单独使用，总是和名词，代词，形容词连用，构成介词词组，以表示它在句子的中各种相互的关系。</li><li>介词总是支配一个格。</li><li>介词可以按所跟的格来分，也可以按所表示的作用分（时间/地点/方式）</li></ul><h3 id="按格分"><a href="#按格分" class="headerlink" title="按格分"></a>按格分</h3><ol><li>始终支配第四格：<br>gegen - against, around(with time)<br>against: Wir tun etwas gegen den Hunger.<br>around(with time): Es ist gegen fünf Uhr.</li></ol><p>durch - through, across  [durch das -&gt; durchs Zimmer]<br>  Z.B. Herr Krause fährt durch die Stadt.<br>  Z.B. Ich fahre immer durch die Schweiz nach Italien.</p><p>für - for [für das -&gt; fürs Auto]<br>  Z.B. Er braucht ein Geschenk für seine Tochter.</p><p>ohne - without<br>  Z.B. Er geht ohne seine Frau einkaufen.</p><p>um - at (with time) [um das -&gt; ums Haus]<br>  Z.B. Die GeburtstagsFeier beginnt um sechs.<br>  Z.B. Er sucht einen Parkplatz und fährt dreimal um den Marktplatz (herum).</p><p>um (… herum) - around (a place) 当um表示在某地周围转， herum经常加在那个地点后面。</p><p>über -</p><ol><li>始终支配第三格：<br>ab, von, nach, seit, zu, aus, bei, mit, von … bis (表示地点)</li></ol><p>bei dem -&gt; beim<br>von dem -&gt; vom<br>zu dem -&gt; zum<br>zu der -&gt; zur</p><p>aus: from/ out of<br>Z.B. Richard kommt gerade aus dem Haus.<br>Z.B. Alexandra kommt aus Jena.<br>Z.B. Das Hemd ist aus Polyester. (made of)</p><p>bei:<br>near– Die Bäckerei ist beim Marktplatz.<br>at(the place of)– Schickee Blusen gibt es bei Gisie.<br>for, at(a company)– Manfred arbeitet bei VW.<br>with– Sybille wohnt bei ihrer Großmutter.</p><p>mit:<br>with<br>–Herr Schweiger geht mit seiner Frau einkaufen.<br>–Mit einem klick im Internet!</p><p>by(means of)<br>–Wir fahren mit dem Bus.</p><p>nach:<br>to<br>–Der Bus fährt nach Frankfurt.<br>–Ich fahre jetzt nach Hause.<br>after– Nach dem Essen gehen wir einkaufen.</p><p>seit:<br>since<br>–Seit gestern haben wir schönes Wetter.</p><p>–Seit wann lernst du Deutsch?<br>–Seit drei Monaten.</p><p>for(time) 从过去到现在一直进行的动作<br>– Seit einem Monat kauft sie nur noch Bio-Brot.<br>– Ich plane schon（习惯性加上表示强调） seit einem Monat eine Grillparty.</p><p>Von:<br>from<br>– Das Brot ist frisch vom Bäcker.<br>– Frank kommt gerade(just) vom Markt.</p><p>by(original)– Dieses Buch ist von Peter Handke.</p><p>zu:<br>to<br>– Wir gehen heute zum Supermarkt.<br>– Dirk muss schon um fünf Uhr zur Arbeit.</p><p>at– Er ist jetzt wieder(back) zu Hause.</p><p>for– Zum Frühstück gibt es Müsli.</p><p>口诀：<br>Herr <strong>VonNachMitZu</strong> und Frau <strong>AusBeiSeit</strong> bleiben dem Dativ mit.</p><ol><li>可支配第三格或者第四格：（two-way prepostion）, <ul><li>Describe a location for wo questions</li><li>Describe a direction for wohin/woher questions</li></ul></li></ol><p>an: at, near, on<br>an dem -&gt; am<br>an das -&gt; ans</p><p>auf: on, on top of, at</p><p>hinter: behind, in back of</p><p>   Z.B. Das Rathaus ist <strong>hinter der</strong> Kirche. (Dative)</p><p>in: in<br>in dem -&gt; im<br>in das -&gt; ins</p><p>neben: next to</p><p>  Z.B. Die Apotheke ist gleich <strong>neben dem</strong> Supermarket. (Dative)</p><p>über: about, over</p><p>  Z.B. <strong>Über uns</strong> wohnt Familie Brax. (Dative)</p><p>unter: under, beneath, below, among</p><p>  Z.B. <strong>Unter uns</strong> wohnen alte Altuns. (Dative)</p><p>vor: in front of, before</p><pre><code>Z.B. . (Dative)</code></pre><p>zwischen: between</p><ul><li><p>针对Location提问的动词, 跟dative ：<br>hängen: (to be hanging)</p><p>– Wo hängt das Bild?<br>– Es hängt <strong>im</strong> Wohnzimmer.<br>liegen: (to be lying)</p><p>– Wo liegt die Rechnung?<br>– Sie liegt <strong>auf dem</strong> Tisch.</p><p>– Wo liegt das Buch?<br>– Das Bush liegt <strong>auf dem</strong> Tisch.</p><p>sitzen: (to be sitting)</p><p>– Wo sitzen die Studenten?<br>– Sie sitzen <strong>auf einer</strong> Bank im Park.</p><p>– Sitzt du gut <strong>auf dem</strong> stuhl.</p><p>stecken: (to be placed, often where it cann’t be seen)</p><p>– Wo steckt der Schlüssel nur?<br>– Es steckt <strong>in de</strong>r Tür.</p><p>stehen: (to be standing)</p><p>– Wo steht das Motorrad?<br>– Es steht <strong>auf dem</strong> Parkplatz.</p><p>– Wo steht das Fahrrad?<br>– Das Fahrrad steht <strong>am</strong> Baum</p><p>Z.B.<br>– Wo ist er?<br>– Rafik ist <strong>im</strong> Kino.</p><p>Ich bin gern <strong>am Meer</strong> oder <strong>an einem</strong> See.<br>Wohnst du in der Stadt oder <strong>auf dem</strong> Land.<br>Ich warte <strong>vor dem</strong> Kino auf dich.</p></li></ul><ul><li><p>针对方向，运动提问的动词, 跟accusative ：</p><p>hängen: to hang, to put, to place<br>– Wohin hängt der Mann das Bild?<br>– Er hängt es an die Wand.</p><p>legen: to lay, to put, to place<br>– Wohin legt der Kellner die Rechnung?<br>– Er legt sie auf den Tisch.</p><p>setzen: to set, to put, to place<br>– Wohin setzt die Frau das Kind?<br>– Sie setzt es auf den Stuhl.</p><p>stecken: to put, to place (where it cannot be seen)<br>– Wo stecken die Kellnerin das Geld hin?<br>– Sie steckt es in die Tasche.</p><p>stellen: to stand, to put, to place<br>– Wohin stellt die Kellnerin den Teller?<br>– Sie stellt ihn auf den Tisch.</p></li></ul><p>注：setzen的特殊用法：<br>is frequently used with a personal pronoun that reflects the subject of the sentence. 表示sit down.</p><p>Z.B. Ich setze mich an den Tisch. I sit down at the table.<br>Z.B. Wir setzen uns. We sit down.</p><p>第三人称单数人称代词永远是sich<br>Die Studenten setzen sich auf die Bank. The students sit down on the bench.</p><p>其他例子：</p><p>– Wohin stellt sie das Fahrrad?<br>– Sie stellt das Fahrrad an den Baum.</p><p>– Wohin legt er das Buch?<br>– Er legt das Buch auf den Tisch.</p><p>– Wohin geht er?<br>– Rafik geht ins Kino.</p><h3 id="按作用分"><a href="#按作用分" class="headerlink" title="按作用分"></a>按作用分</h3><h4 id="介词：表示时间"><a href="#介词：表示时间" class="headerlink" title="介词：表示时间"></a>介词：表示时间</h4><p>针对提问：什么时候？多长时间？从什么时候开始？到什么时候？在几点？</p><ol><li><p>支配第三格表示时间的介词：<br>an/am<br>in/im<br>vor<br>ab<br>seit<br>zu/zum<br>nach<br>von … bis …</p></li><li><p>支配第四格表示时间的介词：<br>bis<br>für<br>über<br>um</p></li></ol><h4 id="介词：表示地点-lokal（地点-方向）-Ort-Richtung-和情态-modal（方式-Art和方法-Weise）"><a href="#介词：表示地点-lokal（地点-方向）-Ort-Richtung-和情态-modal（方式-Art和方法-Weise）" class="headerlink" title="介词：表示地点 lokal（地点/方向） Ort/Richtung 和情态 modal（方式 Art和方法 Weise）"></a>介词：表示地点 lokal（地点/方向） Ort/Richtung 和情态 modal（方式 Art和方法 Weise）</h4><p>当针对地点提问的时候，询问位置 location 用wo，询问方向 direction 用wohin或者woher</p><ol><li><p>支配第三格的介词：<br>an<br>auf<br>in<br>vor<br>aus<br>bei<br>hinter<br>nach<br>neben<br>unter<br>über<br>zu<br>zwischen</p></li><li><p>支配第四格的介词：<br>aus<br>mit</p></li></ol><h4 id="介词：地点（第三格）方向-（第四格），可支配第三格又可支配第四格的介词"><a href="#介词：地点（第三格）方向-（第四格），可支配第三格又可支配第四格的介词" class="headerlink" title="介词：地点（第三格）方向 （第四格），可支配第三格又可支配第四格的介词"></a>介词：地点（第三格）方向 （第四格），可支配第三格又可支配第四格的介词</h4><ol><li><p>以下two-way介词在表示时间的时候，永远都带 dative case<br>vor drei Tagen: three days ago<br>vor dem Theater: before the party<br>in einer Stunde: in one hour<br>zwischen 5 und 7 Uhr: between 5 and 7 o’clock</p></li><li><p>其他非two-way介词带dative case 表示时间</p></li></ol><ul><li>nach dem Theater: after the party</li><li>Es ist 10 nach 9.</li><li>seit einem Jahr: for a year</li><li>Es ist 5 vor 12.</li><li>(Ich arbeite) von 5 bis 7 Uhr: from 5 to 7 o’clock</li><li>Ab 8 ist das Geschäft geöffnet.</li></ul><ol><li>um 和 gegen总是带accusative case 表示时间<br>bis (um) 5 Uhr: until 5 o’clock<br>Wir haben bis 22 Uhr auf. (shop is open till 22 o’clock)<br>(so) gegen 7 Uhr: around 7 o’clock<br>Um 9 muss ich arbeiten.</li></ol><h2 id="数字，时间，计量单位，重量"><a href="#数字，时间，计量单位，重量" class="headerlink" title="数字，时间，计量单位，重量"></a>数字，时间，计量单位，重量</h2><h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><p>德语主要是靠词型变化，而不是像分析语一样靠语序、虚词来表达清楚一个句子的含义，如汉语。</p><h3 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h3><h3 id="句子的种类和形式"><a href="#句子的种类和形式" class="headerlink" title="句子的种类和形式"></a>句子的种类和形式</h3><h4 id="关系子句"><a href="#关系子句" class="headerlink" title="关系子句"></a>关系子句</h4><p>  在一个句子中排在动词后面的名词基本按照<br>  时间Tempporal –&gt; 间接格/第三格Dative –&gt; 原因Kausal –&gt; 方式/方法Modal –&gt; 宾格/第四格Accusativ –&gt; 地点Lokal 进行排列</p><h3 id="陈述句"><a href="#陈述句" class="headerlink" title="陈述句"></a>陈述句</h3><h3 id="特殊疑问句"><a href="#特殊疑问句" class="headerlink" title="特殊疑问句"></a>特殊疑问句</h3><p>  特殊疑问句是以特殊疑问词开头，对句中某一成分提问的句子。<br>  常用的疑问词有（特殊疑问词）：<br>  what 、who 、whose 、which 、when 、where 、how 、why等</p><p>  疑问代词提问：<br>  The Interrogative Pronoun –&gt; Was für (ein)  == what kind of</p><p>  Nominative:</p><pre><code>  Was für ein Beruf ist das? -- What kind of a profession is that?Was für eine Firma ist das? -- What kind of a firm is that?</code></pre><p>  Accusative:</p><pre><code>  Was für einem Chef hast du? -- What kind of a boss do you have?Was für eine Chefin hast du?Was für Arbeit machst du dort? -- What kind of work do you do there?</code></pre><p>  Dative:</p><pre><code>  In was für einer Firma arbeitest du? -- What kind of a firm do you work for?Mit was für einem Kollegen arbeitest du?-- What kind of a colleague do you work with?Mit was für Kollegen arbeitest du? (复数)    -- What kind of colleagues do you work with?</code></pre><p>  注1： Was für (ein) 后总跟一个名词<br>  注2： 后跟的名词的case 跟他在句中的function有关<br>  注3： noun是复数，则是Was für (没有 ein)</p><h3 id="一般疑问句"><a href="#一般疑问句" class="headerlink" title="一般疑问句"></a>一般疑问句</h3><h3 id="间接疑问句"><a href="#间接疑问句" class="headerlink" title="间接疑问句"></a>间接疑问句</h3><p>  direkte W-Frage  –&gt; indirekte W-Frage (Nebensatz)</p><p>  Wann kommt Peter nach Hause? –&gt; Weißt du, wann Peter nach Hause kommt?<br>  Wo ist der Bahnhof?          –&gt; Können sie mir sagen, wo der Bahnhof ist?<br>  Wann fängt der Film an?</p><h3 id="祈使句"><a href="#祈使句" class="headerlink" title="祈使句"></a>祈使句</h3><ol><li><p>formal:<br>单复数一样： Z.B. machen Sie</p></li><li><p>informal:<br>单数：<br>第二人称单数 du sprichst 去掉人称和词尾 -st， sprich， 没有umlaut</p><p>复数：<br>第二人称复数 ihr übt 去掉人称，übt</p></li></ol><p>  bitte 可以在句前，句中和句后：<br>  doch/mal 跟在祈使语气后</p><p>  Z.B. Kommen Sie doch heute vorbei. (Why don’t you come by today)<br>  Z.B. Rufen Sie mich mal an. (Give me a call sometime./ Why don’t you give me a call somtime.)</p><h3 id="被动语气-passive-void"><a href="#被动语气-passive-void" class="headerlink" title="被动语气 passive void"></a>被动语气 passive void</h3><p>  注重activity，而不是subject that carries out an activity</p><ol><li>用werden + 动词的past participle II<br>werden 的过去时 是 ist … geworden</li><li>如果 worden 出现在句子中，则此句必定是被动语气</li><li><p>被动语气有四个时态：</p><ol><li><p>present<br>Z.B. Die Zeitung wird verkauft. is (being) sold.</p></li><li><p>simple past<br>Z.B. Die Zeitung wurde verkauft. was (being) sold.</p></li><li><p>present perfect (geworden 由 worden代替)<br>Z.B. Die Zeitung ist verkauft worden. has been sold.</p></li><li><p>past perfect (geworden 由 worden代替)<br>Z.B. Die Zeitung war verkauft worden. had been sold.</p></li></ol></li></ol><p>注： werden 三种用法：</p><ol><li>作为独立动词 （to become）</li><li>表示将来时态  werden + infinitive</li><li><p>表示被动语气  werden + participle</p><h3 id="可分动词的句框结构"><a href="#可分动词的句框结构" class="headerlink" title="可分动词的句框结构"></a>可分动词的句框结构</h3></li></ol><h3 id="情态动词的句框结构"><a href="#情态动词的句框结构" class="headerlink" title="情态动词的句框结构"></a>情态动词的句框结构</h3><h3 id="现在完成时的句框结构"><a href="#现在完成时的句框结构" class="headerlink" title="现在完成时的句框结构"></a>现在完成时的句框结构</h3><h3 id="否定语气"><a href="#否定语气" class="headerlink" title="否定语气"></a>否定语气</h3><h3 id="用nicht否定"><a href="#用nicht否定" class="headerlink" title="用nicht否定"></a>用nicht否定</h3><ul><li>在形容词前面放nicht。 Z.B. Die Lampe ist nicht billig.</li><li>nicht 放在句尾，表示否定整个句子。 Z.B. Karin kauft die Lampe nicht.</li><li><p>nicht 放在动词 （adverb） 后否定动词。 Z.B. Ralf tanzt nicht besonders well.</p><h3 id="用kein或keine否定"><a href="#用kein或keine否定" class="headerlink" title="用kein或keine否定"></a>用kein或keine否定</h3></li><li><p>用kein否定带有 ein/e 或者没有任何不定冠词的名词<br>Z.B. – Ist das eine Zeitung? – Das ist keine Zeitung!<br>Z.B. – Hast du Geld? – Nein, ich habe kein Geld.</p></li><li><p>kein的复数形式是keine， akkusative （keine）</p><h3 id="疑问句加nicht还是kein"><a href="#疑问句加nicht还是kein" class="headerlink" title="疑问句加nicht还是kein"></a>疑问句加nicht还是kein</h3><h3 id="回答用ja，nein-还是doch？"><a href="#回答用ja，nein-还是doch？" class="headerlink" title="回答用ja，nein 还是doch？"></a>回答用ja，nein 还是doch？</h3><h3 id="用und，oder，aber，denn-连接句子"><a href="#用und，oder，aber，denn-连接句子" class="headerlink" title="用und，oder，aber，denn 连接句子"></a>用und，oder，aber，denn 连接句子</h3></li></ul><h3 id="动词和动词补足语"><a href="#动词和动词补足语" class="headerlink" title="动词和动词补足语"></a>动词和动词补足语</h3><h2 id="篇章"><a href="#篇章" class="headerlink" title="篇章"></a>篇章</h2><h3 id="篇章中的语法：动词处于中心的位置"><a href="#篇章中的语法：动词处于中心的位置" class="headerlink" title="篇章中的语法：动词处于中心的位置"></a>篇章中的语法：动词处于中心的位置</h3><h3 id="篇章中的代词"><a href="#篇章中的代词" class="headerlink" title="篇章中的代词"></a>篇章中的代词</h3><h2 id="复合句和从句"><a href="#复合句和从句" class="headerlink" title="复合句和从句"></a>复合句和从句</h2><h4 id="并列复合句-Konjunktionen-并列连词"><a href="#并列复合句-Konjunktionen-并列连词" class="headerlink" title="并列复合句 Konjunktionen (并列连词)"></a>并列复合句 Konjunktionen (并列连词)</h4><p>erst   :  At first<br>leider :  unfortunately<br>blad   :  soon</p><p>每个句子的词序互不影响，每个句子可以有独立的词序。</p><ul><li><p>und（并且）<br>Erst muss ich heute arbeiten, und dann gehe ich Tennis spielen.</p></li><li><p>oder（或者）<br>Willst du mit zum Sportplatz, oder willst du zu Hause bleiben?</p></li><li><p>aber（但是）<br>Ich möchte gern Tennis spielen, aber ich muss leider arbeiten.</p></li><li><p>sondern（但是）<br>Ich bleibe nicht zu Hause, sondern ich gehe zum Sportplatz.</p></li></ul><p><strong>aber v.s. sondern</strong><br>如果 nicht 或则 kein 在第一个句子中，而且两个句子中的意思完全相反，则需要用sondern</p><ul><li>denn (因为）<br>Ich möchte zum Sportplatz, denn da gibt es ein Fußballspiel.</li></ul><h4 id="从属复合句-subordinating-conjunctions"><a href="#从属复合句-subordinating-conjunctions" class="headerlink" title="从属复合句(subordinating conjunctions)"></a>从属复合句(subordinating conjunctions)</h4><h5 id="从句-Subjunktionen-从属连词"><a href="#从句-Subjunktionen-从属连词" class="headerlink" title="从句 Subjunktionen (从属连词)"></a>从句 Subjunktionen (从属连词)</h5><ul><li>连接一个 main clause and dependent clause.</li><li>一个主句和一个从句，中间用逗号分开</li><li>Conjugated verb 永远放在从句的最后面，包括可分动词 separable-prefix verb</li></ul><ul><li><p>dass : that</p><ul><li><p>dass 用来表述意见</p><p>ich glaube,  dass mir der Job spaß macht.<br>ich finde,<br>ich denke,<br>ich meine,<br>ich weiß,<br>ich hoffe,<br>ich bin sicher,</p></li><li><p>dass 用来转述</p><p>sie sagt,  dass ihr der Job Spaß macht.<br>sie schreibt,<br>sie hat gesagt,<br>sie hat geschrieben,</p></li></ul></li></ul><pre><code>Ich  hoffe, dass du bald gesund wirst.Er hat gesagt, dass er zu Hause bleiben muss.Ich bin sicher, dass er mitkommt. </code></pre><ul><li><p>ob : whether, if (whehter, if -&gt; to answer YES/NO question)</p><p>  Weißt du, ob Mark krank ist?<br>  Ich weiß nicht, ob er schon zum Arzt gegangen ist.<br>  Ich möchte wissen, ob er zu einer Party geht.</p></li><li><p>weil : because (because -&gt; to answer warum question<br>  Mark bleibt zu Hause, weil er eine Erkältung hat.<br>  Er bleibt zu Hause, weil er eine Erkältung hat.<br>  Ich arheite, weil ich Geld brache.</p></li><li><p>wenn : whenever, if</p><ul><li><p>wenn从句表示condtion， 类似 if<br>Ich gehe ins Fitnessstudio, wenn ich Zeit habe.<br>Ich fahre nach Spaien, wenn ich Geld habe.</p></li><li><p>wenn从句表示时间顺序，类似when<br>Ich mache das Essen, wenn du zu Hause bist.</p></li></ul></li></ul><p>从句在主句前面，则主句由 conjugated verb 开始，然后接主语，再接其他成分</p><ul><li>Z.B. Weil Mark krank war, musste er zu Hause bleiben.</li><li>Z.B. Wenn wir Zeit haben, gehen wir am Wochenende ins Fitnesscenter.</li><li>Z.B. Ob Hans Zeit hat, weiß ich nicht.</li></ul><ol><li>A comma always seperates the main clause from the dependent clause.</li><li>In dependent clauses, the conjugated verb is placed at the end. ??</li><li>If the verb is a separable-prefix verb, the prefix is joined with the rest of the verb.</li><li>If the dependent clause precedes the main clause, the main clause begins with the conjugated verb, followed by the subject.</li></ol><h2 id="疑问代词在从句中的应用"><a href="#疑问代词在从句中的应用" class="headerlink" title="疑问代词在从句中的应用"></a>疑问代词在从句中的应用</h2><p>（Direct Question 改写成 indirect Question）</p><p>  – 用从句改写直接提问 为间接提问<br>  –&gt; Warum kauft Herr Stierli so viel Vitamin B? (Direct Q)<br>  –&gt; Ich weiß nicht, warum Herr Stierli so viel Vitamin B kauft. (Indirect Q)</p><p>  –&gt; Was hat er vor? (Direct Q)<br>  –&gt; Ich möchte wissen, was er vorhat. (Indirect Q)</p><h2 id="YES-NO-问题由-ob-这个conjunction-词开始"><a href="#YES-NO-问题由-ob-这个conjunction-词开始" class="headerlink" title="YES/NO 问题由 ob 这个conjunction 词开始"></a>YES/NO 问题由 ob 这个conjunction 词开始</h2><p>  Z.B.<br>    – Geht er zu einer Party?<br>    – Ich möchte wissen, ob er zu einer Partz geht.</p><h4 id="关系从句（定语从句）表示属性-attribute"><a href="#关系从句（定语从句）表示属性-attribute" class="headerlink" title="关系从句（定语从句）表示属性 attribute"></a>关系从句（定语从句）表示属性 attribute</h4><ol><li>关系从句由关系代词引导。关系从句对主句中的名词进行修饰，提供有关名词的更多信息。</li><li>关系代词基本上和定冠词相同，关系代词的<strong>词性和单复数</strong>由主句中的先行词，(它指代的名词) 决定，<strong>格</strong>由从句中的动词决定，取决于该名词在关系从句中的地位。</li><li>关系代词和介词连用，在从句中受介词支配，介词放在关系代词前面。</li><li>关系从句说明整句的时候，关系代词用was<br>Z.B. Das ist alles, was ich dazu weiß.<br>Z.B. Das Kind, dem ich ein Buch geschenkt habe, ist 5 Jahre alt.<br>Z.B. Endlish kommt der Freund, auf den ich zwei Stunden gewartet habe.</li></ol><blockquote><pre><code>Nom.  Acc.   Dat.   Gen.</code></pre><p>   单数</p><p>   阳  der   den    dem    dess<strong>en</strong><br>   中  das   das    dem    dess<strong>en</strong><br>   阴  die   die    der    der<strong>en</strong><br>   复数<br>      die   die    den<strong>en</strong>    der<strong>en</strong></p></blockquote><h5 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h5><ol><li>主句 + 主句</li><li>主句 + 从句</li><li>关系从句插入主句中</li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><ol><li><p>trainees <strong>who</strong> are 作主语 nominative subject<br>Z.B. Ich wünsche mir <strong>Job</strong>, <strong>der</strong> spaß macht.</p></li><li><p>trainees <strong>whose</strong> background includes 作物主代词, genitive object<br>Z.B. Wir sind <strong>eine Firma</strong>, <strong>deren</strong> Produkte weltbekannt sind.<br>We are a company whose products are known worldwide.</p></li><li><p>作宾语 accusative object<br>Z.B. Wie heißt der junge <strong>Mann</strong>, <strong>den</strong> du gestern kennengelernt hast?</p></li><li><p>trainees <strong>for whom</strong> the sky ist the limit 作宾补 Dative Object<br>Z.B. Sind sie einer von <strong>den Menschen</strong>, <strong>denen</strong> ein sicherer Arbeitsplatz wichtig ist?<br>Are you one of those people, to whom a secure position ist important?</p></li><li><p>prepositional object:<br>Z.B. Informatikerin ist <strong>ein Beruf</strong>, für den ich mich interessiere.<br>Computer scientist is an occupation in which I am interested.</p></li></ol><p>合并两句：<br>句1： Der Job ist interessant.<br>句2： Der Job steht heute in der Zeitung.<br>     Den Job hat mir Herr Knill angeboten. (to offer)</p><p>合并后：</p><ol><li>Der Job, der (der Job) heute in der Zeitung steht, ist interessant.</li><li>Der Job, den (den Job) mir Herr Knill angeboten hat, ist interssant.</li></ol><h2 id="用als，-bis，-bevor-的时间从句"><a href="#用als，-bis，-bevor-的时间从句" class="headerlink" title="用als， bis， bevor 的时间从句"></a>用als， bis， bevor 的时间从句</h2><p>Lisa war schon weg, als(当) inch nach Hause kam.<br>Ich bleibe noch, bis(till) -&gt; die letzte Straßebahn fährt.<br>Wir gehen nicht nach Hause, &lt;- bevor(before) wir die Arbeit feitig haben.</p><h1 id="德语时态"><a href="#德语时态" class="headerlink" title="德语时态"></a>德语时态</h1><h3 id="现在时"><a href="#现在时" class="headerlink" title="现在时"></a>现在时</h3><p>表示过去发生的事情，书面语和口语</p><h3 id="简单过去时-simple-past-tense"><a href="#简单过去时-simple-past-tense" class="headerlink" title="简单过去时 simple past tense"></a>简单过去时 simple past tense</h3><ul><li>gestern</li><li>vorgestern</li></ul><p>动词词干 + 人称结尾</p><blockquote><p>haben,<br>sein,<br>sagen,<br>konnen,<br>kommen,<br>geben</p></blockquote><h4 id="haben-sein-的过去时表达口语化的过去时态"><a href="#haben-sein-的过去时表达口语化的过去时态" class="headerlink" title="haben/sein 的过去时表达口语化的过去时态"></a>haben/sein 的过去时表达口语化的过去时态</h4><p><strong>sein</strong></p><blockquote><p>ich war,   du warst,  er/es/sie war<br>wir waren, ihr wart,  sie waren</p></blockquote><p><strong>haven</strong></p><blockquote><p>ich hatte,  du hattest, er/es/sie hatte<br>wir haben,  ihr hattet, er/es/sie haben</p></blockquote><h3 id="过去完成时"><a href="#过去完成时" class="headerlink" title="过去完成时"></a>过去完成时</h3><p>  haben/sein （简单过去时） + 过去分词</p><h3 id="第一将来时"><a href="#第一将来时" class="headerlink" title="第一将来时"></a>第一将来时</h3><p>  将来时 （future tense）：用 werden + 动词原型 infinitive</p><blockquote><p>ich werde gehen<br>du wirdest gehnen<br>er/es/sie wird gehen<br>wir werden gehne<br>ihr werdet gehen<br>sie werden gehen</p></blockquote><h3 id="第二将来时-将来进行时"><a href="#第二将来时-将来进行时" class="headerlink" title="第二将来时(将来进行时)"></a>第二将来时(将来进行时)</h3><h2 id="日常用语"><a href="#日常用语" class="headerlink" title="日常用语"></a>日常用语</h2><ol><li>Uhrzeit<br>Z.B. um <strong><em>9 Uhr</em></strong></li></ol><blockquote><p>Es ist halb zwei.<br>Es ist 10 Uhr.<br>Es is Viertel vor sechs.<br>Es is fünf nach acht.<br>Das Geschäft öffnet um 9 Uhr.</p></blockquote><p>一天内的时间：<br>der Morgen, morgens<br>der Vormittag, vormittags<br>der Mittag, mittags<br>der Nachmittag, nachmittags<br>die Nacht, nachts<br>der Abend, abends</p><ol><li>Datum und Monate<br>Z.B. am <strong><em>5. April 1957</em></strong> geboren</li></ol><blockquote><p>der Januar<br>der Februar<br>der März<br>der April<br>der Mai<br>der Juni<br>der Juli<br>der August<br>der September<br>der Oktober<br>der November<br>der Dezember</p></blockquote><ol><li>Wochentage 星期：<br>Z.B. am <strong><em>Wochenende</em></strong> </li></ol><blockquote><p>der Montag, montags<br>der Dienstag, dienstags<br>der Mittwoch, mittwochs<br>der Donnerstag, donnerstags<br>der Freitag, freitags<br>der Samstag, samstags<br>der Sonntag, sonntags</p></blockquote><p>时间：<br>vorgestern — gestern — heute — morgen — übermorgen</p><p>小时，日，周，月：<br>stündlich, täglich, wöchentlich, monatlich</p><p>重要节日：<br>Weihnachten<br>Silvester<br>Neujahr<br>Ostern</p><p>表示程度：<br>少 nie —&gt; selten —&gt; manchmal —&gt; meistens —&gt; oft —&gt; immer</p><p>表示时间线：<br>首先 zuerst<br>最后 zuletzt</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;音素&quot;&gt;&lt;a href=&quot;#音素&quot; class=&quot;headerlink&quot; title=&quot;音素&quot;&gt;&lt;/a&gt;音素&lt;/h2&gt;&lt;h2 id=&quot;词语&quot;&gt;&lt;a href=&quot;#词语&quot; class=&quot;headerlink&quot; title=&quot;词语&quot;&gt;&lt;/a&gt;词语&lt;/h2&gt;&lt;h2 id
      
    
    </summary>
    
    
      <category term="german" scheme="http://www.yuliang.xyz/tags/german/"/>
    
  </entry>
  
  <entry>
    <title>How To Test</title>
    <link href="http://www.yuliang.xyz/2018/07/05/how-to-test/"/>
    <id>http://www.yuliang.xyz/2018/07/05/how-to-test/</id>
    <published>2018-07-05T23:56:26.000Z</published>
    <updated>2019-02-03T20:17:37.379Z</updated>
    
    <content type="html"><![CDATA[<p>面试一般分四类：<br>(1) Test a real world object, like a pen<br>(2) Test a peice of software<br>(3) Write test code for a function<br>(4) Troubleshoot an existing issue</p><h2 id="Test-a-real-world-object-like-a-pen"><a href="#Test-a-real-world-object-like-a-pen" class="headerlink" title="Test a real world object (like a pen)"></a>Test a real world object (like a pen)</h2><p><strong>Question: How would you test a paperclip?</strong></p><ul><li><p>Step 1: Who will use it? and why?<br>e.g. by teachers, to hold papers together<br>e.g. by artists, to bend into the shape of animal</p></li><li><p>Step 2: What are the use cases?<br>It will be useful for you to make a list of the use cases.<br>e.g. fastening paper together in a non-damaging (to the paper) way.</p></li><li><p>Step 3: What are the bounds of use?</p></li></ul><p>e.g. holding up to thirty sheets of paper in a single usage without permanent damage (bending) and thirty to fifty sheets with minimal permanent bending.<br>e.g. The bounds also extend to environmental factors, should the paperclip work during very warm temperatures? What about extreme cold?</p><ul><li>Step 4: What are the stress/failures conditions?<br>Analyzing failure conditions needs to be part of your testing. Need to discuss with interviewer about when it’s acceptable or even neccessary for the product to fail, and what failure should mean.</li></ul><p>e.g. testing the laundary machine, might decide the machine should handle at least 30 shirts or pants.<br>loading 30-45 pieces of clothing may result in minor failure, such as the clothing being inadequately cleaned.<br>at more than 45 pieces of clothing, extreme failure might be acceptable. (means the machine never turn on the water, not flood or a fire)</p><ul><li>Step 5: How would you perform the testing?</li></ul><p>e.g. a chair can withstand normal usage for five years, define “normal usage” as how many “sits” per year on the seat? In addition to doing some manual testing, you would likely want a machine to automate some of the usage.</p><h2 id="Test-a-piece-of-software"><a href="#Test-a-piece-of-software" class="headerlink" title="Test a piece of software"></a>Test a piece of software</h2><p><strong>Manual V.S. Automated Testing</strong></p><p>In an ideal world, we might love to automate everything, but that’s rarely feasible. Computer can generally recognize only issues that it’s been told to look for. Human observation may reveal new issues that havn’t been specifically examined.</p><p><strong>Black Box Testing V.S. White Box Testing</strong></p><p>This referes to the degree of access we have into the software.<br>In black box testing, we’re just given the software as-is and need to test it. With white box testing, we have additional programmatic access to test individual functions.</p><ul><li><p>Step 1: Are we doing Black Box Testing or White Box Testing?<br>Check with your interviewer first.</p></li><li><p>Step 2: Who will use it? And why?<br>Software typically has one or more target users, and the features are designed with this in mind.</p></li></ul><p>e.g. parental controls on a web browser, target users include<br>both parents (who are implementing the blocking)<br>and children (who are the recipients of blocking)<br>and guests (who should neither be implementing nor receiving blocking)</p><p><strong>Step3 and Step4</strong> should define the use cases.</p><ul><li>Step 3: What are the user cases?<br>e.g. use cases of the parents include<br>  installing the software<br>  updating controls<br>  removing controls<br>  their own personal internet usage</li></ul><p>need to discuss with your interviewer.</p><ul><li>Step 4: What are the bounds of use?</li></ul><p>figure out what exactly this means.<br>e.g. what does it mean for a website to be blocked?<br>– should just the “illegal” page be blocked<br>– or either the entire website?<br>– is the application supposed to “learn” what is bad content,<br>– or is it based on a white list or black list?<br>– if it is supposed to learn what inappropriate content is, what degree of false positives or false negatives is acceptable?</p><ul><li>Step 5: What are the stress conditions / failure conditions?<br>– when software fails – what should the failure look like ?<br>e.g. it should not crash the computer, instead, it’s likely that the software should just permit a blocked site, or ban an allowable site</li></ul><p><strong>Step 6 define the cases from 3 and 4, like how to perform the testing</strong><br><strong>what exact situations are you testing</strong><br><strong>Which of these steps can be automated?</strong><br><strong>which require human intervention</strong></p><ul><li>Step 6: What are the test cases? How would you perform the testing?<br>pay attention to the manual test or automated testing, black box and white box testing.</li></ul><h2 id="Write-test-code-for-a-function"><a href="#Write-test-code-for-a-function" class="headerlink" title="Write test code for a function"></a>Write test code for a function</h2><ul><li>Validating input and output</li><li><p>Discuss any assumptions with your interviewer, particularly with respect<br>to how to specific situations.</p></li><li><p>拿出一个栗子：<br>Test function sort(int[] array) :</p></li></ul><p>Step 1: Define the test cases</p><ul><li><p>normal cases:<br>due to partitioning, input array might has odd or even numbers</p></li><li><p>extreme cases:<br>empty array, small array, large array</p></li><li><p>nulls and “illegal” input:<br>negative input</p></li><li><p>strange<br>passed an array already sorted<br>array sorted in reversed order</p></li></ul><p>Step 2: Define the expected result</p><ul><li>the right output</li><li>the original array is not changed, if return a copy of the array</li></ul><p>Step 3: Write the test code</p><ul><li>some Junit code</li></ul><h2 id="Troubleshoot-an-existing-issue"><a href="#Troubleshoot-an-existing-issue" class="headerlink" title="Troubleshoot an existing issue"></a>Troubleshoot an existing issue</h2><p>How would you debug or troubleshoot an existing issue.<br>E.g. You are working on the Google Chrome tesam when you receive a bug report:<br>Chrome crashes on lauch. What would you do?</p><p><strong>Approach these questions in a structured manner.</strong></p><p>Step 1: Understand the Scenario<br>Ask questions to understand as much about the situation as possible</p><ul><li>How long has the user been experiencing this issue?</li><li>What version of the browser is it? what is the operating system/</li><li>Does the issue happen consistently, or how often does it happen? When does it happen?</li><li>Is there an error report that launches?</li></ul><p>Step 2: Break down the problem<br>Break down the problem into testable units.</p><ol><li>Go to Windows Start menu</li><li>Click on Chrome icon</li><li>Browser instance starts</li><li>Browser loads settings</li><li>Browser issues HTTP request for homepage</li><li>Browser gets HTTP response</li><li>Browser parses webpage</li><li>Browser displays content</li></ol><p>Step 3: Create specific, Manageable tests<br>Give the customers instructions that they can or will do</p><h2 id="符合要求的QA有下列标准："><a href="#符合要求的QA有下列标准：" class="headerlink" title="符合要求的QA有下列标准："></a>符合要求的QA有下列标准：</h2><p>(show you are a structured, methodical person)<br>Demonstrating these aspects will show that you will be a valuable member of the testing team.</p><ol><li>需要能够提出 a reasonable list of test cases</li><li>需要有一个 Big Picture Understanding</li><li>Understand hwo the pieces fit together</li><li>Organization</li><li>Practicality</li></ol><h3 id="1-Come-up-with-a-reasonable-list-of-test-cases"><a href="#1-Come-up-with-a-reasonable-list-of-test-cases" class="headerlink" title="1.Come up with a reasonable list of test cases"></a>1.Come up with a reasonable list of test cases</h3><h3 id="2-Big-picture-understanding"><a href="#2-Big-picture-understanding" class="headerlink" title="2.Big picture understanding"></a>2.Big picture understanding</h3><ul><li>understand what the software is really about</li><li>prioritize test cases properly</li></ul><p>e.g. At Amazon<br>  payments work reliably<br>  products are added to the sipment queue<br>  customers are never double charged</p><p>are <strong>more important</strong> than </p><p>  product images appear in the right place.<br>  although this is also very important.</p><h3 id="3-Knowing-how-the-pieces-fit-togehter"><a href="#3-Knowing-how-the-pieces-fit-togehter" class="headerlink" title="3.Knowing how the pieces fit togehter"></a>3.Knowing how the pieces fit togehter</h3><ul><li>Do you understand hwo software works</li><li>How it might fit into a greater ecosystem?</li></ul><p>e.g. Test Google Spreedsheets<br>  Besides test opening, saving, and editing documents.</p><p>  you need to test integration with Gmail, with plug-ins<br>  and other components because it is part of a larger<br>  ecosystem.</p><h3 id="4-Organization"><a href="#4-Organization" class="headerlink" title="4.Organization"></a>4.Organization</h3><ul><li>Do you approach the problem in a structured manner? </li><li>Do you just spout off anything that comes to your head?</li></ul><p>e.g. Test the camera<br>    The structured approach will help you to do a more thorough<br>    job creating the test cases.</p><pre><code>Good thinking: break down the parts into categories like Taking Photos, Image Management, Settings, and so on.Bad thinking: when asked to come up with test cases for a camera, will just state anything and everything that comes to their head.</code></pre><h3 id="5-Practicality"><a href="#5-Practicality" class="headerlink" title="5.Practicality"></a>5.Practicality</h3><p>Your testing plans need to be feasible and realistic for a company to implement</p><h2 id="Some-Questions"><a href="#Some-Questions" class="headerlink" title="Some Questions"></a>Some Questions</h2><p>12.1 Find the mistakes in the following code:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br></pre></td></tr></table></figure></p><p>12.2 You are given the source to an application which crashes when it is run. After running it<br>ten times in a debugger, you find it never crashes in the same place. The application is single<br>threaded, and uses only the C standard library. What programming errors could be causing this crash?<br>How would you test each one?</p><p>12.3 We have the following method used in a chess game:<br>boolean canMoveTo(int x, int y).<br>This method is part of the Piece class and returns whether or not the piece can move to position(x, y).<br>Explain how you would test this method.</p><p>12.4 How would you load test a webpage without using any test tools?</p><p>12.5 How would you test a pen?</p><p>12.6 How would you test an ATM in a distributed banking system?</p><p>&lt;<ibm 从菜鸟到测试架构师="">&gt; 读书笔记</ibm></p><ul><li>构建测试</li><li>安装测试</li><li>单元测试</li><li><p>黑盒测试</p><ul><li>功能模块分解测试</li><li>回归测试</li><li>客户化环境测试</li><li>随机测试</li><li>可访问性测试</li><li>全球化测试</li></ul></li><li><p>白盒测试</p></li><li>性能测试</li><li>迁移测试</li><li>成品测试</li><li>补丁测试</li></ul><ul><li>自动化测试</li><li>敏捷测试</li></ul><p>总结时间都花在哪里， Bug 都出在哪里<br>尽量narrow down 出问题的那一块</p><p><a href="">Cracking the coding interview, chapter 12</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs.html" target="_blank" rel="noopener">How to Report Bugs Effecitively</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面试一般分四类：&lt;br&gt;(1) Test a real world object, like a pen&lt;br&gt;(2) Test a peice of software&lt;br&gt;(3) Write test code for a function&lt;br&gt;(4) Trouble
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Networking TCP/UDP Sockets</title>
    <link href="http://www.yuliang.xyz/2018/06/24/networking-socket/"/>
    <id>http://www.yuliang.xyz/2018/06/24/networking-socket/</id>
    <published>2018-06-24T19:28:11.000Z</published>
    <updated>2019-03-25T04:32:50.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-握手机制-–-3次握手"><a href="#TCP-握手机制-–-3次握手" class="headerlink" title="TCP 握手机制 –  3次握手"></a>TCP 握手机制 –  3次握手</h2><ol><li><p>第一次握手，报文1<br>客户端发送一个报文段到到服务器带有SYN标志，将SYN位置设置为1， sequence number 设置为 x， 然后客户端进入 SYN_SEND 状态，等待服务器确认。</p></li><li><p>第二次握手，报文2<br>服务器端收到SYN报文段，对这个SYN报文段进行确认，设置acknowledge number 为 x + 1， 同时自己还要发送一个SYN 请求信息，将SYN位置设置为1， sequence<br>number设置为Y。服务器将这个SYN + ACK报文段一起发送给服务器端，此时服务器进入 SYN_RECV状态。（SYN_RECV状态很短，基本上用netstat很难看到）</p></li><li><p>第三次握手，报文3<br>客户端收到服务器端端SYN+ACK报文段，然后将acknowledge number设置为 y + 1，向服务器发送Ack报文段。之后，服务器端和客户端都进入Established状态。</p></li></ol><h4 id="为什么需要三次握手"><a href="#为什么需要三次握手" class="headerlink" title="为什么需要三次握手"></a>为什么需要三次握手</h4><p>“网络中存在延迟的重复分组”或者“为了防止已尽失效的连接请求报文段”突然又传送到了服务器端，因而产生错误。</p><p><strong>已尽失效的连接请求报文段 产生的情况，以及如果只有2次挥手会有什么后果：</strong></p><p>Client发出的第一个连接请求报文段并没有丢失，而是在某个网络节点长时间滞留了，以至延误到TCP连接释放后的某个时间才到达Server。这个本来是一个失效的报文段，但是server收到后，就误认为是Client再次发出的新的连接请求，于是就向client发出确认报文段，同意建立连接。但是事实上，Client并没有发出新的连接请求，因此不会理睬server的确认报文段，也不会向server发送数据。但是server却认为新的连接已经建立，并一直等待client发来数据，这样，server的很多资源就白白的浪费掉。</p><p>采用三次握手后，Client不会向server发出的这个报文段（含SYN和ACK）发回ACK，Server由于收不到Ack，就知道<br>Client此时并没有发出这个新的要求建立连接的请求，从而防止server端一直等待，浪费资源。</p><h2 id="TCP-握手机制-连接终止协议-–-4次挥手"><a href="#TCP-握手机制-连接终止协议-–-4次挥手" class="headerlink" title="TCP 握手机制 连接终止协议 – 4次挥手"></a>TCP 握手机制 连接终止协议 – 4次挥手</h2><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。 这原则是当一方完成它的数据发送任务后就能发送一个<br>FIN来终止这个方向的连接。收到一个FIN 只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个 FIN 后仍<br>能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><ol><li><p>第一次挥手<br>主机1，<br>设置 sequence number和acknowledge number，<br>向主机2发送一个 FIN 报文段，<br>此时，主机1 进入 FIN_WAIT_1 状态，<br>这表示主机1没有数据要发送给主机2</p></li><li><p>第二次挥手<br>主机2，<br>收到主机1发送到 FIN 报文段，<br>向主机1 回一个 ACK 报文段， Acknowledge Number 设置为 Sequence Number 加 1，<br>主机1 进入 FIN_WAIT_2 状态，<br>这表示主机2同意主机1点关闭请求</p></li><li><p>第三次挥手<br>主机2，<br>向主机1 发送 FIN 报文段，请求关闭连接，<br>同时主机2 进入 LAST_ACK 状态。</p></li><li><p>第四次挥手<br>主机1<br>收到主机2发送到 FIN 报文段，<br>向主机2 发送 ACK 报文段，<br>然后主机1 进入 TIME_WAIT状态，<br>主机2 收到 主机1的 ACK报文段后，就关闭连接。<br>此时，主机1 等待 2 MSL后依然没有收到回复，<br>这证明 Server 端正常关闭，则主机1 也可以关闭连接。</p></li></ol><ul><li>MSL: Maximum Segment Lifetime, is the time a TCP segment can exist in the internnet work systems.</li></ul><h4 id="TCP-连接异常终止分析"><a href="#TCP-连接异常终止分析" class="headerlink" title="TCP 连接异常终止分析"></a>TCP 连接异常终止分析</h4><p>有一种能够释放 TCP 连接的机制，是TCP的reset 报文。TCP正常释放连接通过四次挥手完成，下面列出某种异常情况，使得TCP连接释放失败，<br>从而继续占用系统的部分资源。</p><ol><li>客户端尝试与服务器未对外提供服务的端口建立TCP连接，服务器将会直接向客户端发送reset报文</li><li>客户端和服务器的某一方在交互的过程中发生异常（如程序崩溃），该方系统将向对方发送TCP reset报文，告知对方释放相关的TCP连接</li><li>接收端收到TCP报文，但是发现该TCP的报文，并不在其已经建立的TCP连接表里，则直接向对方发送reset报文</li><li>在交互的双方的某一方长期未收到来自对方的确认报文，则其在超出一定的重传次数或者时间后，会主动向对方端口发送reset报文，释放该TCP连接</li><li>有些应用开发者在设计应用系统的时候，会利用reset报文快速释放已经完成的数据交互的TCP连接，以提高业务交互的效率</li></ol><p>Reset报文的利用</p><ol><li>安全设备利用reset报文阻断异常连接</li><li>利用reset报文实施攻击，<tcp会话劫持></tcp会话劫持></li></ol><h2 id="TCP-优化"><a href="#TCP-优化" class="headerlink" title="TCP 优化"></a>TCP 优化</h2><p><a href="https://huoding.com/2013/11/21/299" target="_blank" rel="noopener">High Performance Brower Networking by llya Grigorik</a></p><p>Keywords:<br>Flow Control, Slow Start, BDP ( Bandwidth-delay Product), RWND (Receiver Window)</p><ol><li>Flow Control<br>问题: 传输数据的时候，如果发送方传输的数据量超过了接收方的处理能力，那么接受方会出现丢包。<br>解决方法： 数据传输双方在交互时候声明各自的接受窗口的大小，【rwnd】 用来表示自己最大能够保存多少数据，这主要是针对接受方而言，<br>如果窗口衰减到零，还继续发包，则会发生丢包。</li></ol><ol><li>Slow Start<br>虽然流量控制可以避免发送方过载接受方，却无法避免网络过载。因为接受窗口，只反应了服务器个体的情况，却无法反映网络整体的情况。</li></ol><ul><li><p>拥塞窗口 [cwnd]：用来表示发送方在得到接受方确认前，最大运行传输的未经确认的数据</p></li><li><p>[cwnd] 和 [rwnd] 不同： 发送方的一个内部参数，无需通知接受方。其初始值比较小，然后随着数据包被接受方确认，窗口成倍增大。</p></li></ul><p>在慢启动的过程中，随着[cwnd] 的增加，可能会出现网络过载，其外在表现就是丢包。一旦出现，[cwnd] 的大小会迅速衰减，以便网络能够缓过来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TCP-握手机制-–-3次握手&quot;&gt;&lt;a href=&quot;#TCP-握手机制-–-3次握手&quot; class=&quot;headerlink&quot; title=&quot;TCP 握手机制 –  3次握手&quot;&gt;&lt;/a&gt;TCP 握手机制 –  3次握手&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一次握手，报
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C 语言再复习 -- 储存类型关键字</title>
    <link href="http://www.yuliang.xyz/2018/06/23/c-storage-class-keywords/"/>
    <id>http://www.yuliang.xyz/2018/06/23/c-storage-class-keywords/</id>
    <published>2018-06-24T01:09:52.000Z</published>
    <updated>2018-06-24T02:49:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>C 语言有5个存储类说明符的关键字</p><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>auto 在C语言中只有修饰局部变量这一个作用。表示这个局部变量是自动局部变量，自动局部变量分配在栈上，如果没有<br>初始化，则值是随机的。</p><p>局部变量默认是auto的，可写可不写。但是若省去数据类型，默认是int类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAutoKeyword</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">// the same as int a = 10;</span></span><br><span class="line">    <span class="keyword">auto</span> b = <span class="number">9</span>; <span class="comment">// default type is int</span></span><br><span class="line">    <span class="keyword">auto</span> c; <span class="comment">// not initialized , value is random</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof (b) = %d\n"</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>在C语言中register修饰的变量表示此变量存储在CPU的寄存器中。</p><ul><li>用register修饰的变量只能是局部变量，不能是全局变量。CPU的寄存器资源有限，因此<br>不可能让一个变量一直占着CPU寄存器</li><li>register变量一定要是CPU可以接受的值</li><li>不可以用&amp;运算符堆register变量进行取值，因为&amp;是对内存上的变量有用，而register变量<br>在CPU上，不起作用</li><li>register只是请求寄存器变量，不一定会被满足。由C编译环境决定，所以这个register变量<br>仅仅是暗示不是命令</li></ul><p>Register 关键字会尽量把变量放在寄存器上，而不是栈或者堆上，从而加快存取速度。举个测试的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/timeb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// global variables</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = TIME;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getSystemTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeb</span> <span class="title">t</span>;</span></span><br><span class="line">    ftime(&amp;t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span> * t.time + t.millitm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testRegisterKeyword</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// define register variable</span></span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> b = TIME;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// define local variable</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> y = TIME;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> end = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    start = getSystemTime();</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; b; a++);</span><br><span class="line">    end = getSystemTime();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"寄存器变量用时: %lld ms\n"</span>, end - start);</span><br><span class="line">    </span><br><span class="line">    start = getSystemTime();</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; y; x++);</span><br><span class="line">    end = getSystemTime();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"局部变量用时: %lld ms\n"</span>, end - start);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    start = getSystemTime();</span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; n; m++);</span><br><span class="line">    end = getSystemTime();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"全局变量用时: %lld ms\n"</span>, end - start);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在mac上 <span class="keyword">register</span> 变量用时反而是最长的 :(</span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h2 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h2><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C 语言有5个存储类说明符的关键字&lt;/p&gt;
&lt;h2 id=&quot;auto&quot;&gt;&lt;a href=&quot;#auto&quot; class=&quot;headerlink&quot; title=&quot;auto&quot;&gt;&lt;/a&gt;auto&lt;/h2&gt;&lt;p&gt;auto 在C语言中只有修饰局部变量这一个作用。表示这个局部变量是自动局部
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS Interview</title>
    <link href="http://www.yuliang.xyz/2018/06/19/ios-interview/"/>
    <id>http://www.yuliang.xyz/2018/06/19/ios-interview/</id>
    <published>2018-06-19T23:17:38.000Z</published>
    <updated>2019-02-06T03:24:21.252Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><hr><ol><li>为什么说Objective-C是一门动态的语言？</li></ol><p>Object-c类的类型和数据变量的类型都是在运行是确定的，而不是在编译时确定。例如：多态特性，我们可以使用父类指针来指向子类对象，并且可以用来调用子类的方法。运行时(runtime)特性,我们可以动态的添加方法，或者替换方法。</p><p>动态的意思是不需要在编译时确定所有的东西,在运行时也可以动态添加变量,属性,方法和类. Objective-C 可以通过Runtime这个运行时机制,在运行时动态的添加变量,方法和类等,</p><p>它的动态性主要体现在3个方面：<br>1.动态类型：如id类型。实际上静态类型因为其固定性和可预知性而使用的特别广泛。静态类型是强类型，动态类型是弱类型，运行时决定接收者。<br>2.动态绑定：让代码在运行时判断需要调用什么方法，而不是在编译时。与其他面向对象语言一样，方法调用和代码并没有在编译时连接在一起，而是在消息发送时才进行连接。运行时决定调用哪个方法。<br>3.动态载入。让程序在运行时添加代码模块以及其他资源。用户可以根据需要执行一些可执行代码和资源，而不是在启动时就加载所有组件。可执行代码中可以含有和程序运行时整合的新类。</p><ol><li><p>讲一下MVC和MVVM，MVP？</p></li><li><p>为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别?</p></li></ol><ul><li>代理是使用weak来修饰的。</li></ul><p>1.使用weak是为了避免循环引用。<br>防止循环引用。例如View有一个协议，需要一个代理实现回调。一个Controller添加这个View，并且遵守协议，成为View的代理。如果不用week，用strong，Controller -&gt;View -&gt; delegate -&gt; Controller，就循环引用了。</p><p>2.当使用weak修饰的属性，当对象释放的时候，系统会对属性赋值nil,object-c有个特性就是对nil对象发送消息也就是调用方法，不会cash。</p><ul><li><p>delegate:传递的是事件(even)，偏重于与用户交互的回调。代理可以让A对象通知B对象，我(A)发生的变化，前提B遵循了A的代理，并且实现了A的代理方法。</p></li><li><p>dataSource: 传递的是数据。如果A对象声明了数据源，当我们创建A对象的时候，我们就该实现数据源，来告诉A，他所需要的一些数据。例如：tableView数据源方法，需要告诉它，我要实现几组cell，每组cell多少行cell，实现的cell什么样式，什么内容</p></li><li><p>同样delegate和  dataSource,都是可以使用require和optional来修饰的。</p></li></ul><ol><li>代理和Block的区别<br>相同点：代理和Block大多是我们都可以用来做倒序传值的。我们都得注意避免循环引用。不然我们去使用代理还是Block的时候，都需要判断它们是否实现</li></ol><p>不同点：代理使用weak修饰，代理必须先声明方法。当我们调用代理的时候要判断是否已经实现。</p><p>block：使用的是copy来修饰，block保存的是一段代码，其实也就是一个函数。并且可以自动捕捉自动变量，如果想修改此自动变量，还必须使用__block修饰。</p><p>在 iOS中， block一共分三种。<br>  (1)全局静态 block，不会访问任何外部变量，执行完就销毁。</p><pre><code>^{    NSLog(@&quot;Hello World!&quot;);}();</code></pre><p>(2)保存在栈中的 block，当函数返回时会被销毁，和第一种的区别就是调用了外部变量。</p><pre><code>[UIView animateWithDuration:3 animations:^{    self.view.backgroundColor = [UIColor redColor];}];</code></pre><p>(3)保存在堆中的 block，当引用计数为 0 时会被销毁。例如按钮的点击事件，一直存在，即使执行过，也不销毁，因为按钮还可能被点击，持有按钮的View被销毁，它才会被销毁。</p><p>2.block优点<br>block的代码可读性更好。因为应用block和实现block的地方在一起。代理的声明和实现就分开来了，在两个类中。代理使用起来也更麻烦，因为要声明协议、声明代理、遵守协议、实现协议里的方法。block不需要声明，也不需要遵守，只需要声明和实现就可以了。<br>  block是一种轻量级的回调，可以直接访问上下文，由于block的代码是内联的，运行效率更高。block就是一个对象，实现了匿名函数的功能。所以我们可以把block当做一个成员变量、属性、参数使用，使用起来非常灵活。像用AFNetworking请求数据和GCD实现多线程，都使用了block回调。</p><p>3.block缺点<br>blcok的运行成本高。block出栈需要将使用的数据从栈内存拷贝到堆内存，当然对象的话就是引用计数加1，使用完或者block置nil后才销毁。delegate只是保存了一个对象指针(一定要用week修饰delegate，不然也会循环引用)，直接回调，没有额外消耗。就像C的函数指针，只多做了一个查表动作。<br>  block容易造成循环引用，而且不易察觉。因为为了blcok不被系统回收，所以我们都用copy关键字修饰，实行强引用。block对捕获的变量也都是强引用，所以就会造成循环引用。</p><p>4.如何使用<br>优先使用block。<br>  如果回调函数很多，多余三个使用代理。<br>  如果回调的很频繁，次数很多，像UITableview，每次初始化、滑动、点击都会回调，使用代理。    </p><h4 id="4-属性"><a href="#4-属性" class="headerlink" title="4. 属性"></a>4. 属性</h4><ul><li><p>实质是什么？<br>属性是描述类的特征，也就是具备什么特性。</p></li><li><p>包括哪几个部分？<br>三个部分，带下划线的成员变量，get、setter方法</p></li><li><p>属性默认的关键字都有哪些？<br>默认关键字：readwrite，assign, atomic; – 是针对基本类型(NSInteger, BOOL, NSUInteger, int, 等)<br>针对引用类型(普通的 OC 对象), 默认:strong, readwrite, atomic （例如：NSString, NSArray, NSDictory等）</p></li><li><p>@dynamic关键字是用来做什么的？<br>@dynamic :修饰的属性，其getter和setter方法编译器是不会自动帮你生成。必须自己是实现的。</p></li><li><p>@synthesize关键字是用来做什么的？<br>@synthesize：修饰的属性，其getter和setter方法编译器是会自动帮你生成，不必自己实现。且指定与属性相对应的成员变量。</p></li></ul><h4 id="6-NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）"><a href="#6-NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）" class="headerlink" title="6. NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）"></a>6. NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）</h4><ul><li>什么是copy？</li><li><p>什么是strong？</p></li><li><p>为什么要用copy？ 安全，在初始化时,如果来源是NSMutableString的话,会对来源进行一次深拷贝,将来源的内存地址复制一份,这样,两个对象就一点关系就没有了,无论你怎么操作来源,都不会对自己的NSString有任何影响</p></li><li><p>为什么不都用copy？<br>既然copy安全,那为什么不都用copy?<br>这里我们需要了解一点,copy修饰的NSString在进行set操作时,底层是这样实现的:<br>我们还是举上面那个例子,进行str = sourceStr操作时,内部会执行一个操作:<br>str = [sourceStr copy];<br>那么这个copy里面做了什么呢?<br>if ([str isMemberOfClass:[str class]])<br>没错,就是进行一次判断,判断来源是可变的还是不可变的,如果是不可变,那么好,接下来的操作就跟strong修饰的没有区别,进行浅拷贝;如果是可变的,那么会进行一次深拷贝<br>所以,copy操作内部会进行判断,你别小看了这个if操作所消耗的内存,一次不重要,十次可能也可以忽略不计,但当你的项目十分庞大时,有成百上千个个NSString对象,多多少少会对你的app的性能造成一定的影响.</p></li><li><p>什么时候才用copy？<br>你只需要记住一点,当你给你的的NSString对象赋值时,如果来源是NSMutableString,那么这种情况就必须要用copy;如果你确定来源是不可变类型的,比如@”<a href="http://www.jianshu.com/users/691d9ed740cf/latest_articles&quot;这种固定的字符串,那么用strong比较好" target="_blank" rel="noopener">http://www.jianshu.com/users/691d9ed740cf/latest_articles&quot;这种固定的字符串,那么用strong比较好</a></p></li></ul><p>我们知道copy的含义是指当重新赋值时深拷贝新对象再赋值给self.name, 相反当修饰符为strong时，因为strong的意思是指针指向原对象，并且引用计数+1，<br>所以为了避免NSString类型的值被修改，一般建议用copy修饰符修饰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person: NSObject</span><br><span class="line"></span><br><span class="line">@property (copy) NSString *name;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Person *xiaoMing = [[Person alloc] init];</span><br><span class="line">        NSMutableString *name1 = [[NSMutableString alloc] initWithString: @&quot;xiaoming&quot;];</span><br><span class="line">        xiaoMing.name = name1;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;%@&quot;, xiaoMing.name);</span><br><span class="line">        </span><br><span class="line">        [name1 appendString:@&quot;one more thing&quot;];</span><br><span class="line">        // 如果peron的name属性没有用 copy，而是默认的strong来修饰，那么name1变了，person的name的值也会变</span><br><span class="line">        NSLog(@&quot;%@&quot;, xiaoMing.name);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;%@&quot;, xiaoMing.name);</span><br></pre></td></tr></table></figure><p>NSString 默认是 Strong修饰的</p><p>如果用Copy来修饰name这个属性不会改变。如果使用Strong，当name这个字符串改变的时候，name这个属性也会随着改变。</p><p>补充：这其实也是看需求，看被赋值的字符串是否需要随着赋值字符串的变化而变化，而大多数情况下我们不希望<br>被赋值的字符串如某个对象的某个字符串类型的属性会随着赋值字符串的变化而变化。 反之，如果我们希望被赋值的字符串随着赋值字符串的变化而变化，那么我们也可以使用strong来修饰字符串</p><p>至于其底层原理区别则是两种修饰方式让指针指向的内存地址不同。使用copy修饰被赋值字符串，被修饰字符串会对赋值字符串（可变字符串）进行一次深拷贝，那么被赋值字符串和赋值字符串指向的是完全不同的两块内存地址，反之两者指向的同一块内存地址。</p><p>当我们确定赋值字符串是不可变字符串的时候我们是可以使用strong来修饰字符串。</p><h4 id="7、如何令自己所写的对象具有拷贝功能"><a href="#7、如何令自己所写的对象具有拷贝功能" class="headerlink" title="7、如何令自己所写的对象具有拷贝功能?"></a>7、如何令自己所写的对象具有拷贝功能?</h4><p>需实现 NSCopying 协议。如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 NSCopying与 NSMutableCopying协议。<br>具体步骤：<br>需声明该类遵从 NSCopying 协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">实现 NSCopying 协议。该协议只有一个方法: </span><br><span class="line">- (id)copyWithZone:(NSZone *)zone; </span><br><span class="line"></span><br><span class="line">注意：一提到让自己的类用 copy 修饰符，我们总是想覆写copy方法，其实真正需要实现的却是 “copyWithZone” 方法。 </span><br><span class="line">至于如何重写带 copy 关键字的 setter这个问题， </span><br><span class="line">如果抛开本例来回答的话，如下：</span><br><span class="line"></span><br><span class="line">- (void)setName:(NSString *)name &#123;</span><br><span class="line">    //[_name release];</span><br><span class="line">    _name = [name copy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、可变集合类-和-不可变集合类的-copy-和-mutablecopy有什么区别？如果是集合是内容复制的话，集合里面的元素也是内容复制么？"><a href="#8、可变集合类-和-不可变集合类的-copy-和-mutablecopy有什么区别？如果是集合是内容复制的话，集合里面的元素也是内容复制么？" class="headerlink" title="8、可变集合类 和 不可变集合类的 copy 和 mutablecopy有什么区别？如果是集合是内容复制的话，集合里面的元素也是内容复制么？"></a>8、可变集合类 和 不可变集合类的 copy 和 mutablecopy有什么区别？如果是集合是内容复制的话，集合里面的元素也是内容复制么？</h4><p>使用copy时 可变集合的指针地址以及内存地址都不相同 深复制<br>使用copy时 不可变集合的指针地址不一样但是内存地址一样 属于浅复制 </p><p>使用mutableCopy的时候无论是可变集合还是不可变集合的指针地址和内存地址都不同 都属于深复制</p><h4 id="9-为什么IBOutlet修饰的UIView也适用weak关键字？"><a href="#9-为什么IBOutlet修饰的UIView也适用weak关键字？" class="headerlink" title="9. 为什么IBOutlet修饰的UIView也适用weak关键字？"></a>9. 为什么IBOutlet修饰的UIView也适用weak关键字？</h4><p>在xib或者Sb拖控件时，其实控件就加载到了父控件的subviews数组里面，进行了强引用，即使使用了weak，也不造成对象的释放。</p><h4 id="10-在定义-property-的时候-nonatomic-和-atomic的区别？"><a href="#10-在定义-property-的时候-nonatomic-和-atomic的区别？" class="headerlink" title="10. 在定义 property 的时候 nonatomic 和 atomic的区别？"></a>10. 在定义 property 的时候 nonatomic 和 atomic的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@property(nonatomic, retain) UITextField *userName;</span><br><span class="line">@property(atomic, retain) UITextField *userName;</span><br><span class="line">@property(retain) UITextField *userName;</span><br></pre></td></tr></table></figure><p>后两行是一样的，不写的话默认就是atomic。</p><p>atomic 和 nonatomic 的区别在于，系统自动生成的 getter/setter 方法不一样。如果你自己写 getter/setter，那 atomic/nonatomic/retain/assign/copy 这些关键字只起提示作用，写不写都一样。</p><p>对于atomic的属性，系统生成的 getter/setter 会保证 get、set 操作的完整性，不受其他线程影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。</p><p>而nonatomic就没有这个保证了。所以，nonatomic的速度要比atomic快。</p><p>不过atomic可并不能保证线程安全,只是读/写安全的。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。</p><p>atomic：默认是有该属性的，这个属性是为了保证程序在多线程情况下，编译器会自动生成一些互斥加锁代码，避免该变量的读写不同步问题。<br>nonatomic：如果该对象无需考虑多线程的情况，请加入这个属性，这样会让编译器少生成一些互斥加锁代码，可以提高效率。</p><p>nonatomic:表示非原子，不安全，但是效率高。<br>atomic：表示原子行，安全，但是效率低。</p><ul><li>atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？</li><li>atomic：不能绝对保证线程的安全，当多线程同时访问的时候，会造成线程不安全。可以使用线程锁来保证线程的安全。</li></ul><p>Example：<br>{lock}<br>    if (property != newValue) {<br>            [property release];<br>            property = [newValue retain];<br>    }<br>{unlock}</p><p>可以看出来，用atomic会在多线程的设值取值时加锁，中间的执行层是处于被保护的一种状态，atomic是oc使用的一种线程保护技术，基本上来讲，就是防止在写入未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。</p><ol><li>进程和线程的区别？同步异步的区别？并行和并发的区别？<br>进程：是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.</li></ol><p>线程：是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</p><p>同步：阻塞当前线程操作，不能开辟线程。</p><p>异步：不阻碍线程继续操作，可以开辟线程来执行任务。</p><p>并发：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</p><p>并行：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</p><p>区别：并发和并行是即相似又有区别的两个概念，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。在多道程序环境下，并发性是指在一段时间内宏观上有多个程序在同时运行，但在单处理机系统中，每一时刻却仅能有一道程序执行，故微观上这些程序只能是分时地交替执行。倘若在计算机系统中有多个处理机，则这些可以并发执行的程序便可被分配到多个处理机上，实现并行执行，即利用每个处理机来处理一个可并发执行的程序，这样，多个程序便可以同时执行。</p><h4 id="14-线程间通信？"><a href="#14-线程间通信？" class="headerlink" title="14. 线程间通信？"></a>14. 线程间通信？</h4><p>当使用dispath-async函数开辟线程执行任务的完成时，我们需要使用dispatch_async(dispatch_get_main_queue(), ^{ }); 函数会到主线程内刷新UI。并完成通信</p><ol><li>GCD的一些常用的函数？（group，barrier，信号量，线程同步）</li></ol><ul><li>使用队列组来开辟线程时，队列组中的队列任务是并发，当所有的队列组中的所有任务完成时候，才可以调用队列组完成任务。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**创建自己的队列*/</span><br><span class="line">dispatch_queue_t dispatchQueue = dispatch_queue_create(&quot;ted.queue.next&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">/**创建一个队列组*/</span><br><span class="line">dispatch_group_t dispatchGroup = dispatch_group_create();</span><br><span class="line">/**将队列任务添加到队列组中*/</span><br><span class="line">dispatch_group_async(dispatchGroup, dispatchQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dispatch-1&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">   /**将队列任务添加到队列组中*/</span><br><span class="line">dispatch_group_async(dispatchGroup, dispatchQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dspatch-2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">  /**队列组完成调用函数*/</span><br><span class="line">dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^()&#123;</span><br><span class="line">    NSLog(@&quot;end&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>barrier:表示栅栏，当在并发队列里面使用栅栏时候，栅栏之前的并发任务开始并发执行，执行完毕后，执行栅栏内的任务，等栅栏任务执行完毕后，再并发执行栅栏后的任务。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;my.concurrent.queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_async(concurrentQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dispatch-1&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_async(concurrentQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dispatch-2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_barrier_async(concurrentQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dispatch-barrier&quot;); </span><br><span class="line">&#125;);</span><br><span class="line">dispatch_async(concurrentQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dispatch-3&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_async(concurrentQueue, ^()&#123;</span><br><span class="line">    NSLog(@&quot;dispatch-4&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>信号量：Semaphore是通过‘计数’的方式来标识线程是否是等待或继续执行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_create(int) // 创建一个信号，并初始化信号的计数大小</span><br><span class="line">/* 等待信号，并且判断信号量，如果信号量计数大于等于你创建时候的信号量的计数，就可以通过，继续执行，并且将你传入的信号计数减1，</span><br><span class="line"> * 如果传入的信号计数小于你创建的计数，就表示等待，等待信号计数的变化</span><br><span class="line"> *  如果等待的时间超过你传入的时间，也会继续下面操作</span><br><span class="line"> *   第一个参数：semaphore 表示信号量</span><br><span class="line"> *   第二个参数：表示等待的时间</span><br><span class="line"> *    返回int 如果传入的信号计数大于等于你创建信号的计数时候，返回0.  反之，返回的不等于0</span><br><span class="line"> */</span><br><span class="line"> int result = dispatch_semaphore_wait(dispatch_semaphore_t  semaphore,time outTime);// 表示等待，也是阻碍线程</span><br><span class="line">// 表示将信号技术+1</span><br><span class="line">dispatch_semaphore_signl(dispatch_semaphore_t semaphore);</span><br></pre></td></tr></table></figure></li><li><p>实现线程的同步的方法：串行队列，分组，信号量。也是可以使用并发队列。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//加入队列</span><br><span class="line">dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">    //1.先去网上下载图片</span><br><span class="line">    dispatch_sync(concurrentQueue, ^&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;);</span><br><span class="line">    //2.在主线程展示到界面里</span><br><span class="line">    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p>如何使用队列来避免资源抢夺？<br>当我们使用多线程来访问同一个数据的时候，就有可能造成数据的不准确性。这个时候我么可以使用线程锁的来来绑定。也是可以使用串行队列来完成。如：fmdb就是使用FMDatabaseQueue，来解决多线程抢夺资源。</p></li><li><p>数据持久化的几个方案<br>plist, 存储字典，数组比较好用<br>preference：偏好设置，实质也是plist<br>NSKeyedArchiver：归档，可以存储对象<br>sqlite：数据库，经常使用第三方来操作，也就是fmdb<br>coreData: 也是数据库储存，苹果官方的</p></li></ol><hr><h2 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h2><hr><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><ol><li>objc在向一个对象发送消息时，发生了什么？<br>根据对象的isa指针找到类对象id，在查询类对象里面的methodLists方法函数列表，如果没有在好到，在沿着superClass,寻找父类，再在父类methodLists方法列表里面查询，最终找到SEL,根据id和SEL确认IMP（指针函数）,在发送消息；</li></ol><p>再复习C++的这个部分</p><ol><li>什么时候会报unrecognized selector错误？iOS有哪些机制来避免走到这一步？</li></ol><p>当发送消息的时候，我们会根据类里面的methodLists列表去查询我们要动用的SEL,当查询不到的时候，我们会一直沿着父类查询，当最终查询不到的时候我们会报unrecognized selector 错误</p><p>当系统查询不到方法的时候，会调用+(BOOL)resolveInstanceMethod:(SEL)sel动态解释的方法来给我一次机会来添加，调用不到的方法。或者我们可以再次使用-(id)forwardingTargetForSelector:(SEL)aSelector重定向的方法来告诉系统，该调用什么方法，一来保证不会崩溃</p><ol><li>给类添加一个属性后，在类结构体里哪些元素会发生变化？<br>instance_size ：实例的内存大小<br><code>objc_ivar_list *ivars:属性列表</code></li></ol><h3 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h3><ol><li>runloop是来做什么的？runloop和线程有什么关系？主线程默认开启了runloop么？子线程呢？</li></ol><ul><li>runloop:字面意思就是跑圈，其实也就是一个循环跑圈，用来处理线程里面的事件和消息。</li><li>runloop和线程的关系：每个线程如果想继续运行，不被释放，就必须有一个runloop来不停的跑圈，以来处理线程里面的各个事件和消息。</li><li>主线程默认是开启一个runloop。也就是这个runloop才能保证我们程序正常的运行。子线程是默认没有开始runloop的</li></ul><ol><li>runloop的mode是用来做什么的？有几种mode？</li></ol><ul><li>model:是runloop里面的模式，不同的模式下的runloop处理的事件和消息有一定的差别。</li></ul><p>系统默认注册了5个Mode:<br>（1）kCFRunLoopDefaultMode: App的默认 Mode，通常主线程是在这个 Mode 下运行的。<br>（2）UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。<br>（3）UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。<br>（4）GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到。<br>（5）kCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。</p><ul><li>注意iOS 对以上5中model进行了封装<br>NSDefaultRunLoopMode;<br>NSRunLoopCommonModes</li></ul><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><ol><li>isa指针？（对象的isa，类对象的isa，元类的isa都要说）</li></ol><ol><li>类方法和实例方法有什么区别？<br>调用的方式不同，类方法必须使用类调用，在方法里面不能调用属性，类方法里面也必须调用类方法。存储在元类结构体里面的methodLists里面</li></ol><p>实例方法必须使用实例对象调用，可以在实例方法里面使用属性，实例方法也必须调用实例方法。存储在类结构体里面的methodLists里面</p><hr><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><hr><hr><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><hr><p>1.有已经上线的项目么？</p><p>2.项目里哪个部分是你完成的？（找一个亮点问一下如何实现的）</p><p>3.开发过程中遇到过什么困难，是如何解决的？</p><hr><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><hr><p>4.遇到一个问题完全不能理解的时候，是如何帮助自己理解的？举个例子？</p><p>5.有看书的习惯么？最近看的一本是什么书？有什么心得？</p><p>6.有没有使用一些笔记软件？会在多平台同步以及多渠道采集么？（如果没有，问一下是如何复习知识的）</p><p>7.有没有使用清单类，日历类的软件？（如果没有，问一下是如何安排，计划任务的）</p><p>8.平常看博客么？有没有自己写过？（如果写，有哪些收获？如果没有写，问一下不写的原因）</p><hr><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><hr><ul><li>面试者一定要知道面试官问的点是什么。</li><li>实践与理论的脱节，让人很不安。能做出来项目，但是基础知识很薄弱</li><li>只依赖于公司里的项目应该是不够的，毕竟不是每个公司里都有上乘的代码和技术</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;为什么说Objective-C是一门动态的语言？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Object-c类的类型和数据
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS Swift</title>
    <link href="http://www.yuliang.xyz/2018/06/19/ios-swift/"/>
    <id>http://www.yuliang.xyz/2018/06/19/ios-swift/</id>
    <published>2018-06-19T04:21:21.000Z</published>
    <updated>2019-02-04T00:09:19.662Z</updated>
    
    <content type="html"><![CDATA[<p>简单，安全，快</p><p>Ojbective-C 的方法名字太长</p><p>Swift 舍弃了null 而使用Optional 语言</p><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><ul><li><p>使用var声明变量，使用let声明常量<br>let str = “String”<br>var str = “String”</p></li><li><p>类型推断： Swift是强类型的语言<br>let str: String = “String”</p></li></ul><p>其中String就是变量的类型。上面的:String 之所以可以省略是因为后面给变量str赋值了一个String类型的常量。<br>所以编译器能够推断出str也是String类型的。</p><h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 (Array)"></a>数组 (Array)</h3><p>在Swift中，Array和Dictionary是值类型的。所以使用简单的等号就可以完成拷贝了。不像有些语言还分深拷贝和浅拷贝。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arrayOfIntegers : [Int] = [1,2,3]</span><br><span class="line">// 隐式指定</span><br><span class="line">var implicitArrayOfIntegers = [1,2,3]</span><br><span class="line"></span><br><span class="line">// 也可以创建空数组,但必须提供其类型</span><br><span class="line">let anotherArray = [Int]()</span><br><span class="line"></span><br><span class="line">let arr = [2.0, 4.5, 3.7] // 数组常量的使用只需要用中括号里面加数组的元素；</span><br><span class="line"></span><br><span class="line">let arrExplicit: [Double] // 显式的声明一个数组变量，则变量的类型为中括号，里面是每个元素的类型；</span><br><span class="line"></span><br><span class="line">// for循环的条件不需要用括号括起来</span><br><span class="line">// 0..&lt;3 表示0到3的一个数组，但不包括3</span><br><span class="line">// 0...3会包括3</span><br><span class="line">for i in 0..&lt;arr.count&#123;</span><br><span class="line">    print(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组的一些API:</li></ul><p>arr.append(6.3)<br>arr.remove(at: 3)<br>arr.insert(10.9, at: 1)<br>arr.append(contentsOf: [3.5,6.8])<br>arr[0] = 89.23<br>arr.reversed()<br>arr.sort()</p><h3 id="字典-Dictionary"><a href="#字典-Dictionary" class="headerlink" title="字典 (Dictionary)"></a>字典 (Dictionary)</h3><ul><li><p>声明与使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var dictionary: [String:Int] = [</span><br><span class="line">    &quot;one&quot; : 1,</span><br><span class="line">    &quot;two&quot; : 2,</span><br><span class="line">    &quot;three&quot; : 3</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>赋值一个空的字典：<br>var emptyDictionary: [Int:Int] = [:]</p></li></ul><ul><li><p>字典取值：<br>let value = dictionary[“one”]</p></li><li><p>字典的添加,更新和删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var emptyDictionary: [Int:Int] = [:]</span><br><span class="line">emptyDictionary[1] = 12</span><br><span class="line">emptyDictionary.updateValue(14, forKey: 1)</span><br><span class="line">emptyDictionary.removeValue(forKey: 1)</span><br></pre></td></tr></table></figure></li></ul><h3 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h3><p>元组就是一种数据结构，里面包含一个或多个值，并且这些值可以是不同类型的。<br>元组中的值可以是命名的也可以是匿名的。如果是命名的，那么可以使用.符号来获取该值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var tuple  = (&quot;name&quot;,12)</span><br><span class="line">var namedTuple = (name:&quot;Name&quot;,age:12)</span><br><span class="line">namedTuple.name = &quot;updateName&quot;</span><br></pre></td></tr></table></figure><ul><li>Tuple 的用处，方法返回多个返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func getNameAndAge() -&gt; (String,Int)&#123;</span><br><span class="line">    return (&quot;Ace&quot;,20)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类型（Enum）"><a href="#枚举类型（Enum）" class="headerlink" title="枚举类型（Enum）"></a>枚举类型（Enum）</h3><ul><li><p>声明与使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum iOSDeviceType &#123;</span><br><span class="line">    case iPhone</span><br><span class="line">    case iPad</span><br><span class="line">    case iWatch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var myDevice = iOSDeviceType.iPhone</span><br></pre></td></tr></table></figure></li><li><p>当变量的类型已经明确时，赋值可以简化为：<br>var myDevice: iOSDeviceType<br>myDevice = .iPhone </p></li><li><p>Raw Value<br>每个枚举都可以拥有自己的一个原生类型的raw value，所有的枚举关联的raw value必须<br>是同一个类型的。当类型是Int时，默认按照枚举值的顺序递增其raw value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Direction: Int &#123;</span><br><span class="line">    case Up = 1</span><br><span class="line">    case Down // will have the raw value 2</span><br><span class="line">    case Left // will have the raw value 3</span><br><span class="line">    case Right // will have the raw value 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="—-Control-Flow"><a href="#—-Control-Flow" class="headerlink" title="— Control Flow"></a>— Control Flow</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if 1+1 == 2 &#123;</span><br><span class="line">         println(&quot;The math checks out&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0</span><br><span class="line">for var i = 0; i &lt; 3; i++ &#123;</span><br><span class="line">    sum += 1 </span><br><span class="line">&#125;</span><br><span class="line">sum // = 3</span><br></pre></td></tr></table></figure><h4 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var firstCounter = 0</span><br><span class="line">     for index in 1 ..&lt; 10 &#123;</span><br><span class="line">         firstCounter++</span><br><span class="line">     &#125;</span><br><span class="line">// 循环9次</span><br><span class="line"></span><br><span class="line">var secondCounter = 0</span><br><span class="line">for index in 1 ... 10 &#123; // 注意是三个句点,不是两个</span><br><span class="line">         secondCounter++</span><br><span class="line">     &#125;</span><br><span class="line">// 循环10次</span><br><span class="line"></span><br><span class="line">let loopingArray = [1,2,3,4,5]</span><br><span class="line">var loopSum = 0</span><br><span class="line">for number in loopingArray &#123;</span><br><span class="line">     loopSum += number</span><br><span class="line">&#125;</span><br><span class="line">loopSum // = 15</span><br></pre></td></tr></table></figure><h4 id="while-amp-do-while"><a href="#while-amp-do-while" class="headerlink" title="while &amp; do-while"></a>while &amp; do-while</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var countDown = 5</span><br><span class="line"></span><br><span class="line">while countDown &gt; 0 &#123;</span><br><span class="line">     countDown--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countDown</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var countUP = 0</span><br><span class="line">do &#123;</span><br><span class="line">         countUp++</span><br><span class="line">&#125; while countUp &lt; 5</span><br><span class="line">countUp // = 5</span><br></pre></td></tr></table></figure><h4 id="if-let"><a href="#if-let" class="headerlink" title="if-let"></a>if-let</h4><p>if-let 语句检查一个可选变量是否包 含值。如果包含,则将这个值指定给一个常量变量,<br>然后运行某段代码。这样可以减少很 多行代码,同时又能够保证安全性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var conditionalString : String? = &quot;a string&quot;</span><br><span class="line">     if let theString = conditionalString? &#123;</span><br><span class="line">         println(&quot;The string is &apos;\(theString)&apos;&quot;)</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         println(&quot;The string is nil&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 输出 &quot;The string is &apos;a string&apos;&quot;</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> total: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> pro: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// init方法是每个类的构造函数。不需要前缀func。</span></span><br><span class="line">    <span class="keyword">init</span>(total: <span class="type">Double</span>, pro: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.total = total</span><br><span class="line">        <span class="keyword">self</span>.pro = pro</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数的返回值用-&gt; 表示</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doSomeThing</span><span class="params">(param1: String, param2: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="comment">// 如何在控制台打印字符以及如何在字符中包含参数（使用反斜杠加括号）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"do something \(str)"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"over"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>要重写一个函数,要在子类中重新声明它,并添加 override 关键字</p><p>class Car: Vehicle {<br>// 继承类可以重写函数<br>             override func description() -&gt; String {<br>                 var description = super.description()<br>                 return description + “, which is a car”<br>} }</p><p>在一个被重写的函数中,可以通过 super 回调该函数在父类中的版本</p><p>override func description() -&gt; String {<br>         var description = super.description()<br>         return description + “, which is a car”<br>}</p><h4 id="初始化与反初始化"><a href="#初始化与反初始化" class="headerlink" title="初始化与反初始化"></a>初始化与反初始化</h4><p>class InitAndDeinitExample {<br>    // 指定的初始化器(也就是主初始化器)<br>    init() {<br>        print(“I’ve been created!”)<br>    }<br>    // 便捷初始化器,是调用上述指定初始化器所必需的<br>    convenience init (text: String) {<br>        self.init() // 这是必需的<br>        print(“I was called with the convenience initializer!”)<br>    }<br>    // 反初始化器<br>    deinit {<br>        print(“I’m going away!”)<br>    }<br>}</p><p>var example : InitAndDeinitExample?<br>// 使用指定的初始化器<br>example = InitAndDeinitExample() // 输出”I’ve been created!”<br>example = nil // 输出”I’m going away”<br>// 使用便捷初始化器<br>example = InitAndDeinitExample(text: “Hello”)<br>// 输出”I’ve been created!”<br>// 然后输出”I was called with the convenience initializer”<br>创建一个可以返回 nil 的初始化器(也称为可以失败的初始化器),就在 init 关键字的后面放上一个问号,并在初始化器确定它不能成功地构造该对象时,使用 return nil:</p><p>convenience init? (value: Int) {<br>    self.init()<br>    if value &gt; 5 {<br>        // 不能初始化这个对象;返回nil,表示初始化失败 return nil<br>    } }<br>在使用一个可以失败的初始化器时,任何可以在其中存储该结果的变量都是可选的:</p><p>let failableExample = InitAndDeinitExample(value: 6)</p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>使用协议的好处是,可以利用 Swift 的类型体系来引用任何遵守某一给定协议的对象，个人现在理解为是Interface概念。</p><p>protocol Blinking{<br>    var isBlinking:Bool{get}<br>    var blinkSpeed: Double { get set }<br>    func startBlinking(blinkSpeed: Double) -&gt; Void</p><p>}</p><p>class Light:Blinking{<br>    var isBlinking = false<br>    var blinkSpeed = 1.2<br>    func startBlinking(blinkSpeed: Double) {<br>            print(“now my speed is (self.blinkSpeed)”)<br>    }</p><p>}</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p> extension Int {<br>         var doubled : Int {<br>             return self <em> 2<br>         }<br>         func multiplyWith(anotherNumber: Int) -&gt; Int {<br>             return self </em> anotherNumber<br>} }</p><p>2.doubled  // = 4<br>4.multiplyWith(32) // = 128<br>还可以利用扩展使一个类型遵守一个协议</p><p>extension Int : Blinking {<br>    var isBlinking : Bool {<br>        return false;<br>    }<br>    var blinkSpeed : Double {<br>        get {<br>            return 0.0; }<br>        set {<br>            // 不做任何事情<br>        } }<br>    func startBlinking(blinkSpeed : Double) {<br>        print(“I am the integer (self). I do not blink.”)<br>    } }<br>2.isBlinking // = false<br>2.startBlinking(2.0) // 输出”I am the integer 2. I do not blink.”</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>单返回值简单函数<br>两个参数一个返回值，都为Int</li></ul><p>func thirdFunction(firstValue: Int, secondValue: Int) -&gt; Int {<br>         return firstValue + secondValue<br>     }<br>thirdFunction(1, 2)</p><ul><li>使用元组多返回值<br>func fourthFunction(firstValue: Int, secondValue: Int)<pre><code>-&gt; (doubled: Int, quadrupled: Int) {return (firstValue * 2, secondValue * 4)</code></pre>   }<br>fourthFunction(2, 4)</li></ul><p>// 用数字访问:<br>fourthFunction(2, 4).1 // = 16</p><p>// 其他相同,只是使用了名字:<br>fourthFunction(2, 4).quadrupled // = 16</p><ul><li>外部名称调用<br>在定义函数时,可以为参数指定名字。当无法马上明白每个参数的用途时,这一功能会非 常有用。可以像下面这样来定义参数名字:</li></ul><p>func addNumbers(firstNumber num1 : Int, toSecondNumber num2: Int) -&gt; Int {<br>         return num1 + num2<br>}<br>addNumbers(firstNumber: 2, toSecondNumber: 3)  // = 5</p><p>在为参数创建名字时,就是为参数创建一个内部名字和一个外部名字,一个参数的内部名字应当与外部名字相同。将同一个名字输 入两次也没有什么问题,但的确有一种简便的方式来定义一个外部名字与内部名字相同的 参数——就是在参数名之前放一个 # 符号</p><p>func multiplyNumbers(#firstNumber: Int, #multiplier: Int) -&gt; Int {<br>         return firstNumber * multiplier<br>}<br>multiplyNumbers(firstNumber: 2, multiplier: 3)  // = 6</p><ul><li>将函数用作变量<br>var numbersFunc: (Int, Int) -&gt; Int;<br>// numbersFunc现在可以存储任何接受两个Int并返回一个Int的函数</li></ul><p>numbersFunc = addNumbers<br>numbersFunc(2, 3) // = 5</p><h3 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h3><p>sort需要传递一个闭包作为参数</p><p>var numbers = [2,4,34,6,33,1,67,20]<br>var numbersSorted = numbers.sort( { (first, second ) -&gt; Bool in</p><pre><code>return first &lt; second</code></pre><p>})<br>闭包只包含一行代码,可以省略 return 关键字</p><p>var numbersSorted = numbers.sort( { $1 &gt; $0})<br>print(numbersSorted)<br>如果一个闭包是函数调用中的最后一个参数,可以将它放在括号外面。这纯粹是为 了提高可读性,不会改变闭包的工作方式</p><p>var numbersSorted = numbers.sort(){ $1 &gt; $0}<br>print(numbersSorted)<br>闭包放在变量里面</p><p>var comparator = {(a: Int, b: Int) in a &lt; b}<br>comparator(1, 2)  // = true</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>在将一个方法或属性声明为 public 时,App 中的所有人都能看到它:</p><p>// 可供所有人访问<br>public var publicProperty = 123</p><p>//如果将一个方法或属性声明为 private,那只能在声明它的源文件内部看到它:<br>// 只能在这个源文件中访问<br>private var privateProperty = 123</p><p>// 仅能供本模块访问<br>// 这里的’internal’是默认的,可以省略<br>internal var internalProperty = 123</p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>类似C++的运算符重载</p><p>class Vector2D {<br>    var x : Float = 0.0<br>    var y : Float = 0.0<br>    init (x : Float, y: Float) {<br>        self.x = x<br>        self.y = y<br>    }</p><p>}<br>func +(left : Vector2D, right: Vector2D) -&gt; Vector2D {<br>    let result = Vector2D(x: left.x + right.x, y: left.y + right.y)<br>    return result<br>}</p><p>let first = Vector2D(x: 2, y: 2)<br>let second = Vector2D(x: 4, y: 1)<br>let result = first + second</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>Swift与Java泛型相同</p><p>class Tree <t> {<br>    // ‘T’现在可以用作一种类型 var value : T<br>    var value:T<br>    var children : [Tree <t>] = []<br>    init(value : T) {<br>        self.value = value<br>    }<br>    func addChild(value : T) -&gt; Tree <t> {<br>        var newChild = Tree<t>(value: value)<br>        children.append(newChild)<br>        reutrn newChild<br>    }<br>}</t></t></t></t></p><p>// 整数树<br>let integerTree = Tree<int>(value: 5)<br>// 可以增加包含Int的子树<br>integerTree.addChild(10)<br>//用Swift设计程序 | 45<br>integerTree.addChild(5)<br>// 字符串树<br>let stringTree = Tree<string>(value: “Hello”)<br>stringTree.addChild(“Yes”)<br>stringTree.addChild(“Internets”)</string></int></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>比较字符串</p><p>  let string1 : String = “Hello”<br>     let string2 : String = “Hel” + “lo”<br>     if string1 == string2 {<br>         println(“The strings are equal”)<br>  }<br>查找字符串</p><p> if string1.hasPrefix(“H”) {<br>         println(“String begins with an H”)<br>     }<br>     if string1.hasSuffix(“llo”) {<br>         println(“String ends in ‘llo’”)<br>     }<br>数据<br>let stringToConvert = “Hello, Swift”<br>let data = stringToConvert.dataUsingEncoding(NSUTF8StringEncoding)</p><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ol><li>Returning data from async call in Swift function<br>-&gt; pass callback</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// in Bookshop class</span><br><span class="line">func getGenres( completionHandler: (generes: NSArray) -&gt;()) &#123;</span><br><span class="line">    let task = session.dataTaskWithURL(url) &#123;</span><br><span class="line">    data, response, error in</span><br><span class="line">      ...</span><br><span class="line">      resultArray = results</span><br><span class="line">      completionHandler(genres: resultArray)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override func viewDidload() &#123;</span><br><span class="line">Bookshop.getGenres &#123;</span><br><span class="line">        gernres in </span><br><span class="line">            println(&quot;view controller :\(genres)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单，安全，快&lt;/p&gt;
&lt;p&gt;Ojbective-C 的方法名字太长&lt;/p&gt;
&lt;p&gt;Swift 舍弃了null 而使用Optional 语言&lt;/p&gt;
&lt;h3 id=&quot;变量与常量&quot;&gt;&lt;a href=&quot;#变量与常量&quot; class=&quot;headerlink&quot; title=&quot;变量与常
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS UICOllectionView</title>
    <link href="http://www.yuliang.xyz/2018/06/19/ios-ui-collectionview/"/>
    <id>http://www.yuliang.xyz/2018/06/19/ios-ui-collectionview/</id>
    <published>2018-06-19T04:13:53.000Z</published>
    <updated>2019-02-06T03:22:59.247Z</updated>
    
    <content type="html"><![CDATA[<p>11、UICollectionView自定义layout如何实现？</p><p>实现一个自定义layout的常规做法是继承UICollectionViewLayout类，然后重载下列方法：</p><p>-(CGSize)collectionViewContentSize<br>返回collectionView的内容的尺寸<br>-(NSArray <em>)layoutAttributesForElementsInRect:(CGRect)rect<br>返回rect中的所有的元素的布局属性<br>返回的是包含UICollectionViewLayoutAttributes的NSArray<br>UICollectionViewLayoutAttributes可以是cell，追加视图或装饰视    图的信息，通过不同的UICollectionViewLayoutAttributes初始化方法可以得到不同类型的UICollectionViewLayoutAttributes：<br>   layoutAttributesForCellWithIndexPath:<br>   layoutAttributesForSupplementaryViewOfKind:withIndexPath:<br>layoutAttributesForDecorationViewOfKind:withIndexPath:<br>  -(UICollectionViewLayoutAttributes )layoutAttributesForItemAtIndexPath:(NSIndexPath )indexPath<br>返回对应于indexPath的位置的cell的布局属性<br>-(UICollectionViewLayoutAttributes )layoutAttributesForSupplementaryViewOfKind:(NSString )kind atIndexPath:(NSIndexPath </em>)indexPath<br>返回对应于indexPath的位置的追加视图的布局属性，如果没有追加视图可不重载<br>-(UICollectionViewLayoutAttributes * )layoutAttributesForDecorationViewOfKind:(NSString)decorationViewKind atIndexPath:(NSIndexPath )indexPath<br>返回对应于indexPath的位置的装饰视图的布局属性，如果没有装饰视图可不重载<br>-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds<br>当边界发生改变时，是否应该刷新布局。如果YES则在边界变化（一般是scroll到其他地方）时，将重新计算需要的布局信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;11、UICollectionView自定义layout如何实现？&lt;/p&gt;
&lt;p&gt;实现一个自定义layout的常规做法是继承UICollectionViewLayout类，然后重载下列方法：&lt;/p&gt;
&lt;p&gt;-(CGSize)collectionViewContentSize
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ios-core-location</title>
    <link href="http://www.yuliang.xyz/2018/06/19/ios-core-location/"/>
    <id>http://www.yuliang.xyz/2018/06/19/ios-core-location/</id>
    <published>2018-06-19T04:13:06.000Z</published>
    <updated>2018-06-19T04:13:06.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS MapKit 总结</title>
    <link href="http://www.yuliang.xyz/2018/06/19/ios-mapkit/"/>
    <id>http://www.yuliang.xyz/2018/06/19/ios-mapkit/</id>
    <published>2018-06-19T04:10:31.000Z</published>
    <updated>2018-06-20T05:31:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MapKit的核心类为MkMapKit"><a href="#MapKit的核心类为MkMapKit" class="headerlink" title="MapKit的核心类为MkMapKit"></a>MapKit的核心类为MkMapKit</h1><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><ul><li><p>showUserLocation: Bool</p></li><li><p>userLocation: MKUserLocation</p></li><li><p>userTrackingMode: MKUserTrackingMode</p></li></ul><p>enum MKUserTrackingMode: NSInteger {<br>    MKUserTrackingModeNone = 0,<br>    MKUserTrackingModeFollow,<br>    MKUserTrackingModeWithHeading,<br>}</p><ul><li>mapType: MKMapType</li></ul><p>enum MKMapType: NSInteger {<br>    MKMapTypeStandard = 0,<br>    MKMapTypeSatellite,<br>    MKMapTypeSatelliteFlyover,<br>    MKMapTypeBirdFloyover,<br>}</p><ul><li>annotations:</li></ul><ul><li><p>zoomEnabled: Bool</p></li><li><p>scrollEnabled: Bool</p></li><li><p>rotateenabled: Bool</p></li><li><p>pitchEnabled: Bool</p></li><li><p>showsBuilding: Bool</p></li><li><p>showsTraffic: Bool</p></li><li><p>showsCompass: Bool</p></li><li><p>showsScale: Bool</p></li></ul><h2 id="MKMapKit-Function"><a href="#MKMapKit-Function" class="headerlink" title="MKMapKit Function"></a>MKMapKit Function</h2><p>func addAnnotation(<em> annotation: MKAnnotation)<br>func addAnnotations(</em> annotations: [MKAnnotation])</p><p>func removeAnnotation(<em> annotation: MKAnnotation)<br>func removeAnnotations(</em> annotations: [MKAnnotation])</p><p>selectAnnotation: annotation animated: Bool<br>deselectAnnotation: annotation animated: Bool</p><p>viewForAnnotation: annotation<br>dequeueResuableAnnotationViewWithIdentifier</p><p>setRegion:Region, animated: Bool<br>SetCenterCoordinate: coordinate, animated: Bool</p><p>convertCoordinate: coordinate, toPointToView: view<br>convertPoint: oint, toCoordinateFromView: view</p><h2 id="Delegate-Functions"><a href="#Delegate-Functions" class="headerlink" title="Delegate Functions"></a>Delegate Functions</h2><ul><li><p>mapViewDidFinishLoadingMap</p></li><li><p>mapViewDidFailLoadingMap</p></li><li><p>mapViewDidUpdateUserLocation</p></li><li><p>mapViewRegionDidChangeAnimation</p></li><li><p>mapViewdidSelectedAnnotationView</p></li><li><p>mapViewdidDeselectedAnnotationView</p></li><li><p>mapviewViewForAnnotation</p></li></ul><h1 id="MKAnnotationView"><a href="#MKAnnotationView" class="headerlink" title="MKAnnotationView"></a>MKAnnotationView</h1><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><p>annotation: MKAnnotation<br>image: UIImage<br>reuseIdentifier: NSString<br>calloutOffset: CGPoint<br>seleted: Bool<br>canShowCallout: Bool<br>leftCalloutAccessoryView: UIView<br>rightCalloutAccessoryView: UIView</p><h1 id="MapView-的技巧与注意事项"><a href="#MapView-的技巧与注意事项" class="headerlink" title="MapView 的技巧与注意事项"></a>MapView 的技巧与注意事项</h1><ol><li>refresing MKMapView for iphone developement<br>Issue: add annotations after the view is loaded. The annotations cannot be displayed on the mapview<br>Solution:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[self performSelectorOnMainThread;@selector(reloadMap) </span><br><span class="line">    withObject: nil waitUntilDone: false];</span><br><span class="line"></span><br><span class="line">- (void) reloadMap</span><br><span class="line">&#123;</span><br><span class="line">[map setRegion: map.region animated: true];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>iOS refreshing annotations on MapView, simply remove all the annotations and then re-add them<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mapView removeAnnotations: [mapView.annotations]];</span><br><span class="line">[mapView addAnnotations: [mapView.annotations]];</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MapKit的核心类为MkMapKit&quot;&gt;&lt;a href=&quot;#MapKit的核心类为MkMapKit&quot; class=&quot;headerlink&quot; title=&quot;MapKit的核心类为MkMapKit&quot;&gt;&lt;/a&gt;MapKit的核心类为MkMapKit&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
  </entry>
  
</feed>
